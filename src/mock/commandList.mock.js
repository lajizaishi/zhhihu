const mockList = [
    {
        "id": "12_1711881622.757",
        "type": "feed",
        "offset": 12,
        "verb": "TOPIC_ACKNOWLEDGED_ANSWER",
        "created_time": 1711881622,
        "updated_time": 1711881622,
        "target": {
            "id": 3316787220,
            "type": "answer",
            "url": "https://api.zhihu.com/answers/3316787220",
            "author": {
                "id": "62b00c2a9f44a7e28fcfdd405e7b0a42",
                "url": "https://api.zhihu.com/people/62b00c2a9f44a7e28fcfdd405e7b0a42",
                "user_type": "people",
                "url_token": "mo-mo-mo-89-12-11",
                "name": "程普",
                "headline": "⛵️前端/全栈/AI/出海｜Next开源手艺人｜掘金签约作者",
                "avatar_url": "https://pic1.zhimg.com/50/v2-f619b3f760c0502d36ff5ce479789dad_l.jpg?source=b6762063",
                "is_org": false,
                "gender": 1,
                "badge": [
                    {
                        "type": "identity_people",
                        "description": "互联网行业 高级前端工程师"
                    }
                ],
                "followers_count": 401,
                "is_following": false,
                "is_followed": false
            },
            "created_time": 1701930444,
            "updated_time": 1704436038,
            "voteup_count": 92,
            "thanks_count": 57,
            "comment_count": 2,
            "is_copyable": true,
            "question": {
                "id": 49496872,
                "type": "question",
                "url": "https://api.zhihu.com/questions/49496872",
                "author": {
                    "id": "72603d78b8ca5cabdad4ab4abf60f1ad",
                    "url": "https://api.zhihu.com/people/72603d78b8ca5cabdad4ab4abf60f1ad",
                    "user_type": "people",
                    "url_token": "justanotherjoke",
                    "name": "Fake Name",
                    "headline": "",
                    "avatar_url": "https://picx.zhimg.com/50/v2-0b3840afabfa25df77d92a62f562dc80_l.jpg?source=b6762063",
                    "is_org": false,
                    "gender": 1,
                    "followers_count": 212,
                    "is_following": false,
                    "is_followed": false
                },
                "title": "如何理解 React Fiber 架构？",
                "created": 1470905909,
                "answer_count": 0,
                "follower_count": 0,
                "comment_count": 2,
                "bound_topic_ids": [
                    225,
                    156416
                ],
                "is_following": false,
                "excerpt": "",
                "relationship": {
                    "is_author": false
                },
                "detail": "",
                "question_type": "normal"
            },
            "thumbnail": "https://pic1.zhimg.com/50/v2-0d4a279ffaa0043bad3025f3c4b46759_720w.jpg?source=b6762063",
            "excerpt": "为了写这篇文章，我花了5天时间阅读Fiber的核心源码，尽管本文字符数过万，但相对于几十万行Fiber源码来说，只能算是介绍了Fiber的基础知识，所以如果内容有纰漏，请在评论区为我指正，我会进行更新，如果阅读文章后有哪个关于Fiber的专题你想了解，也可以评论区提出来，我很乐意继续研究源码和分享知识。自React 16开始，React引入了 Fiber架构，解决了以前的更新机制的问题，即在长时间的更新过程中，主线程会被阻塞，导致应…",
            "excerpt_new": "为了写这篇文章，我花了5天时间阅读Fiber的核心源码，尽管本文字符数过万，但相对于几十万行Fiber源码来说，只能算是介绍了Fiber的基础知识，所以如果内容有纰漏，请在评论区为我指正，我会进行更新，如果阅读文章后有哪个关于Fiber的专题你想了解，也可以评论区提出来，我很乐意继续研究源码和分享知识。自React 16开始，React引入了 Fiber架构，解决了以前的更新机制的问题，即在长时间的更新过程中，主线程会被阻塞，导致应…",
            "preview_type": "default",
            "preview_text": "",
            "reshipment_settings": "allowed",
            "content": "<blockquote data-pid=\"OHcSFIRF\"><i> 为了写这篇文章，我花了5天时间阅读Fiber的核心源码，尽管本文字符数过万，但相对于几十万行Fiber源码来说，只能算是介绍了Fiber的基础知识，所以如果内容有纰漏，请在评论区为我指正，我会进行更新，如果阅读文章后有哪个关于Fiber的专题你想了解，也可以评论区提出来，我很乐意继续研究源码和分享知识。</i></blockquote><p data-pid=\"qVMKrKUX\">自React 16开始，React引入了<b>Fiber</b>架构，解决了以前的更新机制的问题，即在长时间的更新过程中，主线程会被阻塞，导致应用无法及时响应用户输入。本文我们就来聊聊Fiber是什么以及它的底层原理，学习完本文可以让你对Fiber架构的原理有一个比较清晰的认识。</p><p data-pid=\"8dOONGcV\">本文首发于我的博客「 <b><a href=\"https://link.zhihu.com/?target=https%3A//weijunext.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">J实验室</a>」</b></p><p data-pid=\"P6nWs42o\">欢迎加入全栈交流群，一起学习交流前端和Node端技术 </p><a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/RXpu-Ck13zoHyLP1OOUZ-g\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pica.zhimg.com/v2-37f071cf107ec6a6bdd33c2f40b0ec9e_180x120.jpg\" data-image-width=\"1280\" data-image-height=\"543\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">独立全栈开发交流群</a><h2><b>Fiber是什么？</b></h2><p data-pid=\"u4DtdBly\">首先，我们先聊聊React的基本组成：当我们写React组件并使用JSX时，React在底层会将JSX转换为元素的对象结构。例如：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">const</span> <span class=\"nx\">element</span> <span class=\"o\">=</span> <span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span><span class=\"nx\">Hello</span><span class=\"p\">,</span> <span class=\"nx\">world</span><span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;;</span>\n</code></pre></div><p data-pid=\"Ew0z_s5R\">上述代码会被转换为以下形式：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">const</span> <span class=\"nx\">element</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span>\n  <span class=\"s1\">&#39;h1&#39;</span><span class=\"p\">,</span>\n  <span class=\"kc\">null</span><span class=\"p\">,</span>\n  <span class=\"s1\">&#39;Hello, world&#39;</span>\n<span class=\"p\">);</span>\n</code></pre></div><p data-pid=\"_MeV-odQ\">为了将这个元素渲染到DOM上，React需要创建一种内部实例，用来追踪该组件的所有信息和状态。在早期版本的React中，我们称之为“实例”或“虚拟DOM对象”。但在Fiber架构中，这个新的工作单元就叫做Fiber。</p><p data-pid=\"ab5vqYO_\">所以，在本质上，<b>Fiber是一个JavaScript对象</b>，代表React的一个工作单元，它包含了与组件相关的信息。一个简化的Fiber对象长这样：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"p\">{</span>\n  <span class=\"kr\">type</span><span class=\"o\">:</span> <span class=\"s1\">&#39;h1&#39;</span><span class=\"p\">,</span>  <span class=\"c1\">// 组件类型\n</span><span class=\"c1\"></span>  <span class=\"nx\">key</span>: <span class=\"kt\">null</span><span class=\"p\">,</span>   <span class=\"c1\">// React key\n</span><span class=\"c1\"></span>  <span class=\"nx\">props</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"p\">...</span> <span class=\"p\">},</span> <span class=\"c1\">// 输入的props\n</span><span class=\"c1\"></span>  <span class=\"nx\">state</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"p\">...</span> <span class=\"p\">},</span> <span class=\"c1\">// 组件的state (如果是class组件或带有state的function组件)\n</span><span class=\"c1\"></span>  <span class=\"nx\">child</span>: <span class=\"kt\">Fiber</span> <span class=\"o\">|</span> <span class=\"kc\">null</span><span class=\"p\">,</span>  <span class=\"c1\">// 第一个子元素的Fiber\n</span><span class=\"c1\"></span>  <span class=\"nx\">sibling</span>: <span class=\"kt\">Fiber</span> <span class=\"o\">|</span> <span class=\"kc\">null</span><span class=\"p\">,</span>  <span class=\"c1\">// 下一个兄弟元素的Fiber\n</span><span class=\"c1\"></span>  <span class=\"k\">return</span><span class=\"o\">:</span> <span class=\"nx\">Fiber</span> <span class=\"o\">|</span> <span class=\"kc\">null</span><span class=\"p\">,</span>  <span class=\"c1\">// 父元素的Fiber\n</span><span class=\"c1\"></span>  <span class=\"c1\">// ...其他属性\n</span><span class=\"c1\"></span><span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"5pMSg7aB\">当React开始工作时，它会沿着Fiber树形结构进行，试图完成每个Fiber的工作（例如，比较新旧props，确定是否需要更新组件等）。如果主线程有更重要的工作（例如，响应用户输入），则React可以中断当前工作并返回执行主线程上的任务。</p><p data-pid=\"ZgQpu6Lz\">因此，Fiber不仅仅是代表组件的一个内部对象，它还是React的调度和更新机制的核心组成部分。</p><h2><b>为什么需要Fiber？</b></h2><p data-pid=\"ygXUAiVP\">在React 16之前的版本中，是使用递归的方式处理组件树更新，称为<b>堆栈调和（Stack Reconciliation）</b>，这种方法一旦开始就不能中断，直到整个组件树都被遍历完。这种机制在处理大量数据或复杂视图时可能导致主线程被阻塞，从而使应用无法及时响应用户的输入或其他高优先级任务。</p><p data-pid=\"qm-lLlPp\">Fiber的引入改变了这一情况。Fiber可以理解为是React自定义的一个带有链接关系的DOM树，每个Fiber都代表了一个工作单元，React可以在处理任何Fiber之前判断是否有足够的时间完成该工作，并在必要时中断和恢复工作。</p><h2>Fiber的结构</h2><p data-pid=\"hPwavqgq\">我们来看一下源码里FiberNode的结构：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kd\">function</span> <span class=\"nx\">FiberNode</span><span class=\"p\">(</span>\n  <span class=\"k\">this</span><span class=\"o\">:</span> <span class=\"nx\">$FlowFixMe</span><span class=\"p\">,</span>\n  <span class=\"nx\">tag</span>: <span class=\"kt\">WorkTag</span><span class=\"p\">,</span>\n  <span class=\"nx\">pendingProps</span>: <span class=\"kt\">mixed</span><span class=\"p\">,</span>\n  <span class=\"nx\">key</span>: <span class=\"kt\">null</span> <span class=\"o\">|</span> <span class=\"kt\">string</span><span class=\"p\">,</span>\n  <span class=\"nx\">mode</span>: <span class=\"kt\">TypeOfMode</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// 基本属性\n</span><span class=\"c1\"></span>  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">tag</span> <span class=\"o\">=</span> <span class=\"nx\">tag</span><span class=\"p\">;</span> <span class=\"c1\">// 描述此Fiber的启动模式的值（LegacyRoot = 0; ConcurrentRoot = 1）\n</span><span class=\"c1\"></span>  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">key</span> <span class=\"o\">=</span> <span class=\"nx\">key</span><span class=\"p\">;</span> <span class=\"c1\">// React key\n</span><span class=\"c1\"></span>  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">elementType</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span> <span class=\"c1\">// 描述React元素的类型。例如，对于JSX&lt;App /&gt;，elementType是App\n</span><span class=\"c1\"></span>  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"kr\">type</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span> <span class=\"c1\">// 组件类型\n</span><span class=\"c1\"></span>  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">stateNode</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span> <span class=\"c1\">// 对于类组件，这是类的实例；对于DOM元素，它是对应的DOM节点。\n</span><span class=\"c1\"></span>\n  <span class=\"c1\">// Fiber链接\n</span><span class=\"c1\"></span>  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"k\">return</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span> <span class=\"c1\">// 指向父Fiber\n</span><span class=\"c1\"></span>  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">child</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span> <span class=\"c1\">// 指向第一个子Fiber\n</span><span class=\"c1\"></span>  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">sibling</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span> <span class=\"c1\">// 指向其兄弟Fiber\n</span><span class=\"c1\"></span>  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"c1\">// 子Fiber中的索引位置\n</span><span class=\"c1\"></span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">ref</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span> <span class=\"c1\">// 如果组件上有ref属性，则该属性指向它\n</span><span class=\"c1\"></span>  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">refCleanup</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span> <span class=\"c1\">// 如果组件上的ref属性在更新中被删除或更改，此字段会用于追踪需要清理的旧ref\n</span><span class=\"c1\"></span>\n  <span class=\"c1\">// Props &amp; State\n</span><span class=\"c1\"></span>  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">pendingProps</span> <span class=\"o\">=</span> <span class=\"nx\">pendingProps</span><span class=\"p\">;</span> <span class=\"c1\">// 正在等待处理的新props\n</span><span class=\"c1\"></span>  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">memoizedProps</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span> <span class=\"c1\">// 上一次渲染时的props\n</span><span class=\"c1\"></span>  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">updateQueue</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span> <span class=\"c1\">// 一个队列，包含了该Fiber上的状态更新和副作用\n</span><span class=\"c1\"></span>  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">memoizedState</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span> <span class=\"c1\">// 上一次渲染时的state\n</span><span class=\"c1\"></span>  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">dependencies</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span> <span class=\"c1\">// 该Fiber订阅的上下文或其他资源的描述\n</span><span class=\"c1\"></span>\n  <span class=\"c1\">// 工作模式\n</span><span class=\"c1\"></span>  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">mode</span> <span class=\"o\">=</span> <span class=\"nx\">mode</span><span class=\"p\">;</span> <span class=\"c1\">// 描述Fiber工作模式的标志（例如Concurrent模式、Blocking模式等）。\n</span><span class=\"c1\"></span>\n  <span class=\"c1\">// Effects\n</span><span class=\"c1\"></span>  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">flags</span> <span class=\"o\">=</span> <span class=\"nx\">NoFlags</span><span class=\"p\">;</span> <span class=\"c1\">// 描述该Fiber发生的副作用的标志（十六进制的标识）\n</span><span class=\"c1\"></span>  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">subtreeFlags</span> <span class=\"o\">=</span> <span class=\"nx\">NoFlags</span><span class=\"p\">;</span> <span class=\"c1\">// 描述该Fiber子树中发生的副作用的标志（十六进制的标识）\n</span><span class=\"c1\"></span>  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">deletions</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span> <span class=\"c1\">// 在commit阶段要删除的子Fiber数组\n</span><span class=\"c1\"></span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">lanes</span> <span class=\"o\">=</span> <span class=\"nx\">NoLanes</span><span class=\"p\">;</span> <span class=\"c1\">// 与React的并发模式有关的调度概念。\n</span><span class=\"c1\"></span>  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">childLanes</span> <span class=\"o\">=</span> <span class=\"nx\">NoLanes</span><span class=\"p\">;</span> <span class=\"c1\">// 与React的并发模式有关的调度概念。\n</span><span class=\"c1\"></span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">alternate</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span> <span class=\"c1\">// Current Tree和Work-in-progress (WIP) Tree的互相指向对方tree里的对应单元\n</span><span class=\"c1\"></span>\n    <span class=\"c1\">// 如果启用了性能分析\n</span><span class=\"c1\"></span>  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">enableProfilerTimer</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// ……\n</span><span class=\"c1\"></span>  <span class=\"p\">}</span>\n\n    <span class=\"c1\">// 开发模式中\n</span><span class=\"c1\"></span>  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">__DEV__</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// ……\n</span><span class=\"c1\"></span>  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"2hwBtO3j\">其实可以理解为是一个更强大的虚拟DOM。</p><h2>Fiber工作原理</h2><p data-pid=\"8uS44HPY\">Fiber工作原理中最核心的点就是：可以中断和恢复，这个特性增强了React的并发性和响应性。</p><p data-pid=\"rewfLEof\">实现可中断和恢复的原因就在于：Fiber的数据结构里提供的信息让React可以追踪工作进度、管理调度和同步更新到DOM</p><p data-pid=\"eSaonO1P\">现在我们来聊聊Fiber工作原理中的几个关键点：</p><ul><li data-pid=\"PCjWliDa\"><b>单元工作</b>：每个Fiber节点代表一个单元，所有Fiber节点共同组成一个Fiber链表树（有链接属性，同时又有树的结构），这种结构让React可以细粒度控制节点的行为。<br/> </li><li data-pid=\"RrPIHV-z\"><b>链接属性</b>：<b><code>child</code></b>、<b><code>sibling</code></b> 和 <b><code>return</code></b> 字段构成了Fiber之间的链接关系，使React能够遍历组件树并知道从哪里开始、继续或停止工作。</li></ul><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-d253b3afc6e30729bcb07128074bc814_b.jpg\" data-size=\"normal\" data-rawwidth=\"1318\" data-rawheight=\"790\" data-original-token=\"v2-8907431b061378d33facc01fad50ef87\" class=\"origin_image zh-lightbox-thumb\" width=\"1318\" data-original=\"https://pic1.zhimg.com/v2-d253b3afc6e30729bcb07128074bc814_r.jpg\"/><figcaption>react fiber</figcaption></figure><ul><li data-pid=\"4BKE-is9\"><b>双缓冲技术：</b> React在更新时，会根据现有的Fiber树（<b>Current Tree</b>）创建一个新的临时树（<b>Work-in-progress (WIP) Tree</b>），WIP-Tree包含了当前更新受影响的最高节点直至其所有子孙节点。Current Tree是当前显示在页面上的视图，WIP-Tree则是在后台进行更新，WIP-Tree更新完成后会复制其它节点，并最终替换掉Current Tree，成为新的Current Tree。因为React在更新时总是维护了两个Fiber树，所以可以随时进行比较、中断或恢复等操作，而且这种机制让React能够同时具备拥有优秀的渲染性能和UI的稳定性。</li></ul><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-f6aafc4408e74bf10af13f8a5abe3a6d_b.jpg\" data-size=\"normal\" data-rawwidth=\"738\" data-rawheight=\"586\" data-original-token=\"v2-349ddae22352847f5095bd1231b13d37\" class=\"origin_image zh-lightbox-thumb\" width=\"738\" data-original=\"https://pic2.zhimg.com/v2-f6aafc4408e74bf10af13f8a5abe3a6d_r.jpg\"/><figcaption>react fiber</figcaption></figure><ul><li data-pid=\"_xS9Ma9o\"><b>State 和 Props：<code>memoizedProps</code></b>、<b><code>pendingProps</code></b> 和 <b><code>memoizedState</code></b> 字段让React知道组件的上一个状态和即将应用的状态。通过比较这些值，React可以决定组件是否需要更新，从而避免不必要的渲染，提高性能。<br/> </li><li data-pid=\"ymITMeQH\"><b>副作用的追踪</b>：<b><code>flags</code></b> 和 <b><code>subtreeFlags</code></b> 字段标识Fiber及其子树中需要执行的副作用，例如DOM更新、生命周期方法调用等。React会积累这些副作用，然后在Commit阶段一次性执行，从而提高效率。</li></ul><h2>Fiber工作流程</h2><p data-pid=\"f1T4z3vq\">了解了Fiber的工作原理后，我们可以通过阅读源码来加深对Fiber的理解。React Fiber的工作流程主要分为两个阶段：</p><h3>第一阶段：Reconciliation（调和）</h3><ul><li data-pid=\"VWi3Y0Nc\"><b>目标</b>: 确定哪些部分的UI需要更新。</li><li data-pid=\"pjZUnzkV\"><b>原理</b>: 这是React构建工作进度树的阶段，会比较新的props和旧的Fiber树来确定哪些部分需要更新。</li></ul><p data-pid=\"EsrVAKrQ\">调和阶段又分为三个小阶段：</p><h3>1、创建与标记更新节点：<code>beginWork</code></h3><ol><li data-pid=\"iJBVf5MF\"><b>判断Fiber节点是否要更新：</b></li></ol><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"c1\">// packages/react-reconciler/src/ReactFiberBeginWork.js\n</span><span class=\"c1\">// 以下只是核心逻辑的代码，不是beginWork的完整源码\n</span><span class=\"c1\"></span><span class=\"kd\">function</span> <span class=\"nx\">beginWork</span><span class=\"p\">(</span>\n  <span class=\"nx\">current</span>: <span class=\"kt\">Fiber</span> <span class=\"o\">|</span> <span class=\"kc\">null</span><span class=\"p\">,</span>\n  <span class=\"nx\">workInProgress</span>: <span class=\"kt\">Fiber</span><span class=\"p\">,</span>\n  <span class=\"nx\">renderLanes</span>: <span class=\"kt\">Lanes</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"nx\">Fiber</span> <span class=\"o\">|</span> <span class=\"kc\">null</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">current</span> <span class=\"o\">!==</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 这是旧节点，需要检查props和context是否有变化再确认是否需要更新节点\n</span><span class=\"c1\"></span>        <span class=\"kr\">const</span> <span class=\"nx\">oldProps</span> <span class=\"o\">=</span> <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">memoizedProps</span><span class=\"p\">;</span>\n        <span class=\"kr\">const</span> <span class=\"nx\">newProps</span> <span class=\"o\">=</span> <span class=\"nx\">workInProgress</span><span class=\"p\">.</span><span class=\"nx\">pendingProps</span><span class=\"p\">;</span>\n\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">oldProps</span> <span class=\"o\">!==</span> <span class=\"nx\">newProps</span> <span class=\"o\">||</span> <span class=\"nx\">hasLegacyContextChanged</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n            <span class=\"nx\">didReceiveUpdate</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span> <span class=\"c1\">// props和context有变化，说明节点有更新\n</span><span class=\"c1\"></span>        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// 其它特殊情况的判断\n</span><span class=\"c1\"></span>        <span class=\"p\">}</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"nx\">didReceiveUpdate</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span> <span class=\"c1\">// 这是新节点，要创建，而不是更新\n</span><span class=\"c1\"></span>    <span class=\"p\">}</span>\n\n    <span class=\"nx\">workInProgress</span><span class=\"p\">.</span><span class=\"nx\">lanes</span> <span class=\"o\">=</span> <span class=\"nx\">NoLanes</span><span class=\"p\">;</span> <span class=\"c1\">// 进入beginWork表示开始新的工作阶段，所以要把旧的workInProgress优先级清除掉\n</span><span class=\"c1\"></span>\n    <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">workInProgress</span><span class=\"p\">.</span><span class=\"nx\">tag</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 通过workInProgress的tag属性来确定如何处理当前的Fiber节点\n</span><span class=\"c1\"></span>        <span class=\"c1\">// 每一种tag对应一种不同的Fiber类型，进入不同的调和过程（reconcileChildren()）\n</span><span class=\"c1\"></span>        <span class=\"k\">case</span> <span class=\"nx\">IndeterminateComponent</span><span class=\"o\">:</span> <span class=\"c1\">// 尚未确定其类型的组件\n</span><span class=\"c1\"></span>        <span class=\"c1\">// ……\n</span><span class=\"c1\"></span>        <span class=\"k\">case</span> <span class=\"nx\">LazyComponent</span><span class=\"o\">:</span> <span class=\"c1\">// 懒加载组件\n</span><span class=\"c1\"></span>        <span class=\"c1\">// ……\n</span><span class=\"c1\"></span>        <span class=\"k\">case</span> <span class=\"nx\">FunctionComponent</span><span class=\"o\">:</span> <span class=\"c1\">// 函数组件\n</span><span class=\"c1\"></span>        <span class=\"c1\">// ……\n</span><span class=\"c1\"></span>        <span class=\"k\">case</span> <span class=\"nx\">ClassComponent</span><span class=\"o\">:</span> <span class=\"c1\">// 类组件\n</span><span class=\"c1\"></span>        <span class=\"c1\">// ……\n</span><span class=\"c1\"></span>\n        <span class=\"c1\">// 其它多种Fiber类型\n</span><span class=\"c1\"></span>        <span class=\"c1\">// case ……\n</span><span class=\"c1\"></span>    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><ol><li data-pid=\"2kEjo8yD\"><b>判断Fiber子节点是更新还是复用：</b></li></ol><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"c1\">// packages/react-reconciler/src/ReactFiberBeginWork.js\n</span><span class=\"c1\"></span><span class=\"kr\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">reconcileChildren</span><span class=\"p\">(</span>\n  <span class=\"nx\">current</span>: <span class=\"kt\">Fiber</span> <span class=\"o\">|</span> <span class=\"kc\">null</span><span class=\"p\">,</span>\n  <span class=\"nx\">workInProgress</span>: <span class=\"kt\">Fiber</span><span class=\"p\">,</span>\n  <span class=\"nx\">nextChildren</span>: <span class=\"kt\">any</span><span class=\"p\">,</span> <span class=\"c1\">// 要调和的新的子元素\n</span><span class=\"c1\"></span>  <span class=\"nx\">renderLanes</span>: <span class=\"kt\">Lanes</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">current</span> <span class=\"o\">===</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 如果current为空，说明这个Fiber是首次渲染，React会为nextChildren生成一组新的Fiber节点\n</span><span class=\"c1\"></span>    <span class=\"nx\">workInProgress</span><span class=\"p\">.</span><span class=\"nx\">child</span> <span class=\"o\">=</span> <span class=\"nx\">mountChildFibers</span><span class=\"p\">(</span>\n      <span class=\"nx\">workInProgress</span><span class=\"p\">,</span>\n      <span class=\"kc\">null</span><span class=\"p\">,</span>\n      <span class=\"nx\">nextChildren</span><span class=\"p\">,</span>\n      <span class=\"nx\">renderLanes</span><span class=\"p\">,</span>\n    <span class=\"p\">);</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 当current非空时，React会利用现有的Fiber节点（current.child）和新的子元素（nextChildren）进行调和\n</span><span class=\"c1\"></span>    <span class=\"nx\">workInProgress</span><span class=\"p\">.</span><span class=\"nx\">child</span> <span class=\"o\">=</span> <span class=\"nx\">reconcileChildFibers</span><span class=\"p\">(</span>\n      <span class=\"nx\">workInProgress</span><span class=\"p\">,</span>\n      <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">child</span><span class=\"p\">,</span>\n      <span class=\"nx\">nextChildren</span><span class=\"p\">,</span>\n      <span class=\"nx\">renderLanes</span><span class=\"p\">,</span>\n    <span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"R48-Uv0n\"><b><code>mountChildFibers</code></b>和<b><code>reconcileChildFibers</code></b>最终会进入同一个方法<b><code>createChildReconciler</code></b>，执行 Fiber 节点的调和（处理诸如新的 Fiber 创建、旧 Fiber 删除或现有 Fiber 更新等操作）。而整个 <b><code>beginWork</code></b> 完成后，就会进入 <b><code>completeWork</code></b> 流程。</p><h3>2、收集副作用列表：<code>completeUnitOfWork</code>和<code>completeWork</code></h3><p data-pid=\"ZhkLxbxg\"><b><code>completeUnitOfWork</code></b> 负责遍历Fiber节点，同时记录了有副作用节点的关系。下面从源码上理解它的工作：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"c1\">// packages/react-reconciler/src/ReactFiberWorkLoop.js\n</span><span class=\"c1\">// 以下只是核心逻辑的代码，不是completeUnitOfWork的完整源码\n</span><span class=\"c1\"></span><span class=\"kd\">function</span> <span class=\"nx\">completeUnitOfWork</span><span class=\"p\">(</span><span class=\"nx\">unitOfWork</span>: <span class=\"kt\">Fiber</span><span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">completedWork</span>: <span class=\"kt\">Fiber</span> <span class=\"o\">=</span> <span class=\"nx\">unitOfWork</span><span class=\"p\">;</span> <span class=\"c1\">// 当前正在完成的工作单元\n</span><span class=\"c1\"></span>    <span class=\"k\">do</span> <span class=\"p\">{</span>\n        <span class=\"kr\">const</span> <span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"nx\">completedWork</span><span class=\"p\">.</span><span class=\"nx\">alternate</span><span class=\"p\">;</span> <span class=\"c1\">// 当前Fiber节点在另一棵树上的版本\n</span><span class=\"c1\"></span>        <span class=\"kr\">const</span> <span class=\"nx\">returnFiber</span> <span class=\"o\">=</span> <span class=\"nx\">completedWork</span><span class=\"p\">.</span><span class=\"k\">return</span><span class=\"p\">;</span> <span class=\"c1\">// 当前Fiber节点的父节点\n</span><span class=\"c1\"></span>\n        <span class=\"kd\">let</span> <span class=\"nx\">next</span><span class=\"p\">;</span>\n        <span class=\"nx\">next</span> <span class=\"o\">=</span> <span class=\"nx\">completeWork</span><span class=\"p\">(</span><span class=\"nx\">current</span><span class=\"p\">,</span> <span class=\"nx\">completedWork</span><span class=\"p\">,</span> <span class=\"nx\">renderLanes</span><span class=\"p\">);</span> <span class=\"c1\">// 调用completeWork函数\n</span><span class=\"c1\"></span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">next</span> <span class=\"o\">!==</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"c1\">// 当前Fiber还有工作要完成\n</span><span class=\"c1\"></span>          <span class=\"nx\">workInProgress</span> <span class=\"o\">=</span> <span class=\"nx\">next</span><span class=\"p\">;</span>\n          <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"kr\">const</span> <span class=\"nx\">siblingFiber</span> <span class=\"o\">=</span> <span class=\"nx\">completedWork</span><span class=\"p\">.</span><span class=\"nx\">sibling</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">siblingFiber</span> <span class=\"o\">!==</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"c1\">// 如果有兄弟节点，则进入兄弟节点的工作\n</span><span class=\"c1\"></span>          <span class=\"nx\">workInProgress</span> <span class=\"o\">=</span> <span class=\"nx\">siblingFiber</span><span class=\"p\">;</span>\n          <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"c1\">// 如果没有兄弟节点，回到父节点继续\n</span><span class=\"c1\"></span>        <span class=\"nx\">completedWork</span> <span class=\"o\">=</span> <span class=\"nx\">returnFiber</span><span class=\"p\">;</span>\n        <span class=\"nx\">workInProgress</span> <span class=\"o\">=</span> <span class=\"nx\">completedWork</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span> <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nx\">completedWork</span> <span class=\"o\">!==</span> <span class=\"kc\">null</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// 如果处理了整个Fiber树，更新workInProgressRootExitStatus为RootCompleted，表示调和已完成\n</span><span class=\"c1\"></span>  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">workInProgressRootExitStatus</span> <span class=\"o\">===</span> <span class=\"nx\">RootInProgress</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">workInProgressRootExitStatus</span> <span class=\"o\">=</span> <span class=\"nx\">RootCompleted</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span> \n<span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"ML3GzCSk\"><b><code>completeWork</code></b> 在 <b><code>completeUnitOfWork</code></b> 中被调用，下面是 <b><code>completeWork</code></b> 的逻辑，主要是根据 tag 进行不同的处理，真正的核心逻辑在 <b><code>bubbleProperties</code></b> 里面</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"c1\">// packages/react-reconciler/src/ReactFiberCompleteWork.js\n</span><span class=\"c1\">// 以下只是核心逻辑的代码，不是completeWork的完整源码\n</span><span class=\"c1\"></span><span class=\"kd\">function</span> <span class=\"nx\">completeWork</span><span class=\"p\">(</span>\n  <span class=\"nx\">current</span>: <span class=\"kt\">Fiber</span> <span class=\"o\">|</span> <span class=\"kc\">null</span><span class=\"p\">,</span>\n  <span class=\"nx\">workInProgress</span>: <span class=\"kt\">Fiber</span><span class=\"p\">,</span>\n  <span class=\"nx\">renderLanes</span>: <span class=\"kt\">Lanes</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"nx\">Fiber</span> <span class=\"o\">|</span> <span class=\"kc\">null</span> <span class=\"p\">{</span>\n  <span class=\"kr\">const</span> <span class=\"nx\">newProps</span> <span class=\"o\">=</span> <span class=\"nx\">workInProgress</span><span class=\"p\">.</span><span class=\"nx\">pendingProps</span><span class=\"p\">;</span>\n    <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">workInProgress</span><span class=\"p\">.</span><span class=\"nx\">tag</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 多种tag\n</span><span class=\"c1\"></span>    <span class=\"k\">case</span> <span class=\"nx\">FunctionComponent</span>:\n    <span class=\"kt\">case</span> <span class=\"nx\">ForwardRef</span>:\n    <span class=\"kt\">case</span> <span class=\"nx\">SimpleMemoComponent</span>:\n         <span class=\"kt\">bubbleProperties</span><span class=\"p\">(</span><span class=\"nx\">workInProgress</span><span class=\"p\">)</span>\n         <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n    <span class=\"k\">case</span> <span class=\"nx\">ClassComponent</span><span class=\"o\">:</span>\n         <span class=\"c1\">// 省略逻辑\n</span><span class=\"c1\"></span>         <span class=\"c1\">// ……\n</span><span class=\"c1\"></span>         <span class=\"nx\">bubbleProperties</span><span class=\"p\">(</span><span class=\"nx\">workInProgress</span><span class=\"p\">)</span>\n         <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n    <span class=\"k\">case</span> <span class=\"nx\">HostComponent</span><span class=\"o\">:</span>\n         <span class=\"c1\">// 省略逻辑\n</span><span class=\"c1\"></span>         <span class=\"c1\">// ……\n</span><span class=\"c1\"></span>         <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n    <span class=\"c1\">// 多种tag\n</span><span class=\"c1\"></span>        <span class=\"c1\">// ……\n</span><span class=\"c1\"></span>  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"QEd2ZocZ\"><b><code>bubbleProperties</code></b> 为 <b><code>completeWork</code></b> 完成了两个工作：</p><ol><li data-pid=\"rBVKBhoG\"><b>记录Fiber的副作用标志</b></li><li data-pid=\"yNqXANA5\"><b>为子Fiber创建链表</b></li></ol><p data-pid=\"pn17VDTE\">这两个工作都从下面这段代码中看出来：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"c1\">// packages/react-reconciler/src/ReactFiberCompleteWork.js\n</span><span class=\"c1\">// 以下只是核心逻辑的代码，不是bubbleProperties的完整源码\n</span><span class=\"c1\"></span><span class=\"kd\">function</span> <span class=\"nx\">bubbleProperties</span><span class=\"p\">(</span><span class=\"nx\">completedWork</span>: <span class=\"kt\">Fiber</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">didBailout</span> <span class=\"o\">=</span>\n    <span class=\"nx\">completedWork</span><span class=\"p\">.</span><span class=\"nx\">alternate</span> <span class=\"o\">!==</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span>\n    <span class=\"nx\">completedWork</span><span class=\"p\">.</span><span class=\"nx\">alternate</span><span class=\"p\">.</span><span class=\"nx\">child</span> <span class=\"o\">===</span> <span class=\"nx\">completedWork</span><span class=\"p\">.</span><span class=\"nx\">child</span><span class=\"p\">;</span> <span class=\"c1\">// 当前的Fiber与其alternate（备用/上一次的Fiber）有相同的子节点，则跳过更新\n</span><span class=\"c1\"></span>\n    <span class=\"kd\">let</span> <span class=\"nx\">newChildLanes</span> <span class=\"o\">=</span> <span class=\"nx\">NoLanes</span><span class=\"p\">;</span> <span class=\"c1\">// 合并后的子Fiber的lanes\n</span><span class=\"c1\"></span>    <span class=\"kd\">let</span> <span class=\"nx\">subtreeFlags</span> <span class=\"o\">=</span> <span class=\"nx\">NoFlags</span><span class=\"p\">;</span> <span class=\"c1\">// 子树的flags。\n</span><span class=\"c1\"></span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">didBailout</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 没有bailout，需要冒泡子Fiber的属性到父Fiber\n</span><span class=\"c1\"></span>        <span class=\"kd\">let</span> <span class=\"nx\">child</span> <span class=\"o\">=</span> <span class=\"nx\">completedWork</span><span class=\"p\">.</span><span class=\"nx\">child</span><span class=\"p\">;</span>\n        <span class=\"c1\">// 遍历子Fiber，并合并它们的lanes和flags\n</span><span class=\"c1\"></span>        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nx\">child</span> <span class=\"o\">!==</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"nx\">newChildLanes</span> <span class=\"o\">=</span> <span class=\"nx\">mergeLanes</span><span class=\"p\">(</span>\n            <span class=\"nx\">newChildLanes</span><span class=\"p\">,</span>\n            <span class=\"nx\">mergeLanes</span><span class=\"p\">(</span><span class=\"nx\">child</span><span class=\"p\">.</span><span class=\"nx\">lanes</span><span class=\"p\">,</span> <span class=\"nx\">child</span><span class=\"p\">.</span><span class=\"nx\">childLanes</span><span class=\"p\">),</span>\n          <span class=\"p\">);</span>\n\n          <span class=\"nx\">subtreeFlags</span> <span class=\"o\">|=</span> <span class=\"nx\">child</span><span class=\"p\">.</span><span class=\"nx\">subtreeFlags</span><span class=\"p\">;</span>\n          <span class=\"nx\">subtreeFlags</span> <span class=\"o\">|=</span> <span class=\"nx\">child</span><span class=\"p\">.</span><span class=\"nx\">flags</span><span class=\"p\">;</span>\n\n          <span class=\"nx\">child</span><span class=\"p\">.</span><span class=\"k\">return</span> <span class=\"o\">=</span> <span class=\"nx\">completedWork</span><span class=\"p\">;</span> <span class=\"c1\">// Fiber的return指向父Fiber，确保整个Fiber树的一致性\n</span><span class=\"c1\"></span>          <span class=\"nx\">child</span> <span class=\"o\">=</span> <span class=\"nx\">child</span><span class=\"p\">.</span><span class=\"nx\">sibling</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"nx\">completedWork</span><span class=\"p\">.</span><span class=\"nx\">subtreeFlags</span> <span class=\"o\">|=</span> <span class=\"nx\">subtreeFlags</span><span class=\"p\">;</span> <span class=\"c1\">// 合并所有flags（副作用）\n</span><span class=\"c1\"></span>    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 有bailout，只冒泡那些具有“静态”生命周期的flags\n</span><span class=\"c1\"></span>        <span class=\"kd\">let</span> <span class=\"nx\">child</span> <span class=\"o\">=</span> <span class=\"nx\">completedWork</span><span class=\"p\">.</span><span class=\"nx\">child</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nx\">child</span> <span class=\"o\">!==</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"nx\">newChildLanes</span> <span class=\"o\">=</span> <span class=\"nx\">mergeLanes</span><span class=\"p\">(</span>\n            <span class=\"nx\">newChildLanes</span><span class=\"p\">,</span>\n            <span class=\"nx\">mergeLanes</span><span class=\"p\">(</span><span class=\"nx\">child</span><span class=\"p\">.</span><span class=\"nx\">lanes</span><span class=\"p\">,</span> <span class=\"nx\">child</span><span class=\"p\">.</span><span class=\"nx\">childLanes</span><span class=\"p\">),</span>\n          <span class=\"p\">);</span>\n\n          <span class=\"nx\">subtreeFlags</span> <span class=\"o\">|=</span> <span class=\"nx\">child</span><span class=\"p\">.</span><span class=\"nx\">subtreeFlags</span> <span class=\"o\">&amp;</span> <span class=\"nx\">StaticMask</span><span class=\"p\">;</span> <span class=\"c1\">// 不同\n</span><span class=\"c1\"></span>          <span class=\"nx\">subtreeFlags</span> <span class=\"o\">|=</span> <span class=\"nx\">child</span><span class=\"p\">.</span><span class=\"nx\">flags</span> <span class=\"o\">&amp;</span> <span class=\"nx\">StaticMask</span><span class=\"p\">;</span> <span class=\"c1\">// 不同\n</span><span class=\"c1\"></span>\n          <span class=\"nx\">child</span><span class=\"p\">.</span><span class=\"k\">return</span> <span class=\"o\">=</span> <span class=\"nx\">completedWork</span><span class=\"p\">;</span>\n          <span class=\"nx\">child</span> <span class=\"o\">=</span> <span class=\"nx\">child</span><span class=\"p\">.</span><span class=\"nx\">sibling</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"nx\">completedWork</span><span class=\"p\">.</span><span class=\"nx\">subtreeFlags</span> <span class=\"o\">|=</span> <span class=\"nx\">subtreeFlags</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"nx\">completedWork</span><span class=\"p\">.</span><span class=\"nx\">childLanes</span> <span class=\"o\">=</span> <span class=\"nx\">newChildLanes</span><span class=\"p\">;</span> <span class=\"c1\">// 获取所有子Fiber的lanes。\n</span><span class=\"c1\"></span>    <span class=\"k\">return</span> <span class=\"nx\">didBailout</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><h3>调和阶段知识拓展</h3><p data-pid=\"A_k5Zuap\"><b>1、为什么Fiber架构更快？</b></p><p data-pid=\"cRQ8ZdE0\">在上面这段代码里，我们还可以看出来为什么Fiber架构比以前的递归DOM计算要快：<b><code>flags</code></b> 或 <b><code>subtreeFlags</code></b> 是16进制的标识，在这里进行按位或(<code>|</code>)运算后，可以记录当前节点本身和子树的副作用类型，通过这个运算结果可以减少节点的遍历，举一个简单的例子说明：</p><div class=\"highlight\"><pre><code class=\"language-text\">假设有两种标识符：\nPlacement (表示新插入的子节点)：0b001\nUpdate (表示子节点已更新)：0b010\n\nA\n├─ B (Update)\n│   └─ D (Placement)\n└─ C\n   └─ E\n\n这个例子里，计算逻辑是这样：\n1、检查到A的flags没有副作用，直接复用，但subtreeFlags有副作用，那么递归检查B和C\n2、检查到B的flags有复用，更新B，subtreeFlags也有副作用，则继续检查D\n3、检查到C的flags没有副作用，subtreeFlags也没有副作用，那么直接复用C和E\n如果节点更多，则以此类推。\n这样的计算方式可以减少递归那些没有副作用的子树或节点，所以比以前的版本全部递归的算法要高效</code></pre></div><p data-pid=\"hdn-SrQg\"><b>2、调和过程可中断</b></p><p data-pid=\"PQgcjLvW\">前面我们提到，调和过程可以被中断，现在我们就看看源码里是怎么进行中断和恢复的。首先，我们要明确可中断的能力是React并发模式（Concurrent Mode）的核心，这种能力使得React可以优先处理高优先级的更新，而推迟低优先级的更新。</p><p data-pid=\"QZmN4DOX\">可以从下面这段代码理解中断与恢复的处理逻辑：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"c1\">// packages/react-reconciler/src/ReactFiberWorkLoop.js\n</span><span class=\"c1\">// 以下只是核心逻辑的代码，不是renderRootConcurrent的完整源码\n</span><span class=\"c1\"></span><span class=\"kd\">function</span> <span class=\"nx\">renderRootConcurrent</span><span class=\"p\">(</span><span class=\"nx\">root</span>: <span class=\"kt\">FiberRoot</span><span class=\"p\">,</span> <span class=\"nx\">lanes</span>: <span class=\"kt\">Lanes</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 保存当前的执行上下文和 dispatcher\n</span><span class=\"c1\"></span>    <span class=\"kr\">const</span> <span class=\"nx\">prevExecutionContext</span> <span class=\"o\">=</span> <span class=\"nx\">executionContext</span><span class=\"p\">;</span>\n  <span class=\"nx\">executionContext</span> <span class=\"o\">|=</span> <span class=\"nx\">RenderContext</span><span class=\"p\">;</span>\n  <span class=\"kr\">const</span> <span class=\"nx\">prevDispatcher</span> <span class=\"o\">=</span> <span class=\"nx\">pushDispatcher</span><span class=\"p\">(</span><span class=\"nx\">root</span><span class=\"p\">.</span><span class=\"nx\">containerInfo</span><span class=\"p\">);</span>\n  <span class=\"kr\">const</span> <span class=\"nx\">prevCacheDispatcher</span> <span class=\"o\">=</span> <span class=\"nx\">pushCacheDispatcher</span><span class=\"p\">();</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">workInProgressRoot</span> <span class=\"o\">!==</span> <span class=\"nx\">root</span> <span class=\"o\">||</span> <span class=\"nx\">workInProgressRootRenderLanes</span> <span class=\"o\">!==</span> <span class=\"nx\">lanes</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 如果当前的工作进度树与传入的 root 或 lanes 不匹配，我们需要为新的渲染任务准备一个新的堆栈。\n</span><span class=\"c1\"></span>        <span class=\"c1\">// ……\n</span><span class=\"c1\"></span>    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// 持续的工作循环，除非中断发生，否则会一直尝试完成渲染工作\n</span><span class=\"c1\"></span>    <span class=\"nx\">outer</span>: <span class=\"kt\">do</span> <span class=\"p\">{</span>\n    <span class=\"k\">try</span> <span class=\"p\">{</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span>\n        <span class=\"nx\">workInProgressSuspendedReason</span> <span class=\"o\">!==</span> <span class=\"nx\">NotSuspended</span> <span class=\"o\">&amp;&amp;</span>\n        <span class=\"nx\">workInProgress</span> <span class=\"o\">!==</span> <span class=\"kc\">null</span>\n      <span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 如果当前的工作进度是由于某种原因而被挂起的，并且仍然有工作待处理，那么会处理它\n</span><span class=\"c1\"></span>        <span class=\"kr\">const</span> <span class=\"nx\">unitOfWork</span> <span class=\"o\">=</span> <span class=\"nx\">workInProgress</span><span class=\"p\">;</span>\n        <span class=\"kr\">const</span> <span class=\"nx\">thrownValue</span> <span class=\"o\">=</span> <span class=\"nx\">workInProgressThrownValue</span><span class=\"p\">;</span>\n\n         <span class=\"c1\">// 根据不同挂起原因，进行中断、恢复等计算\n</span><span class=\"c1\"></span>        <span class=\"nx\">resumeOrUnwind</span>: <span class=\"kt\">switch</span> <span class=\"p\">(</span><span class=\"nx\">workInProgressSuspendedReason</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"k\">case</span> <span class=\"nx\">SuspendedOnError</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// 如果工作因错误被挂起，那么工作会被中断，并从最后一个已知的稳定点继续\n</span><span class=\"c1\"></span>            <span class=\"c1\">// ……省略逻辑\n</span><span class=\"c1\"></span>            <span class=\"k\">break</span><span class=\"p\">;</span>\n          <span class=\"p\">}</span>\n          <span class=\"k\">case</span> <span class=\"nx\">SuspendedOnData</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// 工作因等待数据（通常是一个异步请求的结果）而被挂起，\n</span><span class=\"c1\"></span>            <span class=\"c1\">// ……省略逻辑\n</span><span class=\"c1\"></span>            <span class=\"k\">break</span> <span class=\"nx\">outer</span><span class=\"p\">;</span>\n          <span class=\"p\">}</span>\n         <span class=\"k\">case</span> <span class=\"nx\">SuspendedOnInstance</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n             <span class=\"c1\">// 将挂起的原因更新为SuspendedOnInstanceAndReadyToContinue并中断工作循环，标记为稍后准备好继续执行\n</span><span class=\"c1\"></span>            <span class=\"nx\">workInProgressSuspendedReason</span> <span class=\"o\">=</span> <span class=\"nx\">SuspendedOnInstanceAndReadyToContinue</span><span class=\"p\">;</span>\n            <span class=\"k\">break</span> <span class=\"nx\">outer</span><span class=\"p\">;</span>\n          <span class=\"p\">}</span>\n          <span class=\"k\">case</span> <span class=\"nx\">SuspendedAndReadyToContinue</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n             <span class=\"c1\">// 表示之前的挂起工作现在已经准备好继续执行\n</span><span class=\"c1\"></span>             <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">isThenableResolved</span><span class=\"p\">(</span><span class=\"nx\">thenable</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n              <span class=\"c1\">// 如果已解析，这意味着需要的数据现在已经可用\n</span><span class=\"c1\"></span>              <span class=\"nx\">workInProgressSuspendedReason</span> <span class=\"o\">=</span> <span class=\"nx\">NotSuspended</span><span class=\"p\">;</span>\n              <span class=\"nx\">workInProgressThrownValue</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n              <span class=\"nx\">replaySuspendedUnitOfWork</span><span class=\"p\">(</span><span class=\"nx\">unitOfWork</span><span class=\"p\">);</span> <span class=\"c1\">// 恢复执行被挂起的工作\n</span><span class=\"c1\"></span>            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n              <span class=\"nx\">workInProgressSuspendedReason</span> <span class=\"o\">=</span> <span class=\"nx\">NotSuspended</span><span class=\"p\">;</span>\n              <span class=\"nx\">workInProgressThrownValue</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n              <span class=\"nx\">throwAndUnwindWorkLoop</span><span class=\"p\">(</span><span class=\"nx\">unitOfWork</span><span class=\"p\">,</span> <span class=\"nx\">thrownValue</span><span class=\"p\">);</span> <span class=\"c1\">// 继续循环\n</span><span class=\"c1\"></span>            <span class=\"p\">}</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n          <span class=\"p\">}</span>\n         <span class=\"k\">case</span> <span class=\"nx\">SuspendedOnInstanceAndReadyToContinue</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n             <span class=\"c1\">// ……省略部分逻辑\n</span><span class=\"c1\"></span>             <span class=\"kr\">const</span> <span class=\"nx\">isReady</span> <span class=\"o\">=</span> <span class=\"nx\">preloadInstance</span><span class=\"p\">(</span><span class=\"kr\">type</span><span class=\"p\">,</span> <span class=\"nx\">props</span><span class=\"p\">);</span>\n             <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">isReady</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n              <span class=\"c1\">// 实例已经准备好\n</span><span class=\"c1\"></span>              <span class=\"nx\">workInProgressSuspendedReason</span> <span class=\"o\">=</span> <span class=\"nx\">NotSuspended</span><span class=\"p\">;</span> <span class=\"c1\">// 该fiber已完成，不需要再挂起\n</span><span class=\"c1\"></span>              <span class=\"nx\">workInProgressThrownValue</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n              <span class=\"kr\">const</span> <span class=\"nx\">sibling</span> <span class=\"o\">=</span> <span class=\"nx\">hostFiber</span><span class=\"p\">.</span><span class=\"nx\">sibling</span><span class=\"p\">;</span>\n              <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">sibling</span> <span class=\"o\">!==</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"nx\">workInProgress</span> <span class=\"o\">=</span> <span class=\"nx\">sibling</span><span class=\"p\">;</span> <span class=\"c1\">// 有兄弟节点，开始处理兄弟节点\n</span><span class=\"c1\"></span>              <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"c1\">// 没有兄弟节点，回到父节点\n</span><span class=\"c1\"></span>                <span class=\"kr\">const</span> <span class=\"nx\">returnFiber</span> <span class=\"o\">=</span> <span class=\"nx\">hostFiber</span><span class=\"p\">.</span><span class=\"k\">return</span><span class=\"p\">;</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">returnFiber</span> <span class=\"o\">!==</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                  <span class=\"nx\">workInProgress</span> <span class=\"o\">=</span> <span class=\"nx\">returnFiber</span><span class=\"p\">;</span>\n                  <span class=\"nx\">completeUnitOfWork</span><span class=\"p\">(</span><span class=\"nx\">returnFiber</span><span class=\"p\">);</span> <span class=\"c1\">// 收集副作用，前面有详细介绍\n</span><span class=\"c1\"></span>                <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                  <span class=\"nx\">workInProgress</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n              <span class=\"p\">}</span>\n              <span class=\"k\">break</span> <span class=\"nx\">resumeOrUnwind</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n         <span class=\"p\">}</span>\n         <span class=\"c1\">// 还有其它case\n</span><span class=\"c1\"></span>        <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"nx\">workLoopConcurrent</span><span class=\"p\">();</span> <span class=\"c1\">// 如果没有任何工作被挂起，那么就会继续处理工作循环。\n</span><span class=\"c1\"></span>      <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">thrownValue</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">handleThrow</span><span class=\"p\">(</span><span class=\"nx\">root</span><span class=\"p\">,</span> <span class=\"nx\">thrownValue</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span> <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// 重置了之前保存的执行上下文和dispatcher，确保后续的代码不会受到这个函数的影响\n</span><span class=\"c1\"></span>  <span class=\"nx\">resetContextDependencies</span><span class=\"p\">();</span>\n  <span class=\"nx\">popDispatcher</span><span class=\"p\">(</span><span class=\"nx\">prevDispatcher</span><span class=\"p\">);</span>\n  <span class=\"nx\">popCacheDispatcher</span><span class=\"p\">(</span><span class=\"nx\">prevCacheDispatcher</span><span class=\"p\">);</span>\n  <span class=\"nx\">executionContext</span> <span class=\"o\">=</span> <span class=\"nx\">prevExecutionContext</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// 检查调和是否已完成\n</span><span class=\"c1\"></span>  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">workInProgress</span> <span class=\"o\">!==</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 未完成\n</span><span class=\"c1\"></span>    <span class=\"k\">return</span> <span class=\"nx\">RootInProgress</span><span class=\"p\">;</span> <span class=\"c1\">// 返回一个状态值，表示还有未完成\n</span><span class=\"c1\"></span>  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 已完成\n</span><span class=\"c1\"></span>    <span class=\"nx\">workInProgressRoot</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span> <span class=\"c1\">// 重置root\n</span><span class=\"c1\"></span>    <span class=\"nx\">workInProgressRootRenderLanes</span> <span class=\"o\">=</span> <span class=\"nx\">NoLanes</span><span class=\"p\">;</span> <span class=\"c1\">// 重置Lane\n</span><span class=\"c1\"></span>    <span class=\"nx\">finishQueueingConcurrentUpdates</span><span class=\"p\">();</span> <span class=\"c1\">// 处理队列中的并发更新\n</span><span class=\"c1\"></span>    <span class=\"k\">return</span> <span class=\"nx\">workInProgressRootExitStatus</span><span class=\"p\">;</span> <span class=\"c1\">// 返回当前渲染root的最终退出状态\n</span><span class=\"c1\"></span>  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><h3>第二阶段：Commit（提交）</h3><ul><li data-pid=\"OK46zp62\"><b>目标</b>: 更新DOM并执行任何副作用。</li><li data-pid=\"84mca0r6\"><b>原理</b>: 遍历在Reconciliation阶段创建的副作用列表进行更新。</li></ul><p data-pid=\"kfdlJ0m_\">源码里 <b><code>commitRoot</code></b> 和 <b><code>commitRootImpl</code></b> 是提交阶段的入口方法，在两个方法中，可以看出来提交阶段也有三个核心小阶段，我们一一讲解：</p><h3><b>1、遍历副作用列表：<code>BeforeMutation</code></b></h3><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"c1\">// packages/react-reconciler/src/ReactFiberCommitWork.js\n</span><span class=\"c1\">// 以下只是核心逻辑的代码，不是commitBeforeMutationEffects的完整源码\n</span><span class=\"c1\"></span><span class=\"kr\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">commitBeforeMutationEffects</span><span class=\"p\">(</span>\n  <span class=\"nx\">root</span>: <span class=\"kt\">FiberRoot</span><span class=\"p\">,</span>\n  <span class=\"nx\">firstChild</span>: <span class=\"kt\">Fiber</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"kr\">boolean</span> <span class=\"p\">{</span>\n  <span class=\"nx\">nextEffect</span> <span class=\"o\">=</span> <span class=\"nx\">firstChild</span><span class=\"p\">;</span> <span class=\"c1\">// nextEffect是遍历此链表时的当前fiber\n</span><span class=\"c1\"></span>  <span class=\"nx\">commitBeforeMutationEffects_begin</span><span class=\"p\">();</span> <span class=\"c1\">// 遍历fiber，处理节点删除和确认节点在before mutation阶段是否有要处理的副作用\n</span><span class=\"c1\"></span>\n  <span class=\"kr\">const</span> <span class=\"nx\">shouldFire</span> <span class=\"o\">=</span> <span class=\"nx\">shouldFireAfterActiveInstanceBlur</span><span class=\"p\">;</span> <span class=\"c1\">// 当一个焦点元素被删除或隐藏时，它会被设置为 true\n</span><span class=\"c1\"></span>  <span class=\"nx\">shouldFireAfterActiveInstanceBlur</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n  <span class=\"nx\">focusedInstanceHandle</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n\n  <span class=\"k\">return</span> <span class=\"nx\">shouldFire</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><h3>2、正式提交：<code>CommitMutation</code></h3><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"c1\">// packages/react-reconciler/src/ReactFiberCommitWork.js\n</span><span class=\"c1\">// 以下只是核心逻辑的代码，不是commitMutationEffects的完整源码\n</span><span class=\"c1\"></span><span class=\"kr\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">commitMutationEffects</span><span class=\"p\">(</span>\n  <span class=\"nx\">root</span>: <span class=\"kt\">FiberRoot</span><span class=\"p\">,</span>\n  <span class=\"nx\">finishedWork</span>: <span class=\"kt\">Fiber</span><span class=\"p\">,</span>\n  <span class=\"nx\">committedLanes</span>: <span class=\"kt\">Lanes</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// lanes和root被设置为&#34;in progress&#34;状态，表示它们正在被处理\n</span><span class=\"c1\"></span>  <span class=\"nx\">inProgressLanes</span> <span class=\"o\">=</span> <span class=\"nx\">committedLanes</span><span class=\"p\">;</span>\n  <span class=\"nx\">inProgressRoot</span> <span class=\"o\">=</span> <span class=\"nx\">root</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// 递归遍历Fiber，更新副作用节点\n</span><span class=\"c1\"></span>  <span class=\"nx\">commitMutationEffectsOnFiber</span><span class=\"p\">(</span><span class=\"nx\">finishedWork</span><span class=\"p\">,</span> <span class=\"nx\">root</span><span class=\"p\">,</span> <span class=\"nx\">committedLanes</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// 重置进行中的lanes和root\n</span><span class=\"c1\"></span>  <span class=\"nx\">inProgressLanes</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n  <span class=\"nx\">inProgressRoot</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><h3>3、处理layout effects：<code>commitLayout</code></h3><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"c1\">// packages/react-reconciler/src/ReactFiberCommitWork.js\n</span><span class=\"c1\"></span><span class=\"kr\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">commitLayoutEffects</span><span class=\"p\">(</span>\n  <span class=\"nx\">finishedWork</span>: <span class=\"kt\">Fiber</span><span class=\"p\">,</span>\n  <span class=\"nx\">root</span>: <span class=\"kt\">FiberRoot</span><span class=\"p\">,</span>\n  <span class=\"nx\">committedLanes</span>: <span class=\"kt\">Lanes</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n  <span class=\"nx\">inProgressLanes</span> <span class=\"o\">=</span> <span class=\"nx\">committedLanes</span><span class=\"p\">;</span>\n  <span class=\"nx\">inProgressRoot</span> <span class=\"o\">=</span> <span class=\"nx\">root</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// 创建一个current指向就Fiber树的alternate\n</span><span class=\"c1\"></span>  <span class=\"kr\">const</span> <span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"nx\">finishedWork</span><span class=\"p\">.</span><span class=\"nx\">alternate</span><span class=\"p\">;</span>\n  <span class=\"c1\">// 处理那些由useLayoutEffect创建的layout effects\n</span><span class=\"c1\"></span>  <span class=\"nx\">commitLayoutEffectOnFiber</span><span class=\"p\">(</span><span class=\"nx\">root</span><span class=\"p\">,</span> <span class=\"nx\">current</span><span class=\"p\">,</span> <span class=\"nx\">finishedWork</span><span class=\"p\">,</span> <span class=\"nx\">committedLanes</span><span class=\"p\">);</span>\n\n  <span class=\"nx\">inProgressLanes</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n  <span class=\"nx\">inProgressRoot</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"M0XA-2cC\">从源码里我们可以看到，一旦进入提交阶段后，React是无法中断的。</p><h2>结语</h2><p data-pid=\"Kp1YDg1f\">以上内容虽无法覆盖Fiber的方方面面，但可以确保你学完后对Fiber会有一个整体上的认识，并且让你在以后阅读互联网上其它关于Fiber架构的文章时，不再因为基础知识困惑，而是能够根据已有的思路轻松地拓展你大脑里关于Fiber架构的知识网。</p><p data-pid=\"hhCoRdFR\">欢迎加入「 <b><a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/RXpu-Ck13zoHyLP1OOUZ-g\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">独立全栈开发交流群</a></b>」，一起学习交流前端和Node端技术</p>",
            "relationship": {
                "is_thanked": false,
                "is_nothelp": false,
                "voting": 0
            },
            "is_labeled": false,
            "visited_count": 18426,
            "thumbnails": [
                "https://picx.zhimg.com/50/v2-0d4a279ffaa0043bad3025f3c4b46759_720w.jpg?source=b6762063"
            ],
            "favorite_count": 239,
            "answer_type": "normal"
        },
        "brief": "{\"source\": \"TS\", \"type\": \"answer\", \"id\": 3316787220}",
        "attached_info": "Cr4FCISTj8z6vsSwsQEQBBoJNjMzMTMxMDEzIMzLxasGKFwwAkAMSkEKLFRTX1NPVVJDRV9UV09UT1dFUl9TSE9SVElOVEVSRVNUX1JFQ0FMTF9URVhUEgEwGAAgADoKeyJyYXciOiIifVoIMTIwMTUyNTRiIDk4MDdhMDU0YTgxNjg4YmZjNDk5MzViNDliYjU5Y2Y1cgozMzE2Nzg3MjIwigEINDk0OTY4NzKqAQlyZWNvbW1lbmTCASA2MmIwMGMyYTlmNDRhN2UyOGZjZmRkNDA1ZTdiMGE0MvIBCggMEgZOb3JtYWzyASgIChIkZjhkMzAxMWYtOTJlMy00OWUxLTg4M2QtYjcxMGU2NzE5MmFi8gEFCAsSATOCAgCIAsCk4qDpMZICIDYyYjAwYzJhOWY0NGE3ZTI4ZmNmZGQ0MDVlN2IwYTQymgIAygIbT2xkQ29udGVudFJlZHVjZTVXZWlnaHRSdWxl2gIsVFNfU09VUkNFX1RXT1RPV0VSX1NIT1JUSU5URVJFU1RfUkVDQUxMX1RFWFToAgP6AgtOT1JNQUxfRkxPV4oDIDM2MTk1ZWRmNTY0NTRiMThhMTJmODI0M2Q1MmQyYzE2mgMNCgJ2MBAAGgVvdGhlcqgD+o8B2AMA6gMgZmVlZF9zaG9ydGludGVyZXN0X3R3b3Rvd2VyX3RleHT6Ax8SDFVOS05PV05fTU9ERSAAKg1OT19JTUFHRV9NT0RFgAQAiAQAkgQGTm9ybWFsmgQBM6AEAKgEALAEALoEBm1hbnVhbMIEAzE3MMgEANIED+aOqOiNkOW3suabtOaWsNgEAPAEAPkEAAAAgPTduj+BBQAAAAAAAAAAiQX59fx8aZ+kP5IFCeS4iuWfjuWMupoFA2RmdKIFA2RmdLIFATG5BQAAAAAAAAAA0AUA4AUA6AUA8AUDkgIlCgk2MzMxMzEwMTMSCjMzMTY3ODcyMjAYBCIKSU1BR0VfVEVYVA==",
        "action_card": false
    },
    {
        "id": "13_1711881622.695",
        "type": "feed",
        "offset": 13,
        "verb": "TOPIC_ACKNOWLEDGED_ANSWER",
        "created_time": 1711881622,
        "updated_time": 1711881622,
        "target": {
            "id": 3395257211,
            "type": "answer",
            "url": "https://api.zhihu.com/answers/3395257211",
            "author": {
                "id": "692236e27649944bbb334666a6274544",
                "url": "https://api.zhihu.com/people/692236e27649944bbb334666a6274544",
                "user_type": "people",
                "url_token": "wei-wei-wei-54-12",
                "name": "蔚蔚蔚",
                "headline": "",
                "avatar_url": "https://picx.zhimg.com/50/v2-f8b68a2f9560b46be0ce2049f46ba879_l.jpg?source=b6762063",
                "is_org": false,
                "gender": -1,
                "followers_count": 1107,
                "is_following": false,
                "is_followed": false
            },
            "created_time": 1707825474,
            "updated_time": 1707825474,
            "voteup_count": 6519,
            "thanks_count": 583,
            "comment_count": 472,
            "is_copyable": true,
            "question": {
                "id": 412412967,
                "type": "question",
                "url": "https://api.zhihu.com/questions/412412967",
                "author": {
                    "id": "972f7917e7ed9f510b5a54c9e1c6a658",
                    "url": "https://api.zhihu.com/people/972f7917e7ed9f510b5a54c9e1c6a658",
                    "user_type": "people",
                    "url_token": "zheng-zheng-zheng-34-43",
                    "name": "火影鸣人",
                    "headline": "",
                    "avatar_url": "https://picx.zhimg.com/50/v2-c1a6435469833db851cd00317f74d520_l.jpg?source=b6762063",
                    "is_org": false,
                    "gender": 0,
                    "followers_count": 1,
                    "is_following": false,
                    "is_followed": false
                },
                "title": "想客观分析一下，日本为什么这么多女性主动去拍AV？",
                "created": 1596693447,
                "answer_count": 0,
                "follower_count": 0,
                "comment_count": 37,
                "bound_topic_ids": [
                    285,
                    2057,
                    4621
                ],
                "is_following": false,
                "excerpt": "",
                "relationship": {
                    "is_author": false
                },
                "detail": "",
                "question_type": "normal"
            },
            "excerpt": "前年游日韩的时候偷偷去问了一下日本友人（一家鳗鱼饭店的老板娘，还有一家带碟片租借的商超），为什么她们这么多人要拍这个，日本友人答：很大一部分是拿了钱去养牛郎了，只有极少数有自己清晰的职业规划 我说：牛郎这么受欢迎吗？！ 她说：当然啊，我也经常去的，你不知道他魅力有多大！ 给当时还是大学生的我一脸震惊，原来人本子比我们想象的要开放多了",
            "excerpt_new": "前年游日韩的时候偷偷去问了一下日本友人（一家鳗鱼饭店的老板娘，还有一家带碟片租借的商超），为什么她们这么多人要拍这个，日本友人答：很大一部分是拿了钱去养牛郎了，只有极少数有自己清晰的职业规划 我说：牛郎这么受欢迎吗？！ 她说：当然啊，我也经常去的，你不知道他魅力有多大！ 给当时还是大学生的我一脸震惊，原来人本子比我们想象的要开放多了",
            "preview_type": "default",
            "preview_text": "",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"XBm1fBVL\">前年游日韩的时候偷偷去问了一下日本友人（一家鳗鱼饭店的老板娘，还有一家带碟片租借的商超），为什么她们这么多人要拍这个，日本友人答：很大一部分是拿了钱去养牛郎了，只有极少数有自己清晰的职业规划</p><p data-pid=\"sXTut9tN\">我说：牛郎这么受欢迎吗？！</p><p data-pid=\"_rUPby8a\">她说：当然啊，我也经常去的，你不知道他魅力有多大！</p><p data-pid=\"6uJur0tK\">给当时还是大学生的我一脸震惊，原来人本子比我们想象的要开放多了</p>",
            "relationship": {
                "is_thanked": false,
                "is_nothelp": false,
                "voting": 0
            },
            "is_labeled": false,
            "visited_count": 3061411,
            "favorite_count": 544,
            "answer_type": "normal"
        },
        "brief": "{\"source\": \"TS\", \"type\": \"answer\", \"id\": 3395257211}",
        "attached_info": "CtsECISTj8z6vsSwsQEQBBoJNjQ3Mzk2MTUyIMKyra4GKPcyMNgDQA1KKAoTVFNfU09VUkNFX0ZFRURSRV9WNxIBMBgAIAA6CnsicmF3IjoiIn1aCDUzOTI0NDQ0YiA5ODA3YTA1NGE4MTY4OGJmYzQ5OTM1YjQ5YmI1OWNmNXIKMzM5NTI1NzIxMYoBCTQxMjQxMjk2N6oBCXJlY29tbWVuZMIBIDY5MjIzNmUyNzY0OTk0NGJiYjMzNDY2NmE2Mjc0NTQ08gEKCAwSBk5vcm1hbPIBKAgKEiRjOTc2NzA1Zi01NjdmLTQ0MTgtYjYxOS1iODgwZTcxNmMwYWXyAQUICxIBM4ICAIgCwKTioOkxkgIgNjkyMjM2ZTI3NjQ5OTQ0YmJiMzM0NjY2YTYyNzQ1NDSaAgDaAhNUU19TT1VSQ0VfRkVFRFJFX1Y36AIC+gILTk9STUFMX0ZMT1eKAyAzNjE5NWVkZjU2NDU0YjE4YTEyZjgyNDNkNTJkMmMxNpoDDQoCdjAQABoFb3RoZXKoA6PtugHYAwDqAwlmZWVkcmVfdjf6Ax8SDFVOS05PV05fTU9ERSAAKg1OT19JTUFHRV9NT0RFgAQAiAQAkgQGTm9ybWFsmgQBMqAEAKgEALAEALoEBm1hbnVhbMIEAzE2MMgEANIED+aOqOiNkOW3suabtOaWsNgEAPAEAPkEAAAAIDVcvz+BBQAAAAAAAAAAiQX59fx8aZ+kP5IFCeS4iuWfjuWMupoFA2RmdKIFA2RmdLIFATG5BQAAAAAAAAAA0AUA4AUA6AUA8AUDkgIlCgk2NDczOTYxNTISCjMzOTUyNTcyMTEYBCIKSU1BR0VfVEVYVA==",
        "action_card": false
    },
    {
        "id": "14_1711881622.351",
        "type": "feed",
        "offset": 14,
        "verb": "TOPIC_ACKNOWLEDGED_ANSWER",
        "created_time": 1711881622,
        "updated_time": 1711881622,
        "target": {
            "id": 2950142190,
            "type": "answer",
            "url": "https://api.zhihu.com/answers/2950142190",
            "author": {
                "id": "73ae64d4e3b313ea5385e5727d4609bb",
                "url": "https://api.zhihu.com/people/73ae64d4e3b313ea5385e5727d4609bb",
                "user_type": "organization",
                "url_token": "cpa-cfa-yan-jiu-suo",
                "name": "CPA CFA 盐究所",
                "headline": "",
                "avatar_url": "https://picx.zhimg.com/50/v2-de26c6bcff928f905b59ff69d01e16ce_l.jpg?source=b6762063",
                "is_org": true,
                "gender": -1,
                "badge": [
                    {
                        "type": "identity_org",
                        "description": "已认证账号"
                    }
                ],
                "followers_count": 23802,
                "is_following": false,
                "is_followed": false
            },
            "created_time": 1679566623,
            "updated_time": 1697456023,
            "voteup_count": 1950,
            "thanks_count": 1224,
            "comment_count": 44,
            "is_copyable": false,
            "question": {
                "id": 506121675,
                "type": "question",
                "url": "https://api.zhihu.com/questions/506121675",
                "author": {
                    "id": "2652e4feddb1d3c654702c1ce7a5831e",
                    "url": "https://api.zhihu.com/people/2652e4feddb1d3c654702c1ce7a5831e",
                    "user_type": "people",
                    "url_token": "cam-8-22",
                    "name": "kimmmmmmmmm",
                    "headline": "make it better",
                    "avatar_url": "https://pica.zhimg.com/50/v2-8c316a26c5e19b0f3a40b815c7b243bd_l.jpg?source=b6762063",
                    "is_org": false,
                    "gender": 1,
                    "followers_count": 13,
                    "is_following": false,
                    "is_followed": false
                },
                "title": "为什么身边越来越多的程序员进入量化投资领域？",
                "created": 1639530899,
                "answer_count": 0,
                "follower_count": 0,
                "comment_count": 2,
                "bound_topic_ids": [
                    707,
                    3004,
                    90588
                ],
                "is_following": false,
                "excerpt": "",
                "relationship": {
                    "is_author": false
                },
                "detail": "",
                "question_type": "normal"
            },
            "excerpt": "计算机+金融，是一条可选之路。 程序员转型入进量化机构（公募、私募以及金融机构的量化部门等），有机会，薪资待遇也不错，但要补上金融知识。 年初，答主被邀请给国内程序员讲了一堂【量化投资】的线上公开课，在线收看人数 2000+，大部分收看的程序员在 30 以上，根据问卷调查，量化已经成为程序员转型的一个重要关注方向。之前有人回答，不建议程序员跳出互联网，这两年看，打脸了，35 岁魔咒对码农更残酷。 先说结论：互联…",
            "excerpt_new": "计算机+金融，是一条可选之路。 程序员转型入进量化机构（公募、私募以及金融机构的量化部门等），有机会，薪资待遇也不错，但要补上金融知识。 年初，答主被邀请给国内程序员讲了一堂【量化投资】的线上公开课，在线收看人数 2000+，大部分收看的程序员在 30 以上，根据问卷调查，量化已经成为程序员转型的一个重要关注方向。之前有人回答，不建议程序员跳出互联网，这两年看，打脸了，35 岁魔咒对码农更残酷。 先说结论：互联…",
            "preview_type": "default",
            "preview_text": "",
            "reshipment_settings": "disallowed",
            "content": "<p><strong>计算机+金融，是一条可选之路。</strong></p>\n<p>程序员转型入进量化机构（公募、私募以及金融机构的量化部门等），有机会，薪资待遇也不错，但要补上金融知识。</p>\n<p>年初，答主被邀请给国内程序员讲了一堂【量化投资】的线上公开课，在线收看人数 2000+，大部分收看的程序员在 30 以上，根据问卷调查，量化已经成为程序员转型的一个重要关注方向。之前有人回答，不建议程序员跳出互联网，这两年看，打脸了，35 岁魔咒对码农更残酷。</p>\n<p>先说结论：互联网大厂程序员过载，金融机构码农缺人，你的人生如果可以「码农开局，金融收尾」，也是一个好选项。</p>\n<h2>一、量化机构的工作实质是金融科技，而程序员恰恰具备其中的一半能力。</h2>\n<p>狭义上的量化工作是指量化投资，而广义上的量化工作是指金融科技。如果你只把量化简单地等同于量化投资，那么，你的格局就小了。</p>\n<p>这三年，新冠疫情更加速了金融机构的数字化转型。《中国金融科技调研 2020》显示，金融各细分领域，比如银行、保险公司、大资管和金融控股公司，依托金融科技进行全方位创新与赋能已势在必行。</p>\n<p><strong>金融科技的实质更接近一个公式：计算机+金融</strong>，金融类学生面临的困难是计算机知识匮乏，程序员面临的困难是金融知识匮乏。如果你是一个成熟的程序员，其实已经具备了一半的转型能力，不需要为此焦虑。</p>\n<p>想转向量化方向，你最重要的就是需要恶补一下金融知识，要成体系去补充，不要看短视频这类碎片化的东西。这里放一个免费的系统性的金融知识资料包，之前有人问我怎么入门金融，我也都是推荐的这个速成课程。</p>\n<a data-draft-node=\"block\" data-draft-type=\"edu-card\" data-edu-card-id=\"1697319957858357248\"></a>\n<h2>二、金融科技的人才缺口巨大，薪资也有优势。</h2>\n<p>前几年，互联网 BAT 的蓬勃发展，造就了大批的程序员队伍。但在各行各业不断内卷的今天，能接得住程序员这个群体和工资的领域还真的不多。</p>\n<p>普华永道在 2019 年全球金融科技调查报告中指出，<strong>中国金融科技人才缺口高达 150 万。</strong>目前，缺口还在扩大。据四川省金融科技学会发展研究院数据，在 2020 届毕业生各类行业薪酬水平排名中，金融科技以月薪 13124 元排名第一，不仅远高于银行、证券、投资等传统金融行业，也超过计算机互联网行业。</p>\n<p>今年，根据农业银行、交通银行、浦发银行等发布的招聘需求，金融科技的人才需求尤为旺盛。其中，交通银行金融科技部门校园招聘合计多达 900 人，软件工程师岗位招聘人数多达 700 人。<strong>金融科技岗校招薪资为每月 8000 元至 1.5 万元，社招年薪在 25 万元至 70 万元之间，</strong>这个薪金完全可以接得住转岗的程序员们。</p>\n<h2>三、任何时候完成自身的转型，都是不晚的</h2>\n<p>当然，<strong>种一棵树最好的时间是十年前，其次是现在</strong>，想成功转型量化的概率，会随坚持与学习的时间呈现指数型增长。你现在开始，也不晚。</p>\n<p>「种一棵树最好的时间是十年前，其次是现在」，出自非洲经济学家 Dambisa Moyo 的《dead aid》，它是书中的结束语，简洁却发人深省。深层的意义在于，以现在的角度看，种下理想的决心应该在十年前。但以未来的角度看，现在也是＂最好的时间」。</p>\n<p><strong>程序员越年轻越值钱，金融越老越值钱。</strong>如果你成功转型为一个金融量化领域的高手，人生的下半场仍然会很精彩。</p>\n<p>中年码农的焦虑我也一样走过，但今天，做为一个过了中年的程序猿，我的一部分时间会在大学里讲讲量化投资的课程；一部分时间会帮助一些团队构建量化投资模型；一部分时间在为出版社写约稿的量化投资新书；一部分时间在网上写写原创文章。</p>\n<p>所以，未来会好起来的，中年程序猿们，如果有梦想，不要放弃。</p>\n<p>原文作者：罗勇</p>",
            "relationship": {
                "is_thanked": false,
                "is_nothelp": false,
                "voting": 0
            },
            "is_labeled": false,
            "visited_count": 890888,
            "favorite_count": 7395,
            "answer_type": "paid",
            "paid_info": {
                "type": "advertorial",
                "content": "<p><strong>计算机+金融，是一条可选之路。</strong></p>\n<p>程序员转型入进量化机构（公募、私募以及金融机构的量化部门等），有机会，薪资待遇也不错，但要补上金融知识。</p>\n<p>年初，答主被邀请给国内程序员讲了一堂【量化投资】的线上公开课，在线收看人数 2000+，大部分收看的程序员在 30 以上，根据问卷调查，量化已经成为程序员转型的一个重要关注方向。之前有人回答，不建议程序员跳出互联网，这两年看，打脸了，35 岁魔咒对码农更残酷。</p>\n<p>先说结论：互联网大厂程序员过载，金融机构码农缺人，你的人生如果可以「码农开局，金融收尾」，也是一个好选项。</p>\n<h2>一、量化机构的工作实质是金融科技，而程序员恰恰具备其中的一半能力。</h2>\n<p>狭义上的量化工作是指量化投资，而广义上的量化工作是指金融科技。如果你只把量化简单地等同于量化投资，那么，你的格局就小了。</p>\n<p>这三年，新冠疫情更加速了金融机构的数字化转型。《中国金融科技调研 2020》显示，金融各细分领域，比如银行、保险公司、大资管和金融控股公司，依托金融科技进行全方位创新与赋能已势在必行。</p>\n<p><strong>金融科技的实质更接近一个公式：计算机+金融</strong>，金融类学生面临的困难是计算机知识匮乏，程序员面临的困难是金融知识匮乏。如果你是一个成熟的程序员，其实已经具备了一半的转型能力，不需要为此焦虑。</p>\n<p>想转向量化方向，你最重要的就是需要恶补一下金融知识，要成体系去补充，不要看短视频这类碎片化的东西。这里放一个免费的系统性的金融知识资料包，之前有人问我怎么入门金融，我也都是推荐的这个速成课程。</p>\n<a data-draft-node=\"block\" data-draft-type=\"edu-card\" data-edu-card-id=\"1697319957858357248\"></a>\n<h2>二、金融科技的人才缺口巨大，薪资也有优势。</h2>\n<p>前几年，互联网 BAT 的蓬勃发展，造就了大批的程序员队伍。但在各行各业不断内卷的今天，能接得住程序员这个群体和工资的领域还真的不多。</p>\n<p>普华永道在 2019 年全球金融科技调查报告中指出，<strong>中国金融科技人才缺口高达 150 万。</strong>目前，缺口还在扩大。据四川省金融科技学会发展研究院数据，在 2020 届毕业生各类行业薪酬水平排名中，金融科技以月薪 13124 元排名第一，不仅远高于银行、证券、投资等传统金融行业，也超过计算机互联网行业。</p>\n<p>今年，根据农业银行、交通银行、浦发银行等发布的招聘需求，金融科技的人才需求尤为旺盛。其中，交通银行金融科技部门校园招聘合计多达 900 人，软件工程师岗位招聘人数多达 700 人。<strong>金融科技岗校招薪资为每月 8000 元至 1.5 万元，社招年薪在 25 万元至 70 万元之间，</strong>这个薪金完全可以接得住转岗的程序员们。</p>\n<h2>三、任何时候完成自身的转型，都是不晚的</h2>\n<p>当然，<strong>种一棵树最好的时间是十年前，其次是现在</strong>，想成功转型量化的概率，会随坚持与学习的时间呈现指数型增长。你现在开始，也不晚。</p>\n<p>「种一棵树最好的时间是十年前，其次是现在」，出自非洲经济学家 Dambisa Moyo 的《dead aid》，它是书中的结束语，简洁却发人深省。深层的意义在于，以现在的角度看，种下理想的决心应该在十年前。但以未来的角度看，现在也是＂最好的时间」。</p>\n<p><strong>程序员越年轻越值钱，金融越老越值钱。</strong>如果你成功转型为一个金融量化领域的高手，人生的下半场仍然会很精彩。</p>\n<p>中年码农的焦虑我也一样走过，但今天，做为一个过了中年的程序猿，我的一部分时间会在大学里讲讲量化投资的课程；一部分时间会帮助一些团队构建量化投资模型；一部分时间在为出版社写约稿的量化投资新书；一部分时间在网上写写原创文章。</p>\n<p>所以，未来会好起来的，中年程序猿们，如果有梦想，不要放弃。</p>\n<p>原文作者：罗勇</p>",
                "has_purchased": false
            }
        },
        "brief": "{\"source\": \"TS\", \"type\": \"answer\", \"id\": 2950142190}",
        "attached_info": "CsAFCISTj8z6vsSwsQEQBBoJNTY2NDc0MDMxIJ/O8KAGKJ4PMCxADkooCh1UU19TT1VSQ0VfRURVX1RSQUlOSU5HX0ZFRURSRRIBMBgAIAA6AFoINzQ3NTI4NzViIDk4MDdhMDU0YTgxNjg4YmZjNDk5MzViNDliYjU5Y2Y1cgoyOTUwMTQyMTkwigEJNTA2MTIxNjc1qgEJcmVjb21tZW5kwgEgNzNhZTY0ZDRlM2IzMTNlYTUzODVlNTcyN2Q0NjA5YmLyAQwIDBIIVHJhaW5pbmfyASgIChIkZDBhNzJmYzMtNWU2Ny00NzY4LTgxZDAtZmIxMTMyYTVmMTY18gEFCAsSATPyAQ4IAhIKUGFpZEFuc3dlcoICAIgCwKTioOkxkgIgNzNhZTY0ZDRlM2IzMTNlYTUzODVlNTcyN2Q0NjA5YmKaAgDKAhtPbGRDb250ZW50UmVkdWNlNVdlaWdodFJ1bGXKAg5DdXJyZW5jeVJhbmtlcsoCDnNsb3RJbnNlcnRSdWxl2gIdVFNfU09VUkNFX0VEVV9UUkFJTklOR19GRUVEUkXoAgP6AgtOT1JNQUxfRkxPV4oDIDM2MTk1ZWRmNTY0NTRiMThhMTJmODI0M2Q1MmQyYzE2mgMNCgJ2MBAAGgVvdGhlcqgDiLA22AMA6gMRZmVlZHJlX2VkdV9yZWNhbGz6Ax8SDFVOS05PV05fTU9ERSAAKg1OT19JTUFHRV9NT0RFgAQBiAQAkgQIVHJhaW5pbmeaBAEzoAQAqAQAsAQAugQGbWFudWFswgQDMTcwyAQA0gQP5o6o6I2Q5bey5pu05paw2AQA8AQA+QQA2bkVTTaaP4EFMK6p9SDsQkGJBfn1/Hxpn6Q/kgUJ5LiK5Z+O5Yy6mgUDZGZ0ogUDZGZ0sgUBMbkFfVZnIL7MqEDQBQDgBQDoBQDwBQOSAiUKCTU2NjQ3NDAzMRIKMjk1MDE0MjE5MBgEIgpJTUFHRV9URVhU",
        "action_card": false
    },
    {
        "id": "15_1711881622.501",
        "type": "feed",
        "offset": 15,
        "verb": "TOPIC_ACKNOWLEDGED_ANSWER",
        "created_time": 1711881622,
        "updated_time": 1711881622,
        "target": {
            "id": 3394838803,
            "type": "answer",
            "url": "https://api.zhihu.com/answers/3394838803",
            "author": {
                "id": "09f1f3bb8e44ebe61fdf84d2d6d4aef4",
                "url": "https://api.zhihu.com/people/09f1f3bb8e44ebe61fdf84d2d6d4aef4",
                "user_type": "people",
                "url_token": "he-wei-li-bei-fen",
                "name": "何威利备份",
                "headline": "批评和诋毁、污蔑不是一回事。",
                "avatar_url": "https://picx.zhimg.com/50/v2-62c6abe4047cb065e9d5f74634147c99_l.jpg?source=b6762063",
                "is_org": false,
                "gender": 1,
                "followers_count": 2552,
                "is_following": false,
                "is_followed": false
            },
            "created_time": 1707792253,
            "updated_time": 1707848743,
            "voteup_count": 4746,
            "thanks_count": 690,
            "comment_count": 633,
            "is_copyable": false,
            "question": {
                "id": 27463630,
                "type": "question",
                "url": "https://api.zhihu.com/questions/27463630",
                "author": {
                    "id": "912533ffe851165b841747e3f45c8e6d",
                    "url": "https://api.zhihu.com/people/912533ffe851165b841747e3f45c8e6d",
                    "user_type": "people",
                    "url_token": "YorkChen",
                    "name": "Vitalik",
                    "headline": "",
                    "avatar_url": "https://pic1.zhimg.com/50/v2-6c8310241055b1251cbbfa55d955a59b_l.jpg?source=b6762063",
                    "is_org": false,
                    "gender": 1,
                    "followers_count": 4165,
                    "is_following": false,
                    "is_followed": false
                },
                "title": "战场上有人装死吗？",
                "created": 1420674202,
                "answer_count": 0,
                "follower_count": 0,
                "comment_count": 23,
                "bound_topic_ids": [
                    285,
                    1234,
                    3115,
                    4810,
                    19593
                ],
                "is_following": false,
                "excerpt": "",
                "relationship": {
                    "is_author": false
                },
                "detail": "",
                "question_type": "normal"
            },
            "excerpt": "男的踩裆，女的踩胸。 我爸说他当兵时，老兵告诉他打扫战场时检查有没有装死的人的窍门。 装死先练好铁裆功 补充：这事是小时候听我爸讲的，细节记不清了。看了知友回复，我推测这种验尸方法是为抓俘虏，所以没有直接补枪或者插刺刀。",
            "excerpt_new": "男的踩裆，女的踩胸。 我爸说他当兵时，老兵告诉他打扫战场时检查有没有装死的人的窍门。 装死先练好铁裆功 补充：这事是小时候听我爸讲的，细节记不清了。看了知友回复，我推测这种验尸方法是为抓俘虏，所以没有直接补枪或者插刺刀。",
            "preview_type": "default",
            "preview_text": "",
            "reshipment_settings": "disallowed",
            "content": "<p data-pid=\"zzjyLuam\">男的踩裆，女的踩胸。</p><p data-pid=\"f3x4PssX\">我爸说他当兵时，老兵告诉他打扫战场时检查有没有装死的人的窍门。</p><p data-pid=\"Kqx7KwT_\">装死先练好铁裆功</p><p data-pid=\"GBAkpW-d\">补充：这事是小时候听我爸讲的，细节记不清了。看了知友回复，我推测这种验尸方法是为抓俘虏，所以没有直接补枪或者插刺刀。</p>",
            "relationship": {
                "is_thanked": false,
                "is_nothelp": false,
                "voting": 0
            },
            "is_labeled": false,
            "visited_count": 4108011,
            "favorite_count": 653,
            "answer_type": "normal"
        },
        "brief": "{\"source\": \"TS\", \"type\": \"answer\", \"id\": 3394838803}",
        "attached_info": "CpsFCISTj8z6vsSwsQEQBBoJNjQ3MzE5OTg2IP2uq64GKIolMPkEQA9KMAobVFNfU09VUkNFX0JBU0lDX0lORk9fUkVDQUxMEgEwGAAgADoKeyJyYXciOiIifUooChNUU19TT1VSQ0VfRkVFRFJFX1Y3EgEwGAAgADoKeyJyYXciOiIifVoHMzE2ODMzN2IgOTgwN2EwNTRhODE2ODhiZmM0OTkzNWI0OWJiNTljZjVyCjMzOTQ4Mzg4MDOKAQgyNzQ2MzYzMKoBCXJlY29tbWVuZMIBIDA5ZjFmM2JiOGU0NGViZTYxZmRmODRkMmQ2ZDRhZWY08gEKCAwSBk5vcm1hbPIBKAgKEiQ3NDk2NTBlYS1jNTFlLTRjYjctYWZkNC04MDRjNDEyYTk0MjbyAQUICxIBM4ICAIgCwKTioOkxkgIgMDlmMWYzYmI4ZTQ0ZWJlNjFmZGY4NGQyZDZkNGFlZjSaAgDaAhtUU19TT1VSQ0VfQkFTSUNfSU5GT19SRUNBTEzoAgL6AgtOT1JNQUxfRkxPV4oDIDM2MTk1ZWRmNTY0NTRiMThhMTJmODI0M2Q1MmQyYzE2mgMNCgJ2MBAAGgVvdGhlcqgD6936AdgDAOoDEWJhc2ljX2luZm9fcmVjYWxs+gMfEgxVTktOT1dOX01PREUgACoNTk9fSU1BR0VfTU9ERYAEAIgEAJIEBk5vcm1hbJoEATKgBACoBACwBAC6BAZtYW51YWzCBAMxNjDIBADSBA/mjqjojZDlt7Lmm7TmlrDYBADwBAD5BAAAAGDRNcA/gQUAAAAAAAAAAIkF+fX8fGmfpD+SBQnkuIrln47ljLqaBQNkZnSiBQNkZnSyBQExuQUAAAAAAAAAANAFAOAFAOgFAPAFA5ICJQoJNjQ3MzE5OTg2EgozMzk0ODM4ODAzGAQiCklNQUdFX1RFWFQ=",
        "action_card": false
    },
    {
        "id": "16_1711881622.797",
        "type": "feed",
        "offset": 16,
        "verb": "TOPIC_ACKNOWLEDGED_ANSWER",
        "created_time": 1711881622,
        "updated_time": 1711881622,
        "target": {
            "id": 3311430358,
            "type": "answer",
            "url": "https://api.zhihu.com/answers/3311430358",
            "author": {
                "id": "4a4acb51795b589030eb83de2b60c20d",
                "url": "https://api.zhihu.com/people/4a4acb51795b589030eb83de2b60c20d",
                "user_type": "people",
                "url_token": "yang-chang-lin",
                "name": "林先生",
                "headline": "真实是最佳的答案",
                "avatar_url": "https://pica.zhimg.com/50/3b071333050b9bb6dc3cf8d1ff7476de_l.jpg?source=b6762063",
                "is_org": false,
                "gender": 1,
                "followers_count": 818,
                "is_following": false,
                "is_followed": false
            },
            "created_time": 1701573909,
            "updated_time": 1701573909,
            "voteup_count": 5919,
            "thanks_count": 814,
            "comment_count": 426,
            "is_copyable": true,
            "question": {
                "id": 265795049,
                "type": "question",
                "url": "https://api.zhihu.com/questions/265795049",
                "author": {
                    "id": "b3b8f750fc4512425d0be0eabac6383b",
                    "url": "https://api.zhihu.com/people/b3b8f750fc4512425d0be0eabac6383b",
                    "user_type": "people",
                    "url_token": "hua-sheng-46-8",
                    "name": "花生",
                    "headline": "",
                    "avatar_url": "https://picx.zhimg.com/50/v2-5c28e1194e13da827903393dac1ffdac_l.jpg?source=b6762063",
                    "is_org": false,
                    "gender": -1,
                    "followers_count": 1,
                    "is_following": false,
                    "is_followed": false
                },
                "title": "为什么抖音上的姑娘都那么好看，现实中我怎么一个也见不着？",
                "created": 1516274011,
                "answer_count": 0,
                "follower_count": 0,
                "comment_count": 85,
                "bound_topic_ids": [
                    19465,
                    22839
                ],
                "is_following": false,
                "excerpt": "",
                "relationship": {
                    "is_author": false
                },
                "detail": "",
                "question_type": "normal"
            },
            "thumbnail": "https://picx.zhimg.com/50/v2-1e79a117924dd71ab284ef2ed7a9639d_720w.jpg?source=b6762063",
            "excerpt": "抖音著名网红，痞幼 看起来还不错吧，性格挺好的  线下没滤镜没美颜是这个样子的",
            "excerpt_new": "抖音著名网红，痞幼 看起来还不错吧，性格挺好的  线下没滤镜没美颜是这个样子的",
            "preview_type": "default",
            "preview_text": "",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"KDrBYA3R\">抖音著名网红，痞幼</p><p data-pid=\"T5i7hqbf\">看起来还不错吧，性格挺好的</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-0805d5b6137a5b1e60a83ba7a9d1dd43_b.jpg\" data-rawwidth=\"1176\" data-rawheight=\"2400\" data-size=\"normal\" data-original-token=\"v2-a2acfa722fd0f26e942892bbba2acf1a\" data-default-watermark-src=\"https://pic2.zhimg.com/v2-12867aa55becd84e10ab28a0ac37f0d5_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1176\" data-original=\"https://pic2.zhimg.com/v2-0805d5b6137a5b1e60a83ba7a9d1dd43_r.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-7ebe348f4808b7a659e016000163bb2c_b.jpg\" data-rawwidth=\"1176\" data-rawheight=\"2400\" data-size=\"normal\" data-original-token=\"v2-11297a7ad5d048bfb357362f25c9140c\" data-default-watermark-src=\"https://pica.zhimg.com/v2-738cc85a51d4d1ea1dc95bb520061f30_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1176\" data-original=\"https://pic1.zhimg.com/v2-7ebe348f4808b7a659e016000163bb2c_r.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"lsQ1MnWY\">线下没滤镜没美颜是这个样子的</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-3c6d4091538cf268b2d2e171c4b2c24c_b.jpg\" data-rawwidth=\"1176\" data-rawheight=\"2400\" data-size=\"normal\" data-original-token=\"v2-1749d76d50ff62225fcf282a1a158ddb\" data-default-watermark-src=\"https://pic3.zhimg.com/v2-0005b8e7736f1c0f8d4279ac717fef66_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1176\" data-original=\"https://pic3.zhimg.com/v2-3c6d4091538cf268b2d2e171c4b2c24c_r.jpg\"/></figure><p></p>",
            "relationship": {
                "is_thanked": false,
                "is_nothelp": false,
                "voting": 0
            },
            "is_labeled": false,
            "visited_count": 4279818,
            "thumbnails": [
                "https://pic1.zhimg.com/50/v2-1e79a117924dd71ab284ef2ed7a9639d_720w.jpg?source=b6762063",
                "https://picx.zhimg.com/50/v2-77cfc8ee53a0a98e545098ac717825b8_720w.jpg?source=b6762063",
                "https://picx.zhimg.com/50/v2-f5a7d777e9bd0b101620c12addae9f3b_720w.jpg?source=b6762063"
            ],
            "favorite_count": 347,
            "answer_type": "normal"
        },
        "brief": "{\"source\": \"TS\", \"type\": \"answer\", \"id\": 3311430358}",
        "attached_info": "CvgECISTj8z6vsSwsQEQBBoJNjMyMTU3MDgzIJXqr6sGKJ8uMKoDQBBKKAoTVFNfU09VUkNFX0ZFRURSRV9WNxIBMBgAIAA6CnsicmF3IjoiIn1aCDIwNzQ5OTU5YiA5ODA3YTA1NGE4MTY4OGJmYzQ5OTM1YjQ5YmI1OWNmNXIKMzMxMTQzMDM1OIoBCTI2NTc5NTA0OaoBCXJlY29tbWVuZMIBIDRhNGFjYjUxNzk1YjU4OTAzMGViODNkZTJiNjBjMjBk8gEKCAwSBk5vcm1hbPIBKAgKEiQ1Y2M0MzNhZC1mZTE2LTRkNTEtOTczZC1kNjA0Mzg2MjU1OWTyAQUICxIBM4ICAIgCwKTioOkxkgIgNGE0YWNiNTE3OTViNTg5MDMwZWI4M2RlMmI2MGMyMGSaAgDKAhtPbGRDb250ZW50UmVkdWNlNVdlaWdodFJ1bGXaAhNUU19TT1VSQ0VfRkVFRFJFX1Y36AIC+gILTk9STUFMX0ZMT1eKAyAzNjE5NWVkZjU2NDU0YjE4YTEyZjgyNDNkNTJkMmMxNpoDDQoCdjAQABoFb3RoZXKoA4qchQLYAwDqAwlmZWVkcmVfdjf6Ax8SDFVOS05PV05fTU9ERSAAKg1OT19JTUFHRV9NT0RFgAQAiAQAkgQGTm9ybWFsmgQBMqAEAKgEALAEALoEBm1hbnVhbMIEAjMwyAQA0gQP5o6o6I2Q5bey5pu05paw2AQA8AQA+QQAAADgplzAP4EFAAAAAAAAAACJBfn1/Hxpn6Q/kgUJ5LiK5Z+O5Yy6mgUDZGZ0ogUDZGZ0sgUBMbkFAAAAAAAAAADQBQDgBQDoBQDwBQOSAiUKCTYzMjE1NzA4MxIKMzMxMTQzMDM1OBgEIgpJTUFHRV9URVhU",
        "action_card": false
    },
    {
        "id": "17_1711881622.623",
        "type": "feed",
        "offset": 17,
        "verb": "TOPIC_ACKNOWLEDGED_ANSWER",
        "created_time": 1711881622,
        "updated_time": 1711881622,
        "target": {
            "id": 2886366581,
            "type": "answer",
            "url": "https://api.zhihu.com/answers/2886366581",
            "author": {
                "id": "20a6fea19ce8bd387347d31b214fd4da",
                "url": "https://api.zhihu.com/people/20a6fea19ce8bd387347d31b214fd4da",
                "user_type": "organization",
                "url_token": "hei-ma-jia-gou-shi",
                "name": "黑马线上前端",
                "headline": "黑马程序员博学谷 ✅ 关注我！分享优质前端干货！！！",
                "avatar_url": "https://pic1.zhimg.com/50/v2-6a22c1c2c24bd7acafb78a0db3e892dd_l.jpg?source=b6762063",
                "is_org": true,
                "gender": -1,
                "badge": [
                    {
                        "type": "identity_org",
                        "description": "已认证账号"
                    }
                ],
                "followers_count": 1839,
                "is_following": false,
                "is_followed": false
            },
            "created_time": 1676014834,
            "updated_time": 1676366756,
            "voteup_count": 86,
            "thanks_count": 126,
            "comment_count": 4,
            "is_copyable": true,
            "question": {
                "id": 523701242,
                "type": "question",
                "url": "https://api.zhihu.com/questions/523701242",
                "author": {
                    "id": "43d7bec520788786485d665db38d69d7",
                    "url": "https://api.zhihu.com/people/43d7bec520788786485d665db38d69d7",
                    "user_type": "people",
                    "url_token": "feng-bin-14-21",
                    "name": "伴人一雯",
                    "headline": "电信在读",
                    "avatar_url": "https://pic1.zhimg.com/50/v2-abed1a8c04700ba7d72b45195223e0ff_l.jpg?source=b6762063",
                    "is_org": false,
                    "gender": -1,
                    "followers_count": 1,
                    "is_following": false,
                    "is_followed": false
                },
                "title": "如何二十天准备前端面试？",
                "created": 1648042337,
                "answer_count": 0,
                "follower_count": 0,
                "comment_count": 0,
                "bound_topic_ids": [
                    225,
                    307,
                    622,
                    66416
                ],
                "is_following": false,
                "excerpt": "",
                "relationship": {
                    "is_author": false
                },
                "detail": "",
                "question_type": "normal"
            },
            "thumbnail": "https://picx.zhimg.com/50/v2-d0c7862629dc3b3228bc8c8a473ac4d3_720w.jpg?source=b6762063",
            "excerpt": "这些高频的vue面试题99%会被问道，不信你就先收藏，等你面试回来再背。-----------------------2.14更----------------------- 31个收藏，0赞，我也是醉了。大家高抬贵手，点个赞呀，别光顾收藏了。-----------------------2.14更----------------------- 【面试题】：【建议收藏】4500字前端面试题及答案汇总，前端八股文 关于前端Vue框架的面试题，面试官可能会问到哪些？ 【一定要收藏】32000字的前端面试题总结！！！ （建议收…",
            "excerpt_new": "这些高频的vue面试题99%会被问道，不信你就先收藏，等你面试回来再背。-----------------------2.14更----------------------- 31个收藏，0赞，我也是醉了。大家高抬贵手，点个赞呀，别光顾收藏了。-----------------------2.14更----------------------- 【面试题】：【建议收藏】4500字前端面试题及答案汇总，前端八股文 关于前端Vue框架的面试题，面试官可能会问到哪些？ 【一定要收藏】32000字的前端面试题总结！！！ （建议收…",
            "preview_type": "default",
            "preview_text": "",
            "reshipment_settings": "allowed",
            "content": "<h2><b>这些高频的vue面试题99%会被问道，不信你就先收藏，等你面试回来再背。</b></h2><p data-pid=\"XCKxkJjg\">-----------------------2.14更-----------------------</p><p data-pid=\"1QIu-dtC\"><b>31个收藏，0赞，我也是醉了。大家高抬贵手，点个赞呀，别光顾收藏了。</b></p><p data-pid=\"iR6UCNH3\">-----------------------2.14更-----------------------</p><h3>【<b>面试题</b>】<b>：</b></h3><ul><li data-pid=\"pX2j_J1Y\"><a href=\"https://zhuanlan.zhihu.com/p/594719550\" class=\"internal\">【建议收藏】4500字前端面试题及答案汇总，前端八股文</a></li><li data-pid=\"jk_DHfes\"><a href=\"https://zhuanlan.zhihu.com/p/594696769\" class=\"internal\">关于前端Vue框架的面试题，面试官可能会问到哪些？</a></li><li data-pid=\"6s6jxcSX\"><a href=\"https://zhuanlan.zhihu.com/p/594700069\" class=\"internal\">【一定要收藏】32000字的前端面试题总结！！！</a></li><li data-pid=\"tOy7rDlD\"><a href=\"https://zhuanlan.zhihu.com/p/597918516\" class=\"internal\">（建议收藏）Vue面试热点问题</a></li></ul><h2>【简历】：</h2><ul><li data-pid=\"VQq80bRO\"><a href=\"https://www.zhihu.com/question/394938577/answer/2781717044\" class=\"internal\">web前端简历个人技能该怎么写?</a></li><li data-pid=\"2j-uevaN\"><a href=\"https://www.zhihu.com/question/292454137/answer/2789844504\" class=\"internal\">前端简历中项目描述怎么写能够更加的优雅？</a></li><li data-pid=\"1f4tZnaf\"><a href=\"https://www.zhihu.com/question/21520021/answer/2841554261\" class=\"internal\">一个优秀的前端工程师简历应该是怎样的？</a></li><li data-pid=\"yqd1L6n6\"><a href=\"https://zhuanlan.zhihu.com/p/591478329\" class=\"internal\">前端简历怎么写？前端尽力模板，4个动作帮你搞定心仪Offer</a></li><li data-pid=\"IKS7xLF8\"><a href=\"https://www.zhihu.com/question/393254657/answer/2782823558\" class=\"internal\">面试前端工程师简历应该怎么写才容易通过？</a></li><li data-pid=\"e-oVd8SL\"><a href=\"https://www.zhihu.com/question/20846381/answer/2798320234\" class=\"internal\">自学 web 前端人怎么找工作？</a></li><li data-pid=\"IcFRBsy8\"><a href=\"https://www.zhihu.com/question/319340351/answer/2801128372\" class=\"internal\">自学前端简历怎么写啊？</a></li></ul><h2><b>问：Vue2包含哪些<span class=\"nolink\">生命周期函数</span></b></h2><h3><b>参考回答</b></h3><p data-pid=\"JyB-6gzP\"><b>beforeCreate</b>——实例初始化之后，组件被创建时期，这个时候的 el，data，message 都是underfined，可以加入 loading 事件；在服务器端的应用场景中，这个时候发送数据请求比较多一些；</p><p data-pid=\"MUZB1j6A\"><b>created</b>——实例创建完成后，data、methods被初始化结束 loading 事件；推荐这个时候发送请求数据，尤其是返回的数据与绑定事件有关时；</p><p data-pid=\"v8dTskTb\"><b>beforeMount</b>——挂载初始之前，完成 el 初始化，render被初次调用也可以发送数据请求；</p><p data-pid=\"J6s6FeBJ\"><b>mounted</b>——完成挂载获取 el 中 DOM 元素，进行 DOM 操作；如果返回的数据操作依赖 DOM 完成，推荐这个时候发送数据请求；</p><p data-pid=\"gXj0vC69\"><b>beofreUpdate</b>——挂载开始之前调用挂载完成之前访问现有 DOM ，比如手动移除已添加的<a href=\"https://www.zhihu.com/search?q=%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC%E5%99%A8&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2807714755%7D\" class=\"internal\">事件监听器</a>；也可以进一步修改数据；</p><p data-pid=\"1T2Bkiji\"><b>updated</b>——由于数据更改，重新渲染界面时调用可执行依赖于 DOM 的操作；</p><p data-pid=\"_233DYec\"><b>activatedkeep-alive</b> ——组件激活时调用；</p><p data-pid=\"B4-cFtao\"><b><a href=\"https://www.zhihu.com/search?q=deactivated&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2807714755%7D\" class=\"internal\">deactivated</a></b>——组件停用时调用；</p><p data-pid=\"HPhlQs2C\"><b>beforeDestroy</b>——实例销毁之前调用；清理定时器；在这一步，实例仍然完全可用；</p><p data-pid=\"wq_HE6oe\"><b>destroyed</b>——实例销毁后调有。调用后，所有东西都会被解绑，所有的事件监听器会被移动，子实例也会被销毁提示已删除；</p><p data-pid=\"q-nNqsjy\"><b>errorCaptured</b>——当捕获一个来自子孙组件的错误时被调用。收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。可返回 false 以阻止该错误继续向上传播，修改组件状态。</p><h2><b>问1：Vue组件之间的传值如何实现？</b></h2><ul><li data-pid=\"4UjqrWRG\"><b>参考回答</b><br/></li><li data-pid=\"d879zWMc\"><b>1）父组件向子组件传递数据</b><br/>在 Vue 中，可以使用 props 向子组件传递数据。<br/><b>2）子组件向父组件传递数据</b><br/>子组件主要通过事件传递数据给父组件<br/><b>3）子组件向子组件传递数据</b><br/>Vue 没有直接子对子传参的方法，建议将需要传递数据的子组件，都合并为一个组件。如果一定需要子对子传参，可以先从传到父组件，再传到子组件。<br/>为了便于开发，Vue 推出了一个状态管理工具 <b>Vuex</b>，可以很方便实现组件之间的参数传递<br/></li></ul><h2><b>问2：Vue中父组件与子组件之间的怎么传值?</b></h2><h3><b>参考回答</b></h3><p data-pid=\"jaNA6GcR\"><b>父组件传递数据给子组件(可以通过props属性来实现)：</b></p><p data-pid=\"2ZGJPp-4\">由于组件实例的作用域是孤立的。这意味着不能 (也不应该) 在子组件的模板内直接引用父组件的数据。要让子组件使用父组件的数据，我们需要通过子组件的 props 选项；</p><p data-pid=\"1fL1HjBK\">在模板中，要动态地绑定父组件的数据到子模板的 props，与绑定到任何普通的 HTML 特性相类似，就是用 v-bind。每当父组件的数据变化时，该变化也会传导给子组件：</p><p data-pid=\"NlterUBh\"><b>实现如下：</b></p><p data-pid=\"B8yAOh10\">父组件：data(){ return { msg: [1,2,3] }; }</p><p data-pid=\"0pRjwVYV\">子组件：通过props来接收数据</p><p data-pid=\"CW_SVGIW\"><b>方式1：</b></p><div class=\"highlight\"><pre><code class=\"language-text\">props: [&#39;childMsg&#39;]</code></pre></div><p data-pid=\"XUvyI8oQ\"><b>方式2：</b></p><div class=\"highlight\"><pre><code class=\"language-text\">props: { childMsg: Array //这样可以指定传入的类型，如果类型不对，会警告 }\n</code></pre></div><p data-pid=\"eejIVuTf\"><b>方式3：</b></p><div class=\"highlight\"><pre><code class=\"language-text\">props: { childMsg: { type: Array, default: [0,0,0] //这样可以指定默认的值 } }\n</code></pre></div><p data-pid=\"LB_liTN4\">这样呢，就实现了父组件向子组件传递数据</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-675dc4dd8fd467fb0329bb79cc8df8f1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"653\" data-rawheight=\"594\" data-original-token=\"v2-675dc4dd8fd467fb0329bb79cc8df8f1\" data-default-watermark-src=\"https://pic2.zhimg.com/v2-6ee11f2c02e0dd80b8c51c8075954cbb_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"653\" data-original=\"https://pic2.zhimg.com/v2-675dc4dd8fd467fb0329bb79cc8df8f1_r.jpg\"/></figure><h2><b>问3：Vue中子组件怎么向父组件传值?</b></h2><h3><b>参考回答</b></h3><p data-pid=\"CTLx3Hwj\"><b>子组件与父组件通信：</b></p><p data-pid=\"VHHNTptO\">由于prop是单向数据传递的，为了防止子组件无意修改了父组件的状态，所以子组件想要给父组件传递数据，Vue是不允许的，这时候我们可以通过触发事件来通知父组件改变数据，从而达到改变子组件数据的目的。</p><p data-pid=\"aBUF8ZWb\"><b>子组件：</b></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">methods</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">up</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">$emit</span><span class=\"p\">(</span><span class=\"s1\">&#39;upup&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;hehe&#39;</span><span class=\"p\">);</span> <span class=\"c1\">//主动触发upup方法，&#39;hehe&#39;为向父组件传递的数据 } }\n</span></code></pre></div><p data-pid=\"Cs2fFyIt\"><b>父组件：</b></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">//监听子组件触发的upup事件,然后调用change方法\n</span><span class=\"c1\"></span><span class=\"nx\">methods</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">change</span><span class=\"p\">(</span><span class=\"nx\">msg</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">msg</span> <span class=\"o\">=</span> <span class=\"nx\">msg</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"p\">}</span>\n</code></pre></div><h2><b>问4：你了解Vue中的状态管理吗？</b></h2><h3><b>参考回答</b></h3><p data-pid=\"rIB4oO50\"><b>Vuex可以实现Vue中的数据状态管理。</b></p><h2><b>Vuex是基于Vue框架的一个<a href=\"https://www.zhihu.com/search?q=%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E5%BA%93&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2807714755%7D\" class=\"internal\">状态管理库</a>。可以管理复杂应用的数据状态，比如兄弟组件的通信、多层嵌套的组件的传值等等。</b></h2><p data-pid=\"WXGa9dVC\"><b>Vuex流程理解：</b></p><p data-pid=\"nYII40jE\">Vuex中包括的对象有：state、<a href=\"https://www.zhihu.com/search?q=mutations&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2807714755%7D\" class=\"internal\">mutations</a>、actions、getters和modules。</p><p data-pid=\"BrI_KYYc\">在Vuex流程中涉及到的对象：Components、Actions、Mutations和State。</p><p data-pid=\"F8NPmBGl\"><b>实现过程：</b></p><p data-pid=\"kvo8r5lX\">用户在component中通过操作dispatch触发了一个action，action就会commit一个mutation函数，从而mutate一个新的state，Vuex就会将新的state渲染（render）到component中，从而让界面更新。</p><h2><b>问5：Vuex是做什么的？</b></h2><h3><b>参考回答</b></h3><p data-pid=\"9uUNQC1e\"><b>Vuex是基于Vue框架的一个状态管理库。可以管理复杂应用的数据状态，比如兄弟组件的通信、多层嵌套的组件的传值等等。 Vuex有这么几个核心概念——State、Getter、Mutation、Action、Module。</b></p><h2><b>问6：Vuex有几种属性？</b></h2><p data-pid=\"2VpKNNFA\">state =&gt; 基本数据</p><p data-pid=\"t6q32DuL\">getters =&gt; 从基本数据派生的数据</p><p data-pid=\"AZbem6hI\">mutations =&gt; 提交更改数据的方法，同步</p><p data-pid=\"uc5a7N4V\">actions =&gt; 像一个装饰器，包裹mutations，使之可以异步</p><p data-pid=\"W8jf34ml\">modules =&gt; 模块化Vuex</p><h2><b>问7：不用Vuex会带来什么问题？</b></h2><h3><b>参考回答</b></h3><p data-pid=\"BXPSiJgH\">与数据存储不同，Vuex 解决的主要问题是<b>不同组件间的通信</b>，以达到对当前页面数据状态的管理。</p><p data-pid=\"Bmgbira5\">既然是状态，它不会是持久化的，在页面刷新或关闭后，数据自动丢失。</p><p data-pid=\"vVnMHh_5\">如果组件比较少，完全可以不用 Vuex。而且，目前有很多基于 Vuex 的插件，结合 localStorage、sessionStorage、IndexDB 等，可以达到数据持久化的目的。</p><h2><b>问：Vuex是什么？它实现数据状态改变的思路是什么？</b></h2><h3><b>1.问题分析</b></h3><p data-pid=\"gZ4HcDXH\">本题考察求职者对于Vuex的理解与掌握情况，Vuex 是Vue的学习与开发中的一个难点，很多学生只闻其名而不知其意。回答本问题需要解释什么是Vuex，以及Vuex的状态管理流程。</p><h3><b>2.核心问题讲解</b></h3><p data-pid=\"dVXKW4Jp\"><b>（1）什么是Vuex ：</b></p><p data-pid=\"pT9qdcVl\">Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。Vuex 也集成到 Vue 的官方调试工具 devtools extension，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。</p><p data-pid=\"4gowH9qm\"><b>（2）Vuex的属性方法有哪些？每个阶段是干嘛的？</b></p><p data-pid=\"lYsWqfPC\">答：State、mutations、getters、actions、 modules</p><p data-pid=\"lTxqKWly\"><b>A）Store</b></p><p data-pid=\"J36tG_rw\">表示对Vuex对象的全局引用。组件通过Store来访问Vuex对象中的State</p><p data-pid=\"_CtWifeO\"><b>B）State</b></p><p data-pid=\"23dEY4aV\">Vuex对象的状态，即其所拥有的数据</p><p data-pid=\"NZ-l_T5f\"><b>C）Getter</b></p><p data-pid=\"pqoEboAW\">相当于Store的计算属性。因为就像计算属性一样，Getter的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。下面会说到具体的使用场景。</p><p data-pid=\"800FnrBs\"><b>D）Mutation</b></p><p data-pid=\"x_x4tEOl\">定义了对State中数据的修改操作。组件使用State中的数据时并不能直接对数据进行修改操作，需要调用Mutation定义的操作来实现对数据的修改。这也是Vuex定义中所说的用相应的规则来让数据发生变化的具体实现。</p><p data-pid=\"O7tbHXlV\"><b>E）Action</b></p><p data-pid=\"jEleXBFm\">Mutation中定义的操作只能执行同步操作，Vuex中的异步操作在Action中进行，Action最终通过调用Mutation的操作来更新数据。</p><p data-pid=\"GgGaLCUx\"><b>F）Module</b></p><p data-pid=\"k7JwBcHK\">Store和State之间的一层，便于大型项目管理，Store包含多个Module，Module包含State、Mutation和Action。</p><h3><b>3.问题扩展</b></h3><p data-pid=\"IIIXJf0u\"><b>Vue除了这个Vuex是实现组件之间的数据传递还能使用什么方法实现组件之间的数据传递？</b></p><p data-pid=\"ve96MOoH\">父子组件的话还可使用以下两种方式：</p><ul><li data-pid=\"nQcMN9rh\">父传子props在子组件进行接收</li><li data-pid=\"1wUTpBjs\">子传父亲：在子组件中用$emit()进行数据传递</li></ul><h3><b>4.结合项目使用</b></h3><ul><li data-pid=\"zGLYdUtg\">对于Vue项目中需要大批量处理数据的时候，可以使用Vuex，例如：购物车</li><li data-pid=\"T794vXer\">如果Vue项目组件之间共享的数据很多，那么就可以使用Vuex</li></ul><h2><b>问：如何在vue里添加音频？</b></h2><p data-pid=\"1-hxcLb1\"><b>方法1：将音频文件放置在static目录中，然后进行调用</b></p><p data-pid=\"x16Z7k0L\">实现如下：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"o\">&lt;</span><span class=\"nx\">audio</span> <span class=\"kr\">class</span><span class=\"o\">=</span><span class=\"s2\">&#34;success&#34;</span>\n    <span class=\"nx\">src</span><span class=\"o\">=</span><span class=\"s2\">&#34;/static/audios/do_wrong.mp3&#34;</span><span class=\"o\">&gt;</span>\n<span class=\"nx\">audio</span><span class=\"o\">&gt;</span>\n</code></pre></div><p data-pid=\"8qo-SclH\"><b>方法2：给项目配置mp3格式的解析器</b></p><p data-pid=\"ugIH1xqh\">1）在webpack.base.conf.js中添加加载器，如下：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"p\">{</span>\n   <span class=\"nx\">test</span><span class=\"o\">:</span> <span class=\"sr\">/\\.(mp3)(\\?.*)?$/</span><span class=\"p\">,</span>\n   <span class=\"nx\">loader</span><span class=\"o\">:</span> <span class=\"s1\">&#39;url-loader&#39;</span><span class=\"p\">,</span>\n   <span class=\"nx\">options</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"nx\">utils</span><span class=\"p\">.</span><span class=\"nx\">assetsPath</span><span class=\"p\">(</span><span class=\"s1\">&#39;assets/[name].[hash:7].[ext]&#39;</span><span class=\"p\">)</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><h2><b>问：MVC 与 MVVM 的区别是什么？</b></h2><h3><b>1.问题分析</b></h3><p data-pid=\"HwRTdA1U\">在MVVM的框架下视图和模型是不能直接通信的。它们通过ViewModel来通信，ViewModel通常要实现一个observer观察者，当数据发生变化，ViewModel能够监听到数据的这种变化，然后通知到对应的视图做自动更新，而当用户操作视图，ViewModel也能监听到视图的变化，然后通知数据做改动，这实际上就实现了数据的双向绑定。并且，MVVM中的View 和 ViewModel可以互相通信。</p><h3><b>2.核心问题讲解</b></h3><ul><li data-pid=\"aALcwOKX\">MVC是Model-View-Controller的简写。即模型-视图-控制器。</li><li data-pid=\"7-B1MWBp\">M和V指的意思和MVVM中的M和V意思一样。</li><li data-pid=\"qoXYAsrr\">C即Controller指的是页面业务逻辑。</li><li data-pid=\"cJ_mDJIs\">使用MVC的目的就是将M和V的代码分离。</li><li data-pid=\"AHY-v0Of\">MVC是单向通信。也就是View跟Model，必须通过Controller来承上启下。</li><li data-pid=\"ow2WX4zG\">MVC和MVVM的区别并不是VM完全取代了C，ViewModel存在目的在于抽离Controller中展示的业务逻辑，而不是替代Controller，其它视图操作业务等还是应该放在Controller中实现。也就是说MVVM实现的是业务<a href=\"https://www.zhihu.com/search?q=%E9%80%BB%E8%BE%91%E7%BB%84%E4%BB%B6&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2807714755%7D\" class=\"internal\">逻辑组件</a>的重用。</li></ul><p data-pid=\"VfOAATtZ\">由于MVC出现的时间比较早，前端并不那么成熟，很多业务逻辑也是在后端实现，所以前端并没有真正意义上的MVC模式。而我们今天再次提起MVC，是因为大前端的到来，出现了MVVM模式的框架，我们需要了解一下MVVM这种设计模式是如何一步步演变过来的。</p><h3><b>3.问题扩展</b></h3><p data-pid=\"S8s0etgN\"><b>为什么会用</b> MVVM<b>框架？</b></p><p data-pid=\"ZuFOU2Q2\">在过去的10年中，我们已经把很多传统的<a href=\"https://www.zhihu.com/search?q=%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%BB%A3%E7%A0%81&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2807714755%7D\" class=\"internal\">服务端代码</a>放到了浏览器中，这样就产生了成千上万行的javascript代码，它们连接了各式各样的HTML 和CSS文件，但缺乏正规的组织形式，这也就是为什么越来越多的开发者使用javascript框架。比如：angular、react、vue。</p><p data-pid=\"4kv8iy7r\">浏览器的兼容性问题已经不再是前端的阻碍。前端的项目越来越大，项目的可维护性和扩展性、安全性等成了主要问题。当年为了解决浏览器兼容性问题，出现了很多类库，其中最典型的就是jquery。但是这类库没有实现对业务逻辑的分层，所以维护性和扩展性极差。</p><p data-pid=\"J6LfL97z\">综上两方面原因，才有了MVVM模式一类框架的出现。比如vue，通过数据的双向绑定，极大了提高了开发效率。</p><h3><b>4.结合项目使用</b></h3><p data-pid=\"qhxIExfS\"><b>Vue就是基于MVVM模式实现的一套框架，在vue中：</b></p><ul><li data-pid=\"e2qHjgDH\">Model指的是js中的数据，如对象，数组等等。</li><li data-pid=\"u3M7DUCP\">View指的是页面视图</li><li data-pid=\"03EdgimC\">viewModel指的是vue实例化对象</li></ul><h2><b>问：Vue项目中代理配置</b></h2><h3><b>1.问题分析</b></h3><p data-pid=\"NL7TSrhV\">在Vue 类的项目开发中，项目结构基本都是类似于 Vue-cli 生成的方式，这种方式开发中，最常用到的模式是开启代理进行 mock 调试或远程调试，也就是使用了 Vue-cli 设置的配置 proxyTable 或者直接使用 Webpack-dev-server提供的 proxy 选项。它是采用了 http-proxy 库，具体配置可通过这个链接查看：</p><p data-pid=\"AJv3_d1C\"><b><a href=\"https://link.zhihu.com/?target=https%3A//tlias3.boxuegu.com/login/doSuccess%23options\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">https://github.com/nodejitsu/node-http-proxy#options</a></b></p><p data-pid=\"-TKelUCL\">利用配置的这些参数我们可以做更为灵活的配置，达到更好的效果。</p><h3><b>2.核心问题讲解</b></h3><p data-pid=\"2DCUrjTh\"><b>Vue项目代理配置的具体方式如下：</b></p><p data-pid=\"bUzsRb__\"><b>（1）<a href=\"https://www.zhihu.com/search?q=vue-cli&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2807714755%7D\" class=\"internal\">vue-cli</a>中proxyTable配置接口地址代理示例</b></p><p data-pid=\"OcMhqFEc\">修改 config/index.js</p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/v2-98c762b11aa87504a120d778ab163095_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"920\" data-rawheight=\"647\" data-original-token=\"v2-98c762b11aa87504a120d778ab163095\" class=\"origin_image zh-lightbox-thumb\" width=\"920\" data-original=\"https://picx.zhimg.com/v2-98c762b11aa87504a120d778ab163095_r.jpg\"/></figure><p data-pid=\"Rd-Lv64K\"><b>2）Webpack-dev-server的proxy用法</b></p><p data-pid=\"USXAo04o\">webpack.config.js中配置</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-442dad5b73de42f8bdf1a4e8a103897d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"778\" data-rawheight=\"337\" data-original-token=\"v2-442dad5b73de42f8bdf1a4e8a103897d\" class=\"origin_image zh-lightbox-thumb\" width=\"778\" data-original=\"https://pic2.zhimg.com/v2-442dad5b73de42f8bdf1a4e8a103897d_r.jpg\"/></figure><p data-pid=\"txQ79E8x\">配置后，请求到 /api/xxx 会被代理到请求 http://localhost:3000/api/xxx, 例如 /api/user 现在会被代理到请求 http://localhost:3000/api/user。</p><h3><b>3.问题扩展</b></h3><p data-pid=\"yXxjY2hA\"><b>webpack.config.js中配置扩展</b></p><p data-pid=\"K9nBDa00\">1）如果想将多个特定路径代理到同一目标（target），则可以使用一个或多个带有 context 属性的对象的数组</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-80a3ca16288e127c73494a6afe080293_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"613\" data-rawheight=\"258\" data-original-token=\"v2-80a3ca16288e127c73494a6afe080293\" class=\"origin_image zh-lightbox-thumb\" width=\"613\" data-original=\"https://pic2.zhimg.com/v2-80a3ca16288e127c73494a6afe080293_r.jpg\"/></figure><p data-pid=\"Ir_D8ebj\">2）如果你不想始终传递 /api ，则需要重写路径：</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-4ac17a93298e82a8aeb6e60cc675fd03_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"653\" data-rawheight=\"282\" data-original-token=\"v2-4ac17a93298e82a8aeb6e60cc675fd03\" class=\"origin_image zh-lightbox-thumb\" width=\"653\" data-original=\"https://pic4.zhimg.com/v2-4ac17a93298e82a8aeb6e60cc675fd03_r.jpg\"/></figure><p data-pid=\"cDphszi1\">这样一来，请求 /api/xxx 就会被代理到请求 http://localhost:3000/xxx，例如 /api/user 现在会被代理到请求 http://localhost:3000/user。</p><p data-pid=\"CP5BQPxj\">3）默认情况下是不接受运行在 HTTPS 上，且使用了无效证书的后端服务器的。如果你想要接受，只要设置 secure: false 就行。修改配置如下：</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-94358ff186043937c71dae99508863a0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"710\" data-rawheight=\"280\" data-original-token=\"v2-94358ff186043937c71dae99508863a0\" class=\"origin_image zh-lightbox-thumb\" width=\"710\" data-original=\"https://pic1.zhimg.com/v2-94358ff186043937c71dae99508863a0_r.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"R8Vsv94D\">4）有时你不想代理所有的请求。可以基于一个函数的返回值绕过代理。</p><p data-pid=\"HlgvggRT\">在函数中你可以访问请求体、响应体和代理选项。必须返回 false 或路径，来跳过代理请求。</p><p data-pid=\"oJ_sFfZk\">例如：对于浏览器请求，你想要提供一个 HTML 页面，但是对于 API 请求则保持代理。你可以这样做：</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-143bc52f4217ab597316377329e4ad14_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"708\" data-rawheight=\"307\" data-original-token=\"v2-143bc52f4217ab597316377329e4ad14\" class=\"origin_image zh-lightbox-thumb\" width=\"708\" data-original=\"https://pic3.zhimg.com/v2-143bc52f4217ab597316377329e4ad14_r.jpg\"/></figure><p data-pid=\"6ZG85_mS\">5）解决<a href=\"https://www.zhihu.com/search?q=%E8%B7%A8%E5%9F%9F%E5%8E%9F%E7%90%86&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2807714755%7D\" class=\"internal\">跨域原理</a></p><p data-pid=\"gaVyc6p7\">上面的参数列表中有一个changeOrigin参数, 是一个布尔值, 设置为true, 本地就会虚拟一个服务器接收你的请求并代你发送该请求。</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-6c21cc180688f14f1fe8a8c55ea24073_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"684\" data-rawheight=\"276\" data-original-token=\"v2-6c21cc180688f14f1fe8a8c55ea24073\" class=\"origin_image zh-lightbox-thumb\" width=\"684\" data-original=\"https://pic2.zhimg.com/v2-6c21cc180688f14f1fe8a8c55ea24073_r.jpg\"/></figure><h3><b>4.结合项目使用</b></h3><ol><li data-pid=\"0MdQVlBI\">本地开发，数据使用本地的 mock Server<br/></li><li data-pid=\"nt_WJ5Yy\">涉及权限接口使用本地 mock 数据，其他全部使用指定的一台远程机器<br/></li><li data-pid=\"Pm5zzk4i\">涉及权限接口使用本地 mock 数据，其他数据分接口使用不同的远程机器<br/></li><li data-pid=\"RMUmZ2nW\">所有接口使用同一台远程机器<br/></li></ol><h2><b>问1：怎么定义Vue-router的<a href=\"https://www.zhihu.com/search?q=%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2807714755%7D\" class=\"internal\">动态路由</a>？怎么获取传过来的动态参数？</b></h2><h3><b>参考回答</b></h3><p data-pid=\"rhr36jeC\"><b>如何定义？</b></p><p data-pid=\"zCi9VnKJ\">例：在router目录下的index.js文件中，对path属性加上/:id。</p><p data-pid=\"4Thc-AAb\"><b>如何获取？</b> 例：使用router对象的params.id</p><h2><b>问2：Vue-router实现原理？</b></h2><h3><b>参考回答</b></h3><p data-pid=\"2UTAocvq\"><span class=\"nolink\">前端路由</span>是直接找到与地址匹配的一个组件或对象并将其渲染出来。</p><p data-pid=\"eK2EmTUc\">改变浏览器地址而不向服务器发出请求有<b>两种</b>方式：</p><p data-pid=\"xVGvGcRx\">1）在地址中加入#以欺骗浏览器，地址的改变是因为正在进行页内导航</p><p data-pid=\"cG9JbL-W\">2）使用H5的window.history功能，使用URL的Hash来模拟一个完整的URL</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-6619bdb3974f2c18543ef34b2426d49a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"653\" data-rawheight=\"594\" data-original-token=\"v2-6619bdb3974f2c18543ef34b2426d49a\" data-default-watermark-src=\"https://pic3.zhimg.com/v2-c54d8392d2bebeebc56e60d419a77f4e_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"653\" data-original=\"https://pic1.zhimg.com/v2-6619bdb3974f2c18543ef34b2426d49a_r.jpg\"/></figure><h2><b>问3：Vue-router有哪几种导航钩子？</b></h2><h3><b>参考回答</b></h3><p data-pid=\"wpV53cnS\">有多种方式可以在路由导航发生时执行钩子：</p><p data-pid=\"3UxwNcH4\">1）全局的</p><p data-pid=\"cZlpkS_W\">2）单个路由独享的</p><p data-pid=\"YtX97j8q\">3）组件级的</p><p data-pid=\"y0plx6Pc\">每个钩子方法接收三个参数：</p><p data-pid=\"09vDTH_f\">1）to: Route: 即将要进入的目标 路由对象</p><p data-pid=\"7WE38LAz\">2）from: Route: 当前导航正要离开的路由</p><p data-pid=\"hXvgLSSt\">3）next: Function: 一定要调用该方法来 resolve 这个钩子。执行效果依赖 next 方法的调用参数。</p><h2><b>问4：Vue中路由之间的跳转如何实现？</b></h2><h3><b>参考回答</b></h3><p data-pid=\"gZuEWpLm\">实现跳转最简单的方法：router-link</p><h2><b>问1：vue有哪些优点？</b></h2><h3><b>参考回答</b></h3><p data-pid=\"hIXZzJCi\"><b>Vue综合了angualr和react的优点，是国人写的框架，易上手，轻量级，受到广泛的应用。</b></p><ul><li data-pid=\"3Ydtzz_w\">Vue.js是一个轻巧、高性能、可组件化的MVVM库，同时拥有非常容易上手的API。</li><li data-pid=\"uqToQV8v\">Vue.js是一个构建数据驱动的 web 界面的渐进式框架。</li><li data-pid=\"aLPgUyl6\">Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。核心是一个响应的数据绑定系统。</li><li data-pid=\"ntnNWovG\">Vue两大特点：响应式编程、组件化。</li><li data-pid=\"SPomI3xN\">Vue的优势：轻量级框架、简单易学、双向数据绑定、组件化、视图、数据和结构的分离、虚拟DOM、运行速度快。</li></ul><h2><b>问2：Vue中组件是怎么使用的？</b></h2><h3><b>参考回答</b></h3><p data-pid=\"4IFkymXU\">组件 (Component) 是 Vue.js 最强大的功能之一，使用组件化方式开发，可以封装可重用的代码，减少重复劳动。</p><h2><b>问3：Vue如何实现按需加载配合webpack设置</b></h2><h3><b>参考回答</b></h3><p data-pid=\"VC0RL2qX\">webpack中提供了require.ensure()来实现按需加载。以前引入路由是通过import 这样的方式引入，改为const定义的方式进行引入。</p><p data-pid=\"5qvGpuYE\"><b>不进行页面按需加载引入方式：</b>import home from &#39;../../common/home.vue&#39;</p><p data-pid=\"bX5KhKIf\"><b>进行页面按需加载的引入方式：</b>const home = r =&gt; require.ensure( [], () =&gt; r(require(&#39;../../common/home.vue&#39;)))</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-6619bdb3974f2c18543ef34b2426d49a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"653\" data-rawheight=\"594\" data-original-token=\"v2-6619bdb3974f2c18543ef34b2426d49a\" data-default-watermark-src=\"https://pic3.zhimg.com/v2-c54d8392d2bebeebc56e60d419a77f4e_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"653\" data-original=\"https://pic1.zhimg.com/v2-6619bdb3974f2c18543ef34b2426d49a_r.jpg\"/></figure><h2><b>问4：Vue里如何给元素绑定事件？</b></h2><h3><b>参考回答</b></h3><p data-pid=\"e4ZCkINM\">用v-on指令来绑定事件，冒号后面的click所代表的便是点击事件了。</p><h2><b>问5：Vue能不能跟后台做交互？</b></h2><h3><b>参考回答</b></h3><p data-pid=\"8NRx_fqT\">能，可以用<b>resource</b> 和 <b>axios</b>。</p><p data-pid=\"yCNpi5Kh\">vue-resource是一个通过XMLHttpRequrest或JSONP技术实现异步加载服务端数据的Vue插件，提供了一般的 HTTP请求接口和RESTful架构请求接口，并且提供了全局方法和VUe组件实例方法。</p><p data-pid=\"XrJxRuHv\">使用的版本是：vue-resource 0.7.2</p><h2><b>问题6：v-model是什么？怎么使用？</b></h2><h3><b>参考回答</b></h3><p data-pid=\"wSpoASvr\"><b>v-model用于表单数据的双向绑定</b>，其实它就是一个语法糖，这个背后就做了两个操作：</p><p data-pid=\"9zhjla7z\">1）v-bind绑定一个value属性</p><p data-pid=\"2xwFUt4m\">2）v-on指令给当前元素绑定input事件</p><p data-pid=\"YVLMSaMJ\">自定义组件使用v-model，应该有以下操作：</p><p data-pid=\"4mHylJ8c\">1）接收一个value prop</p><p data-pid=\"2Ade0xZV\">2）触发input事件，并传入新值</p><h2><b>问题7：Vuex的Getter特性了解过吗？有什么作用？</b></h2><h3><b>参考回答</b></h3><p data-pid=\"D5FNwwfW\">getter用来获取数据，mapgetter经常在计算属性中被使用。</p><hr/><h3><b>【前端行业发展</b>】<b>：</b></h3><ul><li data-pid=\"1XEovkSL\"><a href=\"https://www.zhihu.com/question/27765838/answer/2762796329\" class=\"internal\">Web 前端分为哪几个大方向，工资待遇如何，辛苦吗？</a></li><li data-pid=\"TpCBBuYL\"><a href=\"https://www.zhihu.com/question/558400734/answer/2781228615\" class=\"internal\">找前端工作会不会很难？</a></li><li data-pid=\"gz9zrkK-\"><a href=\"https://www.zhihu.com/question/328278544/answer/2784253201\" class=\"internal\">现在web前端的工资怎样？</a></li><li data-pid=\"4KidQ6WG\"><a href=\"https://www.zhihu.com/question/429897108/answer/2789755334\" class=\"internal\">前端开发就业情况如何？</a></li></ul><h3>【<b>前端工作内容</b>】<b>：</b></h3><ul><li data-pid=\"3mLsU3J_\"><a href=\"https://www.zhihu.com/question/20672284/answer/2791396252\" class=\"internal\">前端工程师主要工作内容是什么？</a></li><li data-pid=\"1Iiz_OXn\"><a href=\"https://www.zhihu.com/question/21037297/answer/2731357794\" class=\"internal\">前端开发是做什么的？工作职责有哪些？</a></li></ul><h3>【<b>前端学习路线</b>】<b>：</b></h3><ul><li data-pid=\"qa_Djh3I\"><a href=\"https://www.zhihu.com/question/30180100/answer/2794360654\" class=\"internal\">怎么学习前端开发？求推荐学习路线？</a></li></ul><h3>【<b>HTML教程</b>】<b>：</b></h3><ul><li data-pid=\"5TPBmh4l\"><a href=\"https://zhuanlan.zhihu.com/p/588387711\" class=\"internal\">HTML5入门教程（含新特性），从入门到精通</a></li><li data-pid=\"d20oCr-i\"><a href=\"https://zhuanlan.zhihu.com/p/587630913\" class=\"internal\">HTML图文教程（表单域/文本框与密码框/单选按钮与复选框）</a></li><li data-pid=\"YO-vi3Vd\"><a href=\"https://zhuanlan.zhihu.com/p/587640313\" class=\"internal\">HTML图文教程（选按钮与复选框/input标签/提交按钮与重置按钮）</a></li><li data-pid=\"6QlkULXU\"><a href=\"https://zhuanlan.zhihu.com/p/587738201\" class=\"internal\">HTML图文教程（通按钮/文件域/label/下拉表单）</a></li><li data-pid=\"alPBY2zA\"><a href=\"https://zhuanlan.zhihu.com/p/593308667\" class=\"internal\">HTML零基础入门教程， 零基础学习HTML网页制作（HTML基本结构）</a></li><li data-pid=\"faGU99xF\"><a href=\"https://zhuanlan.zhihu.com/p/593352014\" class=\"internal\">HTML零基础入门教程， 零基础学习HTML网页制作（HTML 标签）</a></li></ul><h3><b>【JavaScript教程】：</b></h3><ul><li data-pid=\"jnHduJse\"><a href=\"https://www.zhihu.com/question/19813265/answer/2828958287\" class=\"internal\">JavaScript 是什么？</a></li><li data-pid=\"1rs75mGg\"><a href=\"https://zhuanlan.zhihu.com/p/596554683\" class=\"internal\">JavaScript基础入门教程（引入方式/注释/变量/常量/数据类型/类型转换）</a></li><li data-pid=\"79T8NGzV\"><a href=\"https://zhuanlan.zhihu.com/p/596694788\" class=\"internal\">JavaScript基础入门教程（引入方式、注释、变量、数据类型、类型转换）</a></li><li data-pid=\"kkgm1o35\"><a href=\"https://zhuanlan.zhihu.com/p/596702344\" class=\"internal\">JavaScript基础入门教程（</a><a href=\"https://www.zhihu.com/search?q=for%E5%BE%AA%E7%8E%AF&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2830444512%7D\" class=\"internal\">for循环</a>/数组）</li><li data-pid=\"1CV9EIDI\"><a href=\"https://zhuanlan.zhihu.com/p/596709406\" class=\"internal\">JavaScript基础入门教程（函数/返回值/作用域）</a></li><li data-pid=\"UtXqDyWB\"><a href=\"https://zhuanlan.zhihu.com/p/596717319\" class=\"internal\">JavaScript基础入门教程（对象/内置对象）</a></li><li data-pid=\"Jz2XbT94\"><a href=\"https://zhuanlan.zhihu.com/p/596798586\" class=\"internal\">JavaScript进阶教程（作用域/函数/解构赋值）</a></li><li data-pid=\"AZ5LuVP3\"><a href=\"https://zhuanlan.zhihu.com/p/596803203\" class=\"internal\">JavaScript进阶教程（构造函数/内置函数/继承/封装）</a></li><li data-pid=\"ex19HJvF\"><a href=\"https://zhuanlan.zhihu.com/p/596806793\" class=\"internal\">JavaScript进阶教程（深浅拷贝/异常/this/防抖节流）</a></li><li data-pid=\"ZftAsSrn\"><a href=\"https://zhuanlan.zhihu.com/p/602188356\" class=\"internal\">JavaScript函数（函数创建和使用、参数传递）</a></li><li data-pid=\"3j2zsLQv\"><a href=\"https://zhuanlan.zhihu.com/p/603967445\" class=\"internal\">JavaScript函数（函数返回值）</a></li><li data-pid=\"EEHuLhYk\"><a href=\"https://zhuanlan.zhihu.com/p/604196467\" class=\"internal\">JavaScript数函（作用域和局部变量）</a></li><li data-pid=\"m7EolNkY\"><a href=\"https://zhuanlan.zhihu.com/p/604199076\" class=\"internal\">JavaScript函数（模态框插件的封装）</a></li></ul><h3>【<b>VUE图文教程推荐</b>】<b>：</b></h3><ul><li data-pid=\"nhHhEbiE\"><a href=\"https://zhuanlan.zhihu.com/p/597651349\" class=\"internal\">Vue基础入门教程(vue-cli+vue指令)</a></li><li data-pid=\"kKyuj_yR\"><a href=\"https://zhuanlan.zhihu.com/p/597742904\" class=\"internal\">Vue基础入门教程(vue指令大全)</a></li><li data-pid=\"NwZ223sZ\"><a href=\"https://zhuanlan.zhihu.com/p/597758942\" class=\"internal\">Vue基础入门教程(vue组件化开发)</a></li><li data-pid=\"FrB6CTZr\"><a href=\"https://zhuanlan.zhihu.com/p/583551572\" class=\"internal\">最全的Vuex学习教程(Vuex基础、模块化、案例)</a></li></ul><h3>【<b>Koa2教程</b>】<b>：</b></h3><ul><li data-pid=\"ZOYNM2ot\"><a href=\"https://zhuanlan.zhihu.com/p/589644440\" class=\"internal\">Koa2框架是什么？Koa框架教程快速入门Koa中间件</a></li><li data-pid=\"TLHpr6_O\"><a href=\"https://zhuanlan.zhihu.com/p/593605400\" class=\"internal\">Koa2框架路由应用，Koa2前景、Koa2中间件</a></li><li data-pid=\"Dmu4PBEH\"><a href=\"https://zhuanlan.zhihu.com/p/594624633\" class=\"internal\">Koa2异常处理</a></li></ul><h3>【<b>其他】：</b></h3><ul><li data-pid=\"HKTr3tyc\"><span class=\"nolink\">13 个有趣且实用的 CSS 框架 / 组件</span></li><li data-pid=\"dlHfNneW\"><a href=\"https://www.zhihu.com/question/39503897/answer/2781114367\" class=\"internal\">有哪些好的前端社区？</a></li></ul><div class=\"highlight\"><pre><code class=\"language-as3\"><span class=\"err\">如果对你有帮助的话，点个赞收个藏，给作者一个鼓励。也方便你下次能够快速查找。</span></code></pre></div><p data-pid=\"8uzetppf\"><b>最后，希望喜欢学习的你们，坚持下去，做一个有知识的前端人，加油~</b></p><p data-pid=\"UDxZqiYv\"><b>今天先分享到这里，写了好久的回答，看完了点个赞呀！！！</b></p><p data-pid=\"BX4uqJEf\"><b>希望能帮助到更多人，别光收藏不点赞呀！</b></p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-602d7a843ac70ece3d1495d7e8f95c0d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"489\" data-rawheight=\"79\" data-original-token=\"v2-602d7a843ac70ece3d1495d7e8f95c0d\" class=\"origin_image zh-lightbox-thumb\" width=\"489\" data-original=\"https://pic4.zhimg.com/v2-602d7a843ac70ece3d1495d7e8f95c0d_r.jpg\"/></figure><p></p>",
            "relationship": {
                "is_thanked": false,
                "is_nothelp": false,
                "voting": 0
            },
            "is_labeled": false,
            "visited_count": 36645,
            "thumbnails": [
                "https://picx.zhimg.com/50/v2-d0c7862629dc3b3228bc8c8a473ac4d3_720w.jpg?source=b6762063"
            ],
            "favorite_count": 683,
            "answer_type": "normal"
        },
        "brief": "{\"source\": \"TS\", \"type\": \"answer\", \"id\": 2886366581}",
        "attached_info": "CrsFCISTj8z6vsSwsQEQBBoJNTU0ODc2NDI4IPLpl58GKFYwBEARSkEKLFRTX1NPVVJDRV9UV09UT1dFUl9TSE9SVElOVEVSRVNUX1JFQ0FMTF9URVhUEgEwGAAgADoKeyJyYXciOiIifVoINzg2NTk3MjJiIDk4MDdhMDU0YTgxNjg4YmZjNDk5MzViNDliYjU5Y2Y1cgoyODg2MzY2NTgxigEJNTIzNzAxMjQyqgEJcmVjb21tZW5kwgEgMjBhNmZlYTE5Y2U4YmQzODczNDdkMzFiMjE0ZmQ0ZGHyAQoIDBIGTm9ybWFs8gEoCAoSJDFmNjRhYWIxLTM4ODEtNDU5ZS04MzI4LTA0MzE4N2U3OGYzYvIBBQgLEgEzggIAiALApOKg6TGSAiAyMGE2ZmVhMTljZThiZDM4NzM0N2QzMWIyMTRmZDRkYZoCAMoCG09sZENvbnRlbnRSZWR1Y2U1V2VpZ2h0UnVsZdoCLFRTX1NPVVJDRV9UV09UT1dFUl9TSE9SVElOVEVSRVNUX1JFQ0FMTF9URVhU6AIC+gILTk9STUFMX0ZMT1eKAyAzNjE5NWVkZjU2NDU0YjE4YTEyZjgyNDNkNTJkMmMxNpoDDQoCdjAQABoFb3RoZXKoA6WeAtgDAOoDIGZlZWRfc2hvcnRpbnRlcmVzdF90d290b3dlcl90ZXh0+gMfEgxVTktOT1dOX01PREUgACoNTk9fSU1BR0VfTU9ERYAEAIgEAJIEBk5vcm1hbJoEATKgBACoBACwBAC6BAJhacIEAzQwMMgEANIED+aOqOiNkOW3suabtOaWsNgEAPAEAPkEAAAAYNRKuz+BBQAAAAAAAAAAiQX59fx8aZ+kP5IFCeS4iuWfjuWMupoFA2RmdKIFA2RmdLIFATG5BQAAAAAAAAAA0AUA4AUA6AUA8AUDkgIlCgk1NTQ4NzY0MjgSCjI4ODYzNjY1ODEYBCIKSU1BR0VfVEVYVA==",
        "action_card": false
    },
    {
        "id": "18_1711881626.86",
        "type": "feed",
        "offset": 18,
        "verb": "TOPIC_ACKNOWLEDGED_ARTICLE",
        "created_time": 1711881626,
        "updated_time": 1711881626,
        "target": {
            "id": 609112106,
            "type": "article",
            "url": "https://api.zhihu.com/articles/609112106",
            "author": {
                "id": "2eceb5fe9b9c6c1706e601153cce8e3a",
                "url": "https://api.zhihu.com/people/2eceb5fe9b9c6c1706e601153cce8e3a",
                "user_type": "people",
                "url_token": "lllll-45-74-97",
                "name": "程序员小猴",
                "headline": "公众号：小猴编程资料站 ——   不定时更新编程知识",
                "avatar_url": "https://pic1.zhimg.com/50/v2-efa77c4ecce6edb3c96eaca8224f2532_l.jpg?source=b6762063",
                "is_org": false,
                "gender": -1,
                "followers_count": 888,
                "is_following": false,
                "is_followed": false
            },
            "title": "Vue开发必须知道的36个技巧",
            "comment_permission": "all",
            "created": 1677220411,
            "updated": 1677220411,
            "voteup_count": 359,
            "voting": 0,
            "comment_count": 17,
            "linkbox": {
                "category": "",
                "pic": "",
                "title": "",
                "url": ""
            },
            "excerpt": "1.require.context()1.场景:如页面需要导入多个组件,原始写法: import titleCom from &#39;@/components/home/titleCom&#39; import bannerCom from &#39;@/components/home/bannerCom&#39; import cellCom from &#39;@/components/home/cellCom&#39; components:{titleCom,bannerCom,cellCom}2.这样就写了大量重复的代码,利用 require.context 可以写成 const path = require(&#39;path&#39;) const files = require.context(&#39;@/components/home&#39;, false, /\\.vue…",
            "excerpt_new": "1.require.context()1.场景:如页面需要导入多个组件,原始写法: import titleCom from &#39;@/components/home/titleCom&#39; import bannerCom from &#39;@/components/home/bannerCom&#39; import cellCom from &#39;@/components/home/cellCom&#39; components:{titleCom,bannerCom,cellCom}2.这样就写了大量重复的代码,利用 require.context 可以写成 const path = require(&#39;path&#39;) const files = require.context(&#39;@/components/home&#39;, false, /\\.vue…",
            "preview_type": "default",
            "preview_text": "",
            "content": "",
            "is_labeled": false,
            "visited_count": 39322,
            "favorite_count": 2042
        },
        "brief": "{\"source\": \"TS\", \"type\": \"article\", \"id\": 609112106}",
        "attached_info": "Co0FCK+Wq7K0m6GwsgEQBxoJMjIzNDkwMzM2ILu04Z8GKOcCMBFAEko0Ch9UU19TT1VSQ0VfTkVXQklFX1RFWFRfVFdPX1RPV0VSEgEwGAAgADoKeyJyYXciOiIifWIgOTgwN2EwNTRhODE2ODhiZmM0OTkzNWI0OWJiNTljZjVyCTYwOTExMjEwNqoBCXJlY29tbWVuZMIBIDJlY2ViNWZlOWI5YzZjMTcwNmU2MDExNTNjY2U4ZTNh8gEKCAwSBk5vcm1hbPIBKAgKEiQ0NWQ4ZjMwNS0wMjdhLTQyNmQtYTY2Zi00MDc4ZTkyOWNlNWbyAQUICxIBNIICAIgC3sPioOkxkgIgMmVjZWI1ZmU5YjljNmMxNzA2ZTYwMTE1M2NjZThlM2GaAgDKAhtPbGRDb250ZW50UmVkdWNlNVdlaWdodFJ1bGXaAh9UU19TT1VSQ0VfTkVXQklFX1RFWFRfVFdPX1RPV0VS6AID+gILTk9STUFMX0ZMT1eKAyBiZDA3ZWMyNGIyNTE0NDJmYjQ0MTRmYzVmYjlkZmViOZoDDQoCdjAQABoFb3RoZXKoA5qzAtgDAOoDHm5ld2JpZV90ZXh0X3Rvd190b3dlcl9ub19saW1pdPoDHxIMVU5LTk9XTl9NT0RFIAAqDU5PX0lNQUdFX01PREWABACIBACSBAZOb3JtYWyaBAEzoAQAqAQAsAQAugQGbWFudWFswgQDMTcwyAQA0gQP5o6o6I2Q5bey5pu05paw2AQA8AQA+QQAAADgR/+5P4EFAAAAAAAAAACJBUwMvz+/f6k/kgUJ5LiK5Z+O5Yy6mgUDZGZ0ogUDZGZ0sgUBMbkFAAAAAAAAAADQBQDgBQDoBQDwBQSSAiQKCTIyMzQ5MDMzNhIJNjA5MTEyMTA2GAciCklNQUdFX1RFWFQ=",
        "action_card": false
    },
    {
        "id": "19_1711881626.221",
        "type": "feed",
        "offset": 19,
        "verb": "TOPIC_ACKNOWLEDGED_ANSWER",
        "created_time": 1711881626,
        "updated_time": 1711881626,
        "target": {
            "id": 3350874376,
            "type": "answer",
            "url": "https://api.zhihu.com/answers/3350874376",
            "author": {
                "id": "58ec1de408ca01b5306ddf9399dd6120",
                "url": "https://api.zhihu.com/people/58ec1de408ca01b5306ddf9399dd6120",
                "user_type": "people",
                "url_token": "wang-guo-wei-5-90",
                "name": "十三",
                "headline": "Per Aspera Ad Astra.",
                "avatar_url": "https://pica.zhimg.com/50/v2-840755e9fc04c740337de2058eb3fbf5_l.jpg?source=b6762063",
                "is_org": false,
                "gender": 1,
                "followers_count": 10547,
                "is_following": false,
                "is_followed": false
            },
            "created_time": 1704437682,
            "updated_time": 1708880161,
            "voteup_count": 22074,
            "thanks_count": 23170,
            "comment_count": 655,
            "is_copyable": false,
            "question": {
                "id": 525200257,
                "type": "question",
                "url": "https://api.zhihu.com/questions/525200257",
                "author": {
                    "id": "5977e5cf46691f880bc5956a8a5ab19b",
                    "url": "https://api.zhihu.com/people/5977e5cf46691f880bc5956a8a5ab19b",
                    "user_type": "people",
                    "url_token": "tong-tong-88-45-21",
                    "name": "彤彤",
                    "headline": "专注人性思维智慧、情感、读书成长。 关注我免费领取引流和变现",
                    "avatar_url": "https://picx.zhimg.com/50/v2-4f2134283d50771cae7e1b745ec090cb_l.jpg?source=b6762063",
                    "is_org": false,
                    "gender": 0,
                    "followers_count": 3482,
                    "is_following": false,
                    "is_followed": false
                },
                "title": "什么是顶级的思维？",
                "created": 1648704615,
                "answer_count": 0,
                "follower_count": 0,
                "comment_count": 28,
                "bound_topic_ids": [
                    1351,
                    14565,
                    38800
                ],
                "is_following": false,
                "excerpt": "",
                "relationship": {
                    "is_author": false
                },
                "detail": "",
                "question_type": "normal"
            },
            "excerpt": "1、身体不舒服，多睡觉。 2、精神不舒服，多看书。 3、已成的事实，不闻不问。 4、永远不要试图去改变任何人。 5、删过的人，不加第二回。 6、离开的人，不看第二眼。 7、放弃的人，不爱第二次。 8、金钱，可以解决99%的问题。 9、冷漠，可以省去80%的麻烦。 10、永远不要对任何人有任何期待，包括父母。 11、内心强大，不在乎别人说什么，最多心里搁1秒，然后再也不去想，不敏感，不玻璃心，钝感力强。 12、成年人没有避风港，…",
            "excerpt_new": "1、身体不舒服，多睡觉。 2、精神不舒服，多看书。 3、已成的事实，不闻不问。 4、永远不要试图去改变任何人。 5、删过的人，不加第二回。 6、离开的人，不看第二眼。 7、放弃的人，不爱第二次。 8、金钱，可以解决99%的问题。 9、冷漠，可以省去80%的麻烦。 10、永远不要对任何人有任何期待，包括父母。 11、内心强大，不在乎别人说什么，最多心里搁1秒，然后再也不去想，不敏感，不玻璃心，钝感力强。 12、成年人没有避风港，…",
            "preview_type": "default",
            "preview_text": "",
            "reshipment_settings": "disallowed",
            "content": "<p data-pid=\"Tjhxh2Fs\">1、身体不舒服，多睡觉。</p><p data-pid=\"pFldBHvO\">2、精神不舒服，多看书。</p><p data-pid=\"b_AUHR0v\">3、已成的事实，不闻不问。</p><p data-pid=\"VENVG-bL\">4、永远不要试图去改变任何人。</p><p data-pid=\"T2A7JEaQ\">5、删过的人，不加第二回。</p><p data-pid=\"0tUYPQ-J\">6、离开的人，不看第二眼。</p><p data-pid=\"yQ_ptUp4\">7、放弃的人，不爱第二次。</p><p data-pid=\"F-bkeQk8\">8、金钱，可以解决99%的问题。</p><p data-pid=\"OIsjwfXk\">9、冷漠，可以省去80%的麻烦。</p><p data-pid=\"n0dooKnl\">10、永远不要对任何人有任何期待，包括父母。</p><p data-pid=\"5MAE8791\">11、内心强大，不在乎别人说什么，最多心里搁1秒，然后再也不去想，不敏感，不玻璃心，钝感力强。</p><p data-pid=\"U0S5Mt9U\">12、成年人没有避风港，余额就是安全感。</p><p data-pid=\"_uvmBqom\">13、永远记住“关我屁事”和“关你屁事”，把自己的感受放在第一位。</p><p data-pid=\"UCsApgtU\">14、不舒服的关系，该翻脸时就翻脸。</p><p data-pid=\"Hh7MJ8WR\">15、只要你心够狠，夜夜崩溃的就是别人。</p><p data-pid=\"U5A5Va8m\">16、不能直着走的路，学会拐个弯。</p><p data-pid=\"VuY5hJjS\">17、少问自己为什么；多问别人，凭什么？</p><p data-pid=\"K9iYVXvA\">18、能怪别人的事情，尽量别怪自己。</p><p data-pid=\"gkrONfUs\">19、“屏蔽力”是一个人最顶级的能力，任何消耗你的人和事，多看一眼都是你的不对。</p><p data-pid=\"DSB9AcD1\">20、远离那些100块钱都要借的人。</p><p data-pid=\"6DwxX26_\">21、宁可睡地板，也要当老板。</p><p data-pid=\"NFguTimO\">22、自己没实力，认识谁都没有用。</p><p data-pid=\"tZJDW3iM\">23、只相信，巅峰时不来找我的人。</p><p data-pid=\"LN6Wbnwb\">24、只相信，难受时陪我谈心的人。</p><p data-pid=\"WJ35N2oK\">25、只相信，落魄时帮助过我的人。</p><p data-pid=\"7pOpgVnQ\">26、只做三件事：锻炼、赚钱、学习。</p><p data-pid=\"7kp--c3G\">27、心一定要狠，远离烂人，烂事，远离不靠谱的人。</p><p data-pid=\"hNKRGQGv\">28、所有的大彻大悟之人，都曾无可救药过。</p><p data-pid=\"MgrJ8LfO\">29、记住，只有牛羊才成群，猛兽从来都是独行。</p><p data-pid=\"1TsVBujQ\">30、能用金钱解決的问题，就别用人情；能用汗水解决的问题，就别用泪水。</p><p data-pid=\"YcAGdykn\">31、不说糊涂话，不跟不靠谱的人做正经事，不跟无情的人谈交情。</p><p data-pid=\"-zglE11e\">32、不要害怕孤独，你自己也能做的很好。</p><p data-pid=\"BMe5H0CT\">33、对别人，我捧你时，你是杯子；我不捧你，你就是玻璃渣子。</p><p data-pid=\"APOxkPJH\">34、高手是没有情绪的，动不动就生气的人没有一个是智者。</p><p data-pid=\"kk4r3_EK\">35、一个人的觉醒，1%靠别人提醒，99%靠千刀万剐。</p><p data-pid=\"Gwx0kURO\">36、先有心狠手辣的因，才有心慈手软的果，爬上去才能普度众生。</p><p data-pid=\"hotZ-LQV\">37、做人既要有菩萨心肠，也要有屠夫手段。</p><p data-pid=\"IqZcvZil\">38、只要你心够狠，夜夜崩溃的就是别人，当你放不下别人的时候，你想想别人是怎么放下你的。</p><p data-pid=\"0gS4Ilta\">39、什么都可以放弃，唯独不能放弃赚钱的能力。</p><p data-pid=\"iM0c1ym3\">40、社会资源永远是有限的，好东西要靠抢。只有弱者才会坐等分配。</p><p data-pid=\"huA4Olvp\">41、这个世界就并不完美，社会的本质就是人吃人，丛林法则，适者生存。任何人都无法改变。</p><p data-pid=\"Zasg1q68\">42、诉，换不来同情；怨，变不了命运；炫，带不来幸福；喷，解不了饥渴。</p><p data-pid=\"Qnfsiokr\">43、越是有钱人越喜欢深思熟虑，越是愚蠢的穷人才喜欢下大赌注，孤注掷让自己永无翻身之日。</p><p data-pid=\"fpi9qm1h\">44、除了生死，一切都是擦伤。</p><p data-pid=\"WsuoM0V1\">45、善良毫无意义，实力才是硬道理。</p><p data-pid=\"E2LZDKAK\">46、赚钱能治愈一切矫情，有钱能治愈一切自卑。</p><p data-pid=\"seO-M-s5\">47、没有实力，就不要对别人好。不然，很容易被定义为讨好。</p><p data-pid=\"T6WDslZ5\">48、人性的本质就是，你越是做事果断、我行我素、不服就干，就越有人欣赏你；你越是老实、善良、心慈手软，就越是有人欺负你。</p><p data-pid=\"VRj9wV04\">49、没事好好赚钱，努力攒钱，积累财富。</p><p data-pid=\"lcNP_Oqe\">50、为了将来的某一天，我们也能说一句，有钱真好！而不是无奈的说，要是有钱就好了。</p><p data-pid=\"4sWUaGhn\">51、冯唐说：去精神病院看一下，男人发疯都是因为要“逐鹿中原&#34;；女人发疯都是因为渴望被爱。</p><p data-pid=\"F-NLa7kU\">你在意什么，什么就会折磨你，你计较什么，什么就会困扰你。 ​ ​​​</p><p data-pid=\"aJwxFvF2\">52、这个世界根本不存在“不会做”、“不能做”，只有“不想做”和“不敢做”，当你失去所有依靠的时候，你自然就什么都会了。</p><p data-pid=\"OGK_cVpT\">53、不要花太多时间去维护关系，有了钱，有了本事，一切关系都会很顺畅，如果还不顺畅，是因为钱和本事还不够。 ​​​</p><p data-pid=\"poTcz7Bo\">54、“任何关系，考虑不到你的感受和利益时请及时止损，善良如果开不出花，那就让他长出刺！” ​​​</p><p data-pid=\"3O48dUf3\">55、见过光，就应该把光反射出去。</p><p data-pid=\"wKYp9Rdk\">56、不要急于报仇，烂掉的水果会自己从树上掉下来。</p><p data-pid=\"mXiUMkWK\">57、能控制住自己嘴巴的人都很厉害，不管是吃饭还是说话。</p><p data-pid=\"oG2mPztr\">58、不要因为一时投缘，就轻易亮出你的底牌。闭嘴的鱼，最不容易被鱼钩钩住。</p><p data-pid=\"jhoYDTVU\">59、挑你毛病的人，只是想立威，并不是你真的有毛病。带着答案问你问题的人，他要的不是答案，而是你的把柄。</p><p data-pid=\"YUYGQMXX\">60、看错人；不是瞎，是心软。信错人；不是傻，是重情义。爱错人；不是愚蠢，而是你的劫。什么事都要自身找原因，不要去苟且他人，鞋子脏了，是因为你走的路不干浄 ​​。</p><p data-pid=\"FnHpa9Fs\">61、别贪心，我们不可能什么都有，也别灰心，我们不可能什么也没有。 ​​​</p><p data-pid=\"veYdfBcP\">62、要明白，真正聪明的人，通常都不太精明，太过精明，本身就是一种愚蠢。 ​​​</p><p data-pid=\"w7AnHIrQ\">63、嫉妒者之所以痛苦，是因为折磨他的不仅是自己本身的失败和挫折，还有别人的成功 ​​​。</p><p data-pid=\"E0APNnk3\">64、土豆和西红柿，根本就不是一个世界的，但是他们走到了一起，因为土豆变成了薯条，西红柿变成了番茄酱。 ​​​​</p><p data-pid=\"uzFflcN2\">65、人生如饺子，无论是被人拖下水，还是自己跳下水，不淌一次浑水，永远都不会成熟。 ​​​</p><p data-pid=\"BMvl6q_Y\">66、人生就像喝水，“孤～独～孤～独～”的，一杯子就没了...</p><p data-pid=\"Kkwdtgig\">67、守嘴不惹祸，守心不出错。你多学一样本事，就少说一句求人的话。</p><p data-pid=\"98-wdYre\">68、当你偶尔发现语言变得无力时，不妨安静下来，让沉默替你发声。 ​​​​</p><p data-pid=\"ha9Bc9pA\">69、人生需要四种人：名师指路，贵人相助，亲人支持，小人刺激。</p><p data-pid=\"NtlF-IQf\">70、藏锋、克己、慎言，会让你越来越幸运。 ​​​</p><a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/question/47908341/answer/3390160776?utm_psn=1745250341099282432\" class=\"internal\">有哪些独到的识人技巧？</a><p></p>",
            "relationship": {
                "is_thanked": false,
                "is_nothelp": false,
                "voting": 0
            },
            "is_labeled": false,
            "visited_count": 1842804,
            "favorite_count": 69835,
            "answer_type": "normal"
        },
        "brief": "{\"source\": \"TS\", \"type\": \"answer\", \"id\": 3350874376}",
        "attached_info": "CvMECK+Wq7K0m6GwsgEQBBoJNjM5MzI3MzkwILLP3qwGKLqsATCPBUATSjAKG1RTX1NPVVJDRV9CQVNJQ19JTkZPX1JFQ0FMTBIBMBgAIAA6CnsicmF3IjoiIn1aCDc4OTkyNTQzYiA5ODA3YTA1NGE4MTY4OGJmYzQ5OTM1YjQ5YmI1OWNmNXIKMzM1MDg3NDM3NooBCTUyNTIwMDI1N6oBCXJlY29tbWVuZMIBIDU4ZWMxZGU0MDhjYTAxYjUzMDZkZGY5Mzk5ZGQ2MTIw8gEKCAwSBk5vcm1hbPIBKAgKEiRhMzQ0YjQzYS00YjI3LTQ1ZjktODNlMS0yMWYzNjM4OGIxY2XyAQUICxIBNIICAIgC3sPioOkxkgIgNThlYzFkZTQwOGNhMDFiNTMwNmRkZjkzOTlkZDYxMjCaAgDaAhtUU19TT1VSQ0VfQkFTSUNfSU5GT19SRUNBTEzoAgL6AgtOT1JNQUxfRkxPV4oDIGJkMDdlYzI0YjI1MTQ0MmZiNDQxNGZjNWZiOWRmZWI5mgMNCgJ2MBAAGgVvdGhlcqgD9Lxw2AMA6gMRYmFzaWNfaW5mb19yZWNhbGz6Ax8SDFVOS05PV05fTU9ERSAAKg1OT19JTUFHRV9NT0RFgAQAiAQAkgQGTm9ybWFsmgQBMqAEAKgEALAEALoEBm1hbnVhbMIEAzE2MMgEANIED+aOqOiNkOW3suabtOaWsNgEAPAEAPkEAAAAAD4Hqj+BBQAAAAAAAAAAiQVMDL8/v3+pP5IFCeS4iuWfjuWMupoFA2RmdKIFA2RmdLIFATG5BQAAAAAAAAAA0AUA4AUA6AUA8AUEkgIlCgk2MzkzMjczOTASCjMzNTA4NzQzNzYYBCIKSU1BR0VfVEVYVA==",
        "action_card": false
    },
    {
        "id": "20_1711881626.291",
        "type": "feed",
        "offset": 20,
        "verb": "TOPIC_ACKNOWLEDGED_ANSWER",
        "created_time": 1711881626,
        "updated_time": 1711881626,
        "target": {
            "id": 3274469415,
            "type": "answer",
            "url": "https://api.zhihu.com/answers/3274469415",
            "author": {
                "id": "6258500944e8ff2a02d57071f8def7ed",
                "url": "https://api.zhihu.com/people/6258500944e8ff2a02d57071f8def7ed",
                "user_type": "people",
                "url_token": "hopdong",
                "name": "hopdong",
                "headline": "",
                "avatar_url": "https://pic1.zhimg.com/50/v2-1dffcd05249c16815d6626d74a2f3c92_l.jpg?source=b6762063",
                "is_org": false,
                "gender": -1,
                "followers_count": 82,
                "is_following": false,
                "is_followed": false
            },
            "created_time": 1698928734,
            "updated_time": 1698928734,
            "voteup_count": 27,
            "thanks_count": 6,
            "comment_count": 18,
            "is_copyable": true,
            "question": {
                "id": 628196368,
                "type": "question",
                "url": "https://api.zhihu.com/questions/628196368",
                "author": {
                    "id": "26560782a4e63d07e11ae3bd423526b9",
                    "url": "https://api.zhihu.com/people/26560782a4e63d07e11ae3bd423526b9",
                    "user_type": "people",
                    "url_token": "bai-du-ling-hun-62",
                    "name": "摆渡灵魂",
                    "headline": "",
                    "avatar_url": "https://pica.zhimg.com/50/v2-6b57be2b75c4aacc4a8371944e990f33_l.jpg?source=b6762063",
                    "is_org": false,
                    "gender": -1,
                    "followers_count": 0,
                    "is_following": false,
                    "is_followed": false
                },
                "title": "前端真的已经凉了么？",
                "created": 1698498677,
                "answer_count": 0,
                "follower_count": 0,
                "comment_count": 2,
                "bound_topic_ids": [
                    225,
                    769,
                    7912,
                    87560
                ],
                "is_following": false,
                "excerpt": "",
                "relationship": {
                    "is_author": false
                },
                "detail": "",
                "question_type": "normal"
            },
            "excerpt": "前段时间，公司同事内推了一个过来面试。本来公司不准备招人咯，但是碍于面子，还是让其来公司面试。其前端技术一般，但是能干活，要求也很低，要是公司在扩招情况下，肯定留下来了。 他的经历深深触动了我，他已经离职三个月了，还没有找到合适的岗位，投了很多简历了，也面了很多，但是都没有通过。要在成都待下去，好难，再找不到工作，人就要奔溃了，看着他那满脸愁容，我也在反思，假如我也失业了，要还房贷，要生活，还要…",
            "excerpt_new": "前段时间，公司同事内推了一个过来面试。本来公司不准备招人咯，但是碍于面子，还是让其来公司面试。其前端技术一般，但是能干活，要求也很低，要是公司在扩招情况下，肯定留下来了。 他的经历深深触动了我，他已经离职三个月了，还没有找到合适的岗位，投了很多简历了，也面了很多，但是都没有通过。要在成都待下去，好难，再找不到工作，人就要奔溃了，看着他那满脸愁容，我也在反思，假如我也失业了，要还房贷，要生活，还要…",
            "preview_type": "default",
            "preview_text": "",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"OMfxCpGJ\">前段时间，公司同事内推了一个过来面试。本来公司不准备招人咯，但是碍于面子，还是让其来公司面试。其前端技术一般，但是能干活，要求也很低，要是公司在扩招情况下，肯定留下来了。 他的经历深深触动了我，他已经离职三个月了，还没有找到合适的岗位，投了很多简历了，也面了很多，但是都没有通过。要在成都待下去，好难，再找不到工作，人就要奔溃了，看着他那满脸愁容，我也在反思，假如我也失业了，要还房贷，要生活，还要养娃养老，咋个办呢?</p>",
            "relationship": {
                "is_thanked": false,
                "is_nothelp": false,
                "voting": 0
            },
            "is_labeled": false,
            "visited_count": 42155,
            "favorite_count": 3,
            "answer_type": "normal"
        },
        "brief": "{\"source\": \"TS\", \"type\": \"answer\", \"id\": 3274469415}",
        "attached_info": "CtwGCK+Wq7K0m6GwsgEQBBoJNjI1NDM1OTcxIN6wjqoGKBswEkAUSjMKKFRTX1NPVVJDRV9UQUdfQkFTRURfVEVYVF9USEVNRV9ERVRFQ1RJT04SATAYACAAOgBKIgoXVFNfU09VUkNFX1RIRU1FX1dBS0VfVVASATAYACAAOgBKNAopVFNfU09VUkNFX1RBR19CQVNFRF9URVhUX0FJX1RIRU1FX1BSRURJQ1QSATAYACAAOgBKIAoVVFNfU09VUkNFX1RIRU1FX01FUkdFEgEwGAAgADoAWgkxMDE4NzgwNDViIDk4MDdhMDU0YTgxNjg4YmZjNDk5MzViNDliYjU5Y2Y1cgozMjc0NDY5NDE1igEJNjI4MTk2MzY4qgEJcmVjb21tZW5kwgEgNjI1ODUwMDk0NGU4ZmYyYTAyZDU3MDcxZjhkZWY3ZWTyAQoIDBIGTm9ybWFs8gEoCAoSJDdlMzg4NzViLTcwOGItNGFiOC1iYWFmLTU2ZWVmNTVhYzk2YfIBBQgLEgE0ggIAiALew+Kg6TGSAiA2MjU4NTAwOTQ0ZThmZjJhMDJkNTcwNzFmOGRlZjdlZJoCAMoCFFRoZW1lTGFzdE5XZWlnaHRSdWxlygIbT2xkQ29udGVudFJlZHVjZTVXZWlnaHRSdWxlygIVVGhlbWVEZXRlY3RXZWlnaHRSdWxl2gIoVFNfU09VUkNFX1RBR19CQVNFRF9URVhUX1RIRU1FX0RFVEVDVElPTugCAvoCC05PUk1BTF9GTE9XigMgYmQwN2VjMjRiMjUxNDQyZmI0NDE0ZmM1ZmI5ZGZlYjmaAw0KAnYwEAAaBW90aGVyqAOryQLYAwDqAyNUaGVtZURldGVjdFRoZW1lQWlEZXRlY3RUYWdSZWNhbGxlcvoDHxIMVU5LTk9XTl9NT0RFIAAqDU5PX0lNQUdFX01PREWABACIBACSBAZOb3JtYWyaBAEyoAQAqAQAsAQAugQGbWFudWFswgQDMTcwyAQB0gQP5o6o6I2Q5bey5pu05paw2AQA8AQA+QQAAAAgHprRP4EFAAAAAAAAAACJBUwMvz+/f6k/kgUJ5LiK5Z+O5Yy6mgUDZGZ0ogUDZGZ0sgUBMbkFAAAAAAAAAADQBQDgBQDoBQHwBQSSAiUKCTYyNTQzNTk3MRIKMzI3NDQ2OTQxNRgEIgpJTUFHRV9URVhU",
        "action_card": false
    },
    {
        "id": "21_1711881626.418",
        "type": "feed",
        "offset": 21,
        "verb": "TOPIC_ACKNOWLEDGED_ANSWER",
        "created_time": 1711881626,
        "updated_time": 1711881626,
        "target": {
            "id": 3399903436,
            "type": "answer",
            "url": "https://api.zhihu.com/answers/3399903436",
            "author": {
                "id": "858b4c22c757d4686950ce236d8ba9ae",
                "url": "https://api.zhihu.com/people/858b4c22c757d4686950ce236d8ba9ae",
                "user_type": "people",
                "url_token": "zhong-xiao-bin-79",
                "name": "奶肠肠肠肠",
                "headline": "如若没有炬火，我愿做光。",
                "avatar_url": "https://picx.zhimg.com/50/v2-b4276e2b137be27759fc309a8f8192f7_l.jpg?source=b6762063",
                "is_org": false,
                "gender": 1,
                "followers_count": 813,
                "is_following": false,
                "is_followed": false
            },
            "created_time": 1708237318,
            "updated_time": 1708237318,
            "voteup_count": 9980,
            "thanks_count": 542,
            "comment_count": 671,
            "is_copyable": true,
            "question": {
                "id": 608943054,
                "type": "question",
                "url": "https://api.zhihu.com/questions/608943054",
                "author": {
                    "id": "dd5f20cb6d6d24c106d879dafe500abf",
                    "url": "https://api.zhihu.com/people/dd5f20cb6d6d24c106d879dafe500abf",
                    "user_type": "people",
                    "url_token": "reng-yong-bing",
                    "name": "昔日少年",
                    "headline": "聊一聊职场的那些事儿 ......",
                    "avatar_url": "https://picx.zhimg.com/50/v2-8d7753f45d0bd5fb0e365457fb0f9935_l.jpg?source=b6762063",
                    "is_org": false,
                    "gender": 1,
                    "followers_count": 478,
                    "is_following": false,
                    "is_followed": false
                },
                "title": "你是什么时候发现，上班是没有意义的？",
                "created": 1687847449,
                "answer_count": 0,
                "follower_count": 0,
                "comment_count": 66,
                "bound_topic_ids": [
                    1761,
                    8542,
                    9469
                ],
                "is_following": false,
                "excerpt": "",
                "relationship": {
                    "is_author": false
                },
                "detail": "",
                "question_type": "normal"
            },
            "excerpt": "一年前买了一辆丰田亚洲龙混合动力，最近闲来没事去跑了两天滴滴。 在油站加了200块钱92号，跑了两天，把加进去的油用完了，滴滴挣了216块，加上我付出的时间成本、车辆的运行损耗、我本人必要的饮食消费等等，收支大概平衡。如果不是这几天法定假期高速公路免费，我应该还要亏钱进去。 乘客得到了舒适便捷的出行体验，滴滴公司得到了抽成，丰田公司生产的产品发挥了很好的性能，大家都有美好的未来。 只有我成为了帕鲁，去他妈的",
            "excerpt_new": "一年前买了一辆丰田亚洲龙混合动力，最近闲来没事去跑了两天滴滴。 在油站加了200块钱92号，跑了两天，把加进去的油用完了，滴滴挣了216块，加上我付出的时间成本、车辆的运行损耗、我本人必要的饮食消费等等，收支大概平衡。如果不是这几天法定假期高速公路免费，我应该还要亏钱进去。 乘客得到了舒适便捷的出行体验，滴滴公司得到了抽成，丰田公司生产的产品发挥了很好的性能，大家都有美好的未来。 只有我成为了帕鲁，去他妈的",
            "preview_type": "default",
            "preview_text": "",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"6dc7-if7\">一年前买了一辆丰田亚洲龙混合动力，最近闲来没事去跑了两天滴滴。</p><p data-pid=\"lzIkyZKw\">在油站加了200块钱92号，跑了两天，把加进去的油用完了，滴滴挣了216块，加上我付出的时间成本、车辆的运行损耗、我本人必要的饮食消费等等，收支大概平衡。如果不是这几天法定假期高速公路免费，我应该还要亏钱进去。</p><p data-pid=\"O_aaLDLF\">乘客得到了舒适便捷的出行体验，滴滴公司得到了抽成，丰田公司生产的产品发挥了很好的性能，大家都有美好的未来。</p><p data-pid=\"E1di8UlW\">只有我成为了帕鲁，去他妈的</p><p></p>",
            "relationship": {
                "is_thanked": false,
                "is_nothelp": false,
                "voting": 0
            },
            "is_labeled": false,
            "visited_count": 2180626,
            "favorite_count": 484,
            "answer_type": "normal"
        },
        "brief": "{\"source\": \"TS\", \"type\": \"answer\", \"id\": 3399903436}",
        "attached_info": "CvIECK+Wq7K0m6GwsgEQBBoJNjQ4MjQxNDYxIIbExq4GKPxNMJ8FQBVKMAobVFNfU09VUkNFX0JBU0lDX0lORk9fUkVDQUxMEgEwGAAgADoKeyJyYXciOiIifVoIOTc2MDE0MzhiIDk4MDdhMDU0YTgxNjg4YmZjNDk5MzViNDliYjU5Y2Y1cgozMzk5OTAzNDM2igEJNjA4OTQzMDU0qgEJcmVjb21tZW5kwgEgODU4YjRjMjJjNzU3ZDQ2ODY5NTBjZTIzNmQ4YmE5YWXyAQoIDBIGTm9ybWFs8gEoCAoSJDM5YTRiMWE0LTFiMmUtNDhkOC1iNjMwLTdhMDBmM2EzOTk5N/IBBQgLEgE0ggIAiALfw+Kg6TGSAiA4NThiNGMyMmM3NTdkNDY4Njk1MGNlMjM2ZDhiYTlhZZoCANoCG1RTX1NPVVJDRV9CQVNJQ19JTkZPX1JFQ0FMTOgCAvoCC05PUk1BTF9GTE9XigMgYmQwN2VjMjRiMjUxNDQyZmI0NDE0ZmM1ZmI5ZGZlYjmaAw0KAnYwEAAaBW90aGVyqAOSjIUB2AMA6gMRYmFzaWNfaW5mb19yZWNhbGz6Ax8SDFVOS05PV05fTU9ERSAAKg1OT19JTUFHRV9NT0RFgAQAiAQAkgQGTm9ybWFsmgQBMqAEAKgEALAEALoEBm1hbnVhbMIEAjMwyAQA0gQP5o6o6I2Q5bey5pu05paw2AQA8AQA+QQAAADgnyzAP4EFAAAAAAAAAACJBUwMvz+/f6k/kgUJ5LiK5Z+O5Yy6mgUDZGZ0ogUDZGZ0sgUBMbkFAAAAAAAAAADQBQDgBQDoBQDwBQSSAiUKCTY0ODI0MTQ2MRIKMzM5OTkwMzQzNhgEIgpJTUFHRV9URVhU",
        "action_card": false
    },
    {
        "id": "22_1711881626.317",
        "type": "feed",
        "offset": 22,
        "verb": "TOPIC_ACKNOWLEDGED_ANSWER",
        "created_time": 1711881626,
        "updated_time": 1711881626,
        "target": {
            "id": 2447274053,
            "type": "answer",
            "url": "https://api.zhihu.com/answers/2447274053",
            "author": {
                "id": "66a8b67e76104b9cd88d1f354dd2ccb0",
                "url": "https://api.zhihu.com/people/66a8b67e76104b9cd88d1f354dd2ccb0",
                "user_type": "organization",
                "url_token": "hei-ma-cheng-xu-yuan-qian-duan",
                "name": "黑马程序员前端",
                "headline": "分享前端资源、就业项目，免费答疑有问必答~不信可以私信我呀❤",
                "avatar_url": "https://picx.zhimg.com/50/v2-8e5d6ca529aa5a9c64bac7834172b9e1_l.jpg?source=b6762063",
                "is_org": true,
                "gender": -1,
                "followers_count": 11483,
                "is_following": false,
                "is_followed": false
            },
            "created_time": 1650358361,
            "updated_time": 1650358440,
            "voteup_count": 506,
            "thanks_count": 201,
            "comment_count": 11,
            "is_copyable": true,
            "question": {
                "id": 35667558,
                "type": "question",
                "url": "https://api.zhihu.com/questions/35667558",
                "author": {
                    "id": "3d8c3f3e9c72db15e74f87a6a4745706",
                    "url": "https://api.zhihu.com/people/3d8c3f3e9c72db15e74f87a6a4745706",
                    "user_type": "people",
                    "url_token": "wu-xiao-jin-7",
                    "name": "吴小金",
                    "headline": "",
                    "avatar_url": "https://pic1.zhimg.com/50/v2-abed1a8c04700ba7d72b45195223e0ff_l.jpg?source=b6762063",
                    "is_org": false,
                    "gender": 1,
                    "followers_count": 1,
                    "is_following": false,
                    "is_followed": false
                },
                "title": "前端页面，用 JavaScript 在调试 Bug 时有哪些奇技淫巧？",
                "created": 1442395860,
                "answer_count": 0,
                "follower_count": 0,
                "comment_count": 4,
                "bound_topic_ids": [
                    225,
                    367,
                    769,
                    164571
                ],
                "is_following": false,
                "excerpt": "",
                "relationship": {
                    "is_author": false
                },
                "detail": "",
                "question_type": "normal"
            },
            "excerpt": "1 debugger只要在代码中添加 debugger，chrome在运行的时候会自动停在那里。还可以用条件语句把它包裹起来，这样就可以在需要的时候才执行它。if (thisThing) { debugger; }2 console功能调试时 console.log是最常用的命令之一，此外还有一些其他的使用的功能2.1 console.log在 console.log()中，可以用%s设置字符串，%i设置数字，%c设置自定义样式，console.log()接受的两个参数，前者是描述性的语言，而第二个参数是与第一个参…",
            "excerpt_new": "1 debugger只要在代码中添加 debugger，chrome在运行的时候会自动停在那里。还可以用条件语句把它包裹起来，这样就可以在需要的时候才执行它。if (thisThing) { debugger; }2 console功能调试时 console.log是最常用的命令之一，此外还有一些其他的使用的功能2.1 console.log在 console.log()中，可以用%s设置字符串，%i设置数字，%c设置自定义样式，console.log()接受的两个参数，前者是描述性的语言，而第二个参数是与第一个参…",
            "preview_type": "default",
            "preview_text": "",
            "reshipment_settings": "allowed",
            "content": "<h2>1 debugger</h2><p data-pid=\"JSPhl6xE\">只要在代码中添加<b>debugger</b>，chrome在运行的时候会自动停在那里。还可以用条件语句把它包裹起来，这样就可以在需要的时候才执行它。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">thisThing</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kr\">debugger</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><h2>2 console功能</h2><p data-pid=\"UTwRSSiY\">调试时<b>console.log</b>是最常用的命令之一，此外还有一些其他的使用的功能</p><h3>2.1 console.log</h3><p data-pid=\"CkKHUHJw\">在<b>console.log()</b>中，可以用<b>%s</b>设置字符串，<b>%i</b>设置数字，<b>%c</b>设置自定义样式，<b>console.log()</b>接受的两个参数，前者是描述性的语言，而第二个参数是与第一个参数位置对应的字符</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39; %c %s %s %s&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;color: yellow; background-color: black;&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;–&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;测试信息&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;–&#39;</span><span class=\"p\">);</span>\n</code></pre></div><h3>2.2 console.table()</h3><p data-pid=\"L_Xa3Ax7\">很多的时候，你可能会有一堆对象需要查看。可以用<b>console.log</b>把每一个对象都输出出来，也可以用<b>console.table</b>语句直接把所有的对象都直接输出成为一个表格</p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/v2-026fb33c47ec938f0437cf1e2ea1ebf3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1892\" data-rawheight=\"225\" data-original-token=\"v2-026fb33c47ec938f0437cf1e2ea1ebf3\" class=\"origin_image zh-lightbox-thumb\" width=\"1892\" data-original=\"https://picx.zhimg.com/v2-026fb33c47ec938f0437cf1e2ea1ebf3_r.jpg\"/></figure><h3>2.3 console.time()和console.timeEnd()</h3><p data-pid=\"zAaI_Kfx\">当想知道某些代码的执行时间的时候这个工具将会非常有用，特别是当你定位很耗时的循环的时候。</p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/v2-88a626ccc68b7de3eca873294e9e544b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"312\" data-rawheight=\"199\" data-original-token=\"v2-88a626ccc68b7de3eca873294e9e544b\" data-default-watermark-src=\"https://pic1.zhimg.com/v2-a1bcb7f36b7a137272fc5ba3155dd214_b.jpg\" class=\"content_image\" width=\"312\"/></figure><h3>2.4 console.trace()</h3><p data-pid=\"tsjnfWlT\"><b>console.trace()</b>会显示函数调用的完整的堆栈轨迹信息</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">getTopN2</span><span class=\"p\">(</span><span class=\"nx\">arr</span><span class=\"p\">,</span> <span class=\"nx\">n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// sort参数返回值大于1，就交换位置\n</span><span class=\"c1\"></span>  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">trace</span><span class=\"p\">(</span><span class=\"s1\">&#39;getTopN2&#39;</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span> <span class=\"p\">[...</span><span class=\"nx\">arr</span><span class=\"p\">].</span><span class=\"nx\">sort</span><span class=\"p\">((</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">b</span> <span class=\"o\">-</span> <span class=\"nx\">a</span><span class=\"p\">).</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">n</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"XIdQj6rN\">结果如下：</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-66c10aff7b405e9b142ba7b415dc4098_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"457\" data-rawheight=\"525\" data-original-token=\"v2-66c10aff7b405e9b142ba7b415dc4098\" data-default-watermark-src=\"https://pic2.zhimg.com/v2-772eee9dc0824036be8d83380c1d8bb9_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"457\" data-original=\"https://pic1.zhimg.com/v2-66c10aff7b405e9b142ba7b415dc4098_r.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2>3 DOM节点变化时中断代码运行</h2><p data-pid=\"CzTj_te9\">在调试DOM节点时，可以在Chrome的Elements界面，右键点击某个元素，选择<b>Break on</b>选项，可以在子节点变化时中断、在元素属性变化时中断或者在节点被移除时中断代码运行</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-d3c7d4513d94bb08e6d6a9cd5708dbcb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"719\" data-rawheight=\"47\" data-original-token=\"v2-d3c7d4513d94bb08e6d6a9cd5708dbcb\" class=\"origin_image zh-lightbox-thumb\" width=\"719\" data-original=\"https://pic2.zhimg.com/v2-d3c7d4513d94bb08e6d6a9cd5708dbcb_r.jpg\"/></figure><h2>4 在控制台设置断点</h2><h3>4.1 快捷键</h3><ul><li data-pid=\"h90Q4DNE\"><b>F8:</b> 跳转至下个断点</li><li data-pid=\"H_j2xjUS\"><b>F10:</b> step over, 单步执行, 不进入函数</li><li data-pid=\"g5stfTQ8\"><b>F11:</b> step into, 单步执行, 进入函数</li><li data-pid=\"00rDjf3J\"><b>shift + F11</b>: step out, 跳出函数</li></ul><h3>4.2 在代码上设置断点</h3><p data-pid=\"Dygnv2WT\">对于每个已添加的断点都有两种状态：激活和禁用。刚添加的断点都是激活状态，禁用状态就是保留断点但临时取消该断点功能。</p><p data-pid=\"_CRR_PaG\">在Breakpoints列表中每个断点前面都有一个复选框，取消选中就将禁用该断点。断点位置的右键菜单中也可以禁用断点。也可以在右侧功能区上面Chrome断点设置钮临时禁用所有已添加的断点，再点一下恢复原状态。</p><h3>4.3 逐步执行</h3><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-bffbbab1d04ece29fbd5e32c59b9cba3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"245\" data-rawheight=\"40\" data-original-token=\"v2-bffbbab1d04ece29fbd5e32c59b9cba3\" class=\"content_image\" width=\"245\"/></figure><p data-pid=\"U4BA9qj_\">每点击一次，JS语句往后执行依据，F11</p><p class=\"ztext-empty-paragraph\"><br/></p><h3>4.4 逐过程执行</h3><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/v2-87272c1d293081ea5dc305acac5a69f7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"194\" data-rawheight=\"25\" data-original-token=\"v2-87272c1d293081ea5dc305acac5a69f7\" class=\"content_image\" width=\"194\"/></figure><p data-pid=\"7QAFHlf6\">和“逐语句执行”按钮不同，“逐过程执行”按钮常用在一个方法调用多个JS文件时，涉及到的JS代码比较长，则会使用到这个按钮。</p><p data-pid=\"xN75J-DM\">在复杂的JS文件中，F11会进入到jQuery等工具库文件的内容，点击逐过程执行的按钮就可以跳过框架的JS脚本了</p><h3>4.5 条件断点</h3><p data-pid=\"25RO6ke6\">已有断点位置的右键菜单中选择“Add Breakpoint…”或者空白位置右键出现的菜单选择“Add Conditional Breakpoint”，可以设置触发断点的条件，就是写一个表达式，表达式为true时才触发断点。</p><p data-pid=\"-nQJpGqz\">可以用条件断点代替在代码中的<b>console.log</b></p><h2>5 调用栈（Call Stack）</h2><p data-pid=\"1enyl6ib\">在断点停下来时，右侧调试区的<b>Call Stack</b>会显示当前断点所处的方法调用栈，比如有一个函数g()其中又调用了函数<b>f()</b>，而我在<b>f()</b>中设置了一个断点，那么执行函数g()的时候会触发断点，其调用栈显示如下：</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-3f13115f85cca000cf836d3f83c001e0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"192\" data-rawheight=\"145\" data-original-token=\"v2-3f13115f85cca000cf836d3f83c001e0\" class=\"content_image\" width=\"192\"/></figure><p data-pid=\"kgCFbgSe\">最上面是f()，然后是g()。调用栈中的每一层叫做一个frame，点击每个frame可以跳到该 frame 的调用点上。</p><p data-pid=\"4P1QR4wC\">此外，还可以在frame上用右键菜单重新开始执行当前frame，也就是从该frame的开始处执行。比如在函数<b>f()</b>的frame上Restart Frame， 断点就会跳到<b>f()</b>的开头重新执行，context中的变量值也会还原。</p><p data-pid=\"IgBKNqW-\">这样结合变量修改和编辑代码等功能，就可以在当前frame中反复进行调试，而不用刷新页面重新触发断点了。</p><h2>6 查看变量</h2><p data-pid=\"zlwKIK32\">Call Stack列表的下方是Scope Variables列表，在这里可以查看此时局部变量和全局变量的值。</p><h2>7 临时修改 JavaScript 代码</h2><p data-pid=\"GyPX2CMc\">Chrome中可以临时修改JS文件中的内容，保存（Ctrl+S）就可以立即生效，结合Console等功能就可以立即重新调试了。但注意这个修改是临时的，刷新页面修改就没了。</p><h2>8 在页面操作时触发断点</h2><p data-pid=\"WleFJ772\">在Source面板，右下角Event Listener Breakpoints菜单，选择不同的类型的DOM事件，可以在页面上发生对应的事件时，触发断点</p><h2>9 Copy As Fetch复制为 Fetch</h2><p data-pid=\"edNPeoDO\">在Network标签下的所有的请求，都可以复制为一个完整的Fetch请求的代码。</p><p data-pid=\"6_KYQCce\">操作：</p><ul><li data-pid=\"R5JF-NLT\">在<b>Network</b>标签页中，选中一个请求</li><li data-pid=\"IjHASKRG\">右击，选择<b>Copy --&gt; Copy as fetch</b></li></ul><figure data-size=\"normal\"><img src=\"https://pica.zhimg.com/v2-9bf16fd1e3843f79a920b148d48072a6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"570\" data-original-token=\"v2-9bf16fd1e3843f79a920b148d48072a6\" data-default-watermark-src=\"https://pica.zhimg.com/v2-8b89e9670cf4a24af5f01298178d7b54_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pica.zhimg.com/v2-9bf16fd1e3843f79a920b148d48072a6_r.jpg\"/></figure><h2>10 截屏</h2><p data-pid=\"Lnv0SGW3\">在新版本的Chrome中，提供了一个截图的API，你可以将整个页面截图或者截取部分页面元素，且截取的图片尺寸跟浏览器当前视图中要截取的内容所占尺寸一致。截图输出的是png格式的图片，会自动通过浏览器下载到默认的目录下。现在有三种截取的方式：截取整个页面、部分元素 或 当前视图。</p><ul><li data-pid=\"_043_cdF\"><b>CMD + SHIFT + P</b>(windows中用CTRL + SHIFT + P) 打开命令菜单</li><li data-pid=\"Ir9oULOq\">在<b>Elements</b>标签页，选中要截取的页面元素</li><li data-pid=\"xEjzazI5\">选择<b>Capture node screenshot</b>（或者<b>Capture full size screenshot</b>或者<b>Capture screenshot</b>）</li></ul><h2>11复制变量</h2><p data-pid=\"mscH_JRe\">不管是在Network面板还是在Sources面板获得的变量，如果想要拷贝出来都可这样做：</p><p data-pid=\"uAawJ6td\">（1）右键点击这个变量，选择<b>Store as global varible</b>，如果之前没有进行过这样的操作，那么想要拷贝的变量就会被复制到<b>temp1</b>这个全局变量中</p><p data-pid=\"_C4rCUOI\">（2）在控制台输入<b>copy(temp1)</b>，这时候这个变量就被复制到了剪贴板</p><p data-pid=\"iwutJftw\">（3）在需要的地方粘贴即可</p><h2>参考</h2><ul><li data-pid=\"l8fw1DQL\">韩国凯的博客 - Chrome 中的 JavaScript 断点设置和调试技巧</li><li data-pid=\"cR2LweM3\">CSDN - 利用chrome浏览器调试js断点的2点心得</li><li data-pid=\"c5ahXUKZ\">知乎 - 前端程序员不知道的14个JavaScript调试技巧</li><li data-pid=\"u_vrJTaK\">知乎 - 聊聊Chrome DevTools中你可能不知道的调试技巧</li><li data-pid=\"AInDYLqu\">前端页面，用 JavaScript 在调试 Bug 时有哪些奇技淫巧？@知乎</li></ul><h2>更多笔记分享</h2><ul><li data-pid=\"4QiN3aoW\"><a href=\"https://zhuanlan.zhihu.com/p/465679313\" class=\"internal\">认识JavaScript</a> / <a href=\"https://zhuanlan.zhihu.com/p/466283680\" class=\"internal\">注释以及输入输出语句</a> / <a href=\"https://zhuanlan.zhihu.com/p/467386111\" class=\"internal\">变量的使用、语法扩展、命名规范</a></li><li data-pid=\"tF6i-0dc\"><a href=\"https://zhuanlan.zhihu.com/p/468193673\" class=\"internal\">数据类型简介以及简单的数据类型</a> / <a href=\"https://zhuanlan.zhihu.com/p/468664933\" class=\"internal\">获取变量数据类型</a>/<a href=\"https://zhuanlan.zhihu.com/p/469219413\" class=\"internal\">运算符&amp;算数运算符</a> / <a href=\"https://zhuanlan.zhihu.com/p/470296033\" class=\"internal\">递增和递减运算符</a></li><li data-pid=\"p_tZlgWb\"><a href=\"https://zhuanlan.zhihu.com/p/470300185\" class=\"internal\">比较运算符和逻辑运算符</a> / <a href=\"https://zhuanlan.zhihu.com/p/470933090\" class=\"internal\">赋值运算符以及运算符优先级</a> / <a href=\"https://zhuanlan.zhihu.com/p/471913794\" class=\"internal\">流程控制-实际案例学习if语句</a></li><li data-pid=\"NuptIAoI\"><a href=\"https://zhuanlan.zhihu.com/p/471925073\" class=\"internal\">三元表达式&amp;分支流程控制 switch 语句</a> / <a href=\"https://zhuanlan.zhihu.com/p/472416751\" class=\"internal\">JavaScript的for循环学不明白怎么办？</a></li><li data-pid=\"BT_HOcR5\"><a href=\"https://zhuanlan.zhihu.com/p/478297648\" class=\"internal\">以案例学习JavaScript双重for循环</a> /<a href=\"https://zhuanlan.zhihu.com/p/478304094\" class=\"internal\">while以及do while循环</a></li><li data-pid=\"GCcJwtlq\"><a href=\"https://zhuanlan.zhihu.com/p/483297752\" class=\"internal\">遍历数组，附5个案例</a> / <a href=\"https://zhuanlan.zhihu.com/p/485578714\" class=\"internal\">函数的概念和使用</a>/<a href=\"https://zhuanlan.zhihu.com/p/486880405\" class=\"internal\">JavaScript函数的参数</a></li><li data-pid=\"kQIkhV7-\"><a href=\"https://zhuanlan.zhihu.com/p/486884907\" class=\"internal\">JavaScript的返回值</a> / <a href=\"https://zhuanlan.zhihu.com/p/489669343\" class=\"internal\">函数案例练习</a> / <a href=\"https://zhuanlan.zhihu.com/p/489714090\" class=\"internal\">JavaScript函数的两种声明方式</a> / <a href=\"https://zhuanlan.zhihu.com/p/495210745\" class=\"internal\">JavaScript 作用域</a></li><li data-pid=\"VdfLAeLk\"><a href=\"https://zhuanlan.zhihu.com/p/497944441\" class=\"internal\">对象</a></li></ul><h3>JavaScript最全拔高（更新中）</h3><p data-pid=\"7VXoe6Pj\"><a href=\"https://zhuanlan.zhihu.com/p/458842270\" class=\"internal\">JavaScript面向对象开发相关模式</a> / <a href=\"https://zhuanlan.zhihu.com/p/459279808\" class=\"internal\">JavaScript创建对象简单方式到优化</a> / <a href=\"https://zhuanlan.zhihu.com/p/461347980\" class=\"internal\">JavaScript面向对象游戏案例：贪吃蛇</a></p>",
            "relationship": {
                "is_thanked": false,
                "is_nothelp": false,
                "voting": 0
            },
            "is_labeled": false,
            "visited_count": 91711,
            "favorite_count": 1814,
            "answer_type": "normal"
        },
        "brief": "{\"source\": \"TS\", \"type\": \"answer\", \"id\": 2447274053}",
        "attached_info": "Ct0FCK+Wq7K0m6GwsgEQBBoJNDc1MDQyODg4INnw+ZIGKPoDMAtAFkpBCixUU19TT1VSQ0VfVFdPVE9XRVJfU0hPUlRJTlRFUkVTVF9SRUNBTExfVEVYVBIBMBgAIAA6CnsicmF3IjoiIn1aBzY0NzM3MDNiIDk4MDdhMDU0YTgxNjg4YmZjNDk5MzViNDliYjU5Y2Y1cgoyNDQ3Mjc0MDUzigEIMzU2Njc1NTiqAQlyZWNvbW1lbmTCASA2NmE4YjY3ZTc2MTA0YjljZDg4ZDFmMzU0ZGQyY2NiMPIBCggMEgZOb3JtYWzyASgIChIkYTIxZjVlMzEtMTJjYy00YTk3LTgyYmEtZWZmZGI2MDUwMzk58gEFCAsSATSCAgCIAt/D4qDpMZICIDY2YThiNjdlNzYxMDRiOWNkODhkMWYzNTRkZDJjY2IwmgIAygIbT2xkQ29udGVudFJlZHVjZTVXZWlnaHRSdWxlygIcQmF5ZXNGaXJzdExldmVsSXNvbGF0aW9uUnVsZdoCLFRTX1NPVVJDRV9UV09UT1dFUl9TSE9SVElOVEVSRVNUX1JFQ0FMTF9URVhU6AID+gILTk9STUFMX0ZMT1eKAyBiZDA3ZWMyNGIyNTE0NDJmYjQ0MTRmYzVmYjlkZmViOZoDDQoCdjAQABoFb3RoZXKoA7/MBdgDAOoDIGZlZWRfc2hvcnRpbnRlcmVzdF90d290b3dlcl90ZXh0+gMfEgxVTktOT1dOX01PREUgACoNTk9fSU1BR0VfTU9ERYAEAIgEAJIEBk5vcm1hbJoEATOgBACoBACwBAC6BAZtYW51YWzCBAMxNzDIBADSBA/mjqjojZDlt7Lmm7TmlrDYBADwBAD5BAAAAIDhEb8/gQUAAAAAAAAAAIkFTAy/P79/qT+SBQnkuIrln47ljLqaBQNkZnSiBQNkZnSyBQExuQUAAAAAAAAAANAFAOAFAOgFAPAFBJICJQoJNDc1MDQyODg4EgoyNDQ3Mjc0MDUzGAQiCklNQUdFX1RFWFQ=",
        "action_card": false
    },
    {
        "id": "23_1711881626.213",
        "type": "feed",
        "offset": 23,
        "verb": "TOPIC_ACKNOWLEDGED_ARTICLE",
        "created_time": 1711881626,
        "updated_time": 1711881626,
        "target": {
            "id": 372336924,
            "type": "article",
            "url": "https://api.zhihu.com/articles/372336924",
            "author": {
                "id": "083dc37b23265da6f6e316b79252aa74",
                "url": "https://api.zhihu.com/people/083dc37b23265da6f6e316b79252aa74",
                "user_type": "people",
                "url_token": "douyuexi",
                "name": "窦月汐",
                "headline": "游戏设计师，用游戏创造社会价值",
                "avatar_url": "https://picx.zhimg.com/50/v2-4bff43bba1b0e7aecc4c2fc1cef217fc_l.jpg?source=b6762063",
                "is_org": false,
                "gender": 1,
                "followers_count": 40767,
                "is_following": false,
                "is_followed": false
            },
            "title": "做了三年的游戏项目宣布关闭，失败经验",
            "image_url": "https://pica.zhimg.com/v2-d3954b6b5427d73fefc27cfb11261267_720w.jpg?source=7e7ef6e2",
            "comment_permission": "all",
            "created": 1620983031,
            "updated": 1621051501,
            "voteup_count": 4330,
            "voting": 0,
            "comment_count": 550,
            "linkbox": {
                "category": "",
                "pic": "",
                "title": "",
                "url": ""
            },
            "excerpt": "序从我进入这个公司到现在，我们花了三年半的时间来制作一款有特色的游戏，直到最终制作人决定项目关闭。在外面的人看来，我们消失了三年而一无所成，确实如此。从我们成员自己的视角看来，失去了人生中的一段宝贵的三年，随着项目的闭关，所有劳动成果都将埋没。唯一积累下来的，只有隐隐作痛的失败经验。 在做商业项目之前，我是不相信真正用心的游戏项目会在上线前失败的，甚至上线后如果反响不佳，也不一定就宣判失败。失败…",
            "excerpt_new": "序从我进入这个公司到现在，我们花了三年半的时间来制作一款有特色的游戏，直到最终制作人决定项目关闭。在外面的人看来，我们消失了三年而一无所成，确实如此。从我们成员自己的视角看来，失去了人生中的一段宝贵的三年，随着项目的闭关，所有劳动成果都将埋没。唯一积累下来的，只有隐隐作痛的失败经验。 在做商业项目之前，我是不相信真正用心的游戏项目会在上线前失败的，甚至上线后如果反响不佳，也不一定就宣判失败。失败…",
            "preview_type": "default",
            "preview_text": "",
            "column": {
                "id": "studygame",
                "type": "column",
                "url": "https://api.zhihu.com/columns/studygame",
                "author": {
                    "id": "",
                    "url": "",
                    "user_type": "people",
                    "url_token": "",
                    "name": "匿名用户",
                    "headline": "",
                    "avatar_url": "https://picx.zhimg.com/v2-d41c2ceaed8f51999522f903672a521f_l.jpg?source=b6762063",
                    "is_org": false,
                    "gender": -1,
                    "followers_count": 0,
                    "is_following": false,
                    "is_followed": false
                },
                "title": "自学游戏开发",
                "imageUrl": "https://pica.zhimg.com/v2-4ad3acac2a33ce93bcd716cdf3bc2b49_720w.jpg?source=d16d100b",
                "comment_permission": "public",
                "intro": "全能游戏设计师 的学习路径",
                "updated": 1599137145,
                "is_following": false
            },
            "content": "<p data-pid=\"tRtEhwMo\"><b>序</b></p><p data-pid=\"i6V8wIcy\">从我进入这个公司到现在，我们花了三年半的时间来制作一款有特色的游戏，直到最终制作人决定项目关闭。在外面的人看来，我们消失了三年而一无所成，确实如此。从我们成员自己的视角看来，失去了人生中的一段宝贵的三年，随着项目的闭关，所有劳动成果都将埋没。唯一积累下来的，只有隐隐作痛的失败经验。</p><p data-pid=\"FQos_iSt\">在做商业项目之前，我是不相信真正用心的游戏项目会在上线前失败的，甚至上线后如果反响不佳，也不一定就宣判失败。失败一定是有原因的，我相信只要能够定位到真正的原因，并把它解决，就能够避免失败。我有一句口头禅：问题，就是用来被解决的。但我疏忽了一点，有些时候人们能够发现问题，能够想到解决办法，但并不一定会有意愿去解决问题。有些时候是权衡利弊，觉得解决问题的成本太高而不愿意；有些时候是信心不足，觉得没有足够的能力去正面处理问题而不愿意；有些时候是兴趣不足，单纯地不喜欢做对解决问题而需要展开的行动。在此之前，我也并不拿市场的表现去评判一个游戏的成败，所以有时候我并不清楚项目的“失败”到底代表什么，现在大概有个认识了：失败就是，大多数成员对此失去了信心。</p><p data-pid=\"-nLuqfZd\">而我是属于少数的那一部分。</p><p data-pid=\"bl9h3C43\">这篇文章，我是想总结一下三年项目期间经历的一些事情——会导向失败的事情。并非为了问责或其他目的，仅仅是想为以后或同行的其他项目提供有用的经验，以加大将来项目成功的可能性。从现在回溯过去的开发历程，我认为我们项目中为失败埋下伏笔的有这么几个因素：</p><ul><li data-pid=\"ymUDDEN9\">对游戏终极想象的不一致和不坚定</li><li data-pid=\"YO31Wgl7\">对“好”评价标准不一致</li><li data-pid=\"5Nyrn68_\">对细节的盲目追求</li><li data-pid=\"NU7KFZhg\">决策者与设计者的合作方式问题</li><li data-pid=\"-E7l9aH8\">试图量化设计方案</li><li data-pid=\"GJCO9dDv\">对于不确定因素的虚假自信</li></ul><p data-pid=\"sHejzLxk\">下面我将以第三人称视角来叙述这些问题。</p><h2>对游戏终极想象的不一致和不坚定</h2><p data-pid=\"VtJIUEqs\">项目制作人是一名近50岁的资深引擎程序员，作为玩家和开发者更偏向模拟经营庄园养成类游戏，并非MMORPG游戏类型受众，也从来没有深入玩过现代主流沙盒游戏。兴趣点在于实现有难度有挑战性的技术方案，喜欢实现各种游戏Demo。</p><p data-pid=\"Gji5tALE\">项目主策是一名资深的MMO、沙盒游戏玩家，对于传统的开放大世界营造很熟悉，并且也深刻体会到传统MMORPG类型游戏数值无限积累的玩法弊病，希望建立下一个时代的MMO玩法框架。</p><p data-pid=\"xaK_jZ8-\">项目主程，是资深的竞速游戏玩家，对于非竞速类硬核PVP类型游戏经历并不深入。希望建立一个模拟世界，让世界中的NPC如真人一样活动，从而演化出社会。</p><p data-pid=\"g9KyKpeF\">项目立项的契机是制作人与朋友的交流，碰撞出一个“大世界”+“领地争夺”的想法。从技术上来说，这个想法的实现技术壁垒还是比较高的，市场上几乎没有项目做到。从策划上来说，这个上层玩法能够很自然地解决MMORPG和沙盒游戏的数值积累通病，实现价值很高。当然由于它是同时凌驾于MMO和沙盒之上的，所以设计难度也非常高。</p><p data-pid=\"cxL3DbSB\">在立项之初大家对于游戏的总体描述还都是一致的：把一群玩家丢进一个大世界里，让他们自己生存、发展，争夺领地，最后游戏在领地的不断争夺循环中进入动态平衡。随着游戏的不断开发，每到一个细节路口，我们都要做一些取舍判断。主策因为有丰富的沙盒游戏经历，所以他更偏重于在沙盒的基础上实现上层玩法，所以许多设计都带着强烈的沙盒风格，比如严酷的生存挑战，高劳动强度的物资采集，真实的死亡惩罚。并且客观推演出游戏要实现上层的领地争夺玩法，最终游戏氛围会是一个周期性军备竞赛，硬核PVP战斗的游戏，并且始终保持这一结论。 制作人由于是模拟经营类出身，在成长上更偏向于田园小镇生活，生动的劳动表现，轻松的生产环节。在PVP战斗上一般持保留意见，随着后期的不断开发，模拟经营的思想基本完全占据了决策上风，开始弱化PVP。</p><p data-pid=\"IbA9Vvpk\">在主策看来，弱化PVP基本就背离的立项的最初的想法：领地争夺。在游戏开发的第三年，期间不断的交流碰撞中，制作人提出了新的方向：大世界+庄园养成。无论是出于对设计难度的考虑，还是出于对开发成本的考虑，方向肯定是一次大改。在改方向的半年后，游戏基本面目全非，十个月后宣布项目关闭。</p><p data-pid=\"lD0VGlVf\">后面在交流总结的时候，大家也提到对游戏终极想象的不一致，导致在开发过程中对各种细节设定的取舍想法不同。而制作人在开发前期对领地争夺的积极想象，到后期逐渐倾向于庄园养成的转变，进一步提高了终极想象的问题解决成本。</p><p data-pid=\"cNa_7KBr\">本来人人都是会有不同的经历、不同的思想，在兴趣和偏好上也有自己的一套，这是一个客观现象并不是一个问题。而不同的人凑在一起组成一个团队，去实现同一个目标，这是再正常不过的事情。关键在于，当大家想法不一致的时候，需要有人能够站出来主持大局，让大家心往一处想，力往一处使。有人该妥协的需要妥协，以实现团队目标为第一优先。我们经历的问题在于：团队目标逐渐变成了领导者个人目标，并且个人目标还在发生改变。制作人首先提出“大世界”+“领地争夺”的团队目标。主策坚定地接受这个目标，并客观地去推演实现目标的过程和最终效果，之后在这个路径上做了两年多的设计工作。然后制作人由于某些因素的考虑更改了团队目标，这一决定直接使前面的工作变成沉没成本，间接导致了项目后期的混乱。</p><p data-pid=\"q7QNxHU1\">因为游戏开发不同于普通的应用程序开发，应用程序会讲究系统解耦，每一个模块相对独立，完成自己需要负责的事务就行，尽量不要与其他模块纠缠，这样在改的时候每次都可以独立修改单一模块。而游戏项目越到后面越讲究模块耦合，把游戏里所有的系统功能、设定全都融汇打通，让它们形成一个有机的整体。两年多时间，主策都已经把各个模块耦合得差不多了，这时候叫改，而且是改大方向。这不是闹着玩么？</p><p data-pid=\"Ty7BKKKb\">如果说早一点，在项目前期几个月，就把方向、体验推演清楚，那时候改方向完全可以。并不是说一定要“大世界”+“领地争夺”才能击穿市场，并不是说“大世界”+“庄园养成”就做不出精致的游戏。只是，大家要从一开始就确定游戏的最终想象，并至始至终坚持它，越到后期越坚持它。这是一种成事的信心。</p><p data-pid=\"su0J_dcx\">如果立项的时候，核心成员就信心不足，抱着试一试的心态进来，那时间会证明他多半靠不住。做事还行，拿捏事情就算了。</p><hr/><h2>对“好”的评价标准不一致</h2><p data-pid=\"vNosIfrP\">每个人都会去追求“好”的事物，为“好”的观点发表言论。 同时每个人也都有自己的价值观，和一套个人的评价体系，去指导我们评价其他事物是不是“好”。</p><p data-pid=\"0HifMS1p\">游戏开发的过程，是一个创新、创造的过程，在很多方面它不像标准化的工业流程那样存在具体的指标去判断每个环节处理的好坏。并且我们的项目一边开发游戏业务，一边还开发工具，建立制作流程，同时在内容设计、规则设计上，一些设计原则也是在过程中固定下来的。这个过程走得非常艰难，往往一个小的问题意见不一致，就能把问题上升一级去讨论，追溯到设计理论、设计理念、设计原则层面，仍然会产生不同的意见。</p><p data-pid=\"pCuoeGHQ\">举一些例子，比如说：玩家死亡，装备要不要掉落？</p><p data-pid=\"8FjmOch7\">主策思考这个问题的时候，想的是：装备不掉落不损失的话，资源的积累就没法释放，最后还是会走进数值困境。主程会认为：对于现代RPG玩家来说，装备的养成打造是很费心的，如果搞半天掉了没了，玩家会接受不了而退游。一个站在框架完整性的角度去思考，一个站在玩家体验的角度去思考，两个角度都肯定有自己的正当性，那这意见分歧怎么解决。</p><p data-pid=\"K5tuLeEB\">然后主策提出：对于核心玩家来说，一套装备的损失肯定是不好的体验，但不至于退游，这是一个玩领地争夺的游戏，其他东西都是为核心服务的消耗品。主程也是行业老兵，会提出：一个MMO级别的网游，如果不能保证大众玩家的体验，就不能保证玩家基数，没有这个基数，领地争夺根本玩不起来。所以普通玩家的体验得保证，掉装备核心玩家能承受，普通玩家能承受吗？有些问题一旦提出，它就没有便宜的处理方式。</p><p data-pid=\"2NLEpXOc\">最后问题可以上升到，我们设计游戏的原则，是“在保证大众玩家的体验上，深挖核心玩家的需求”，还是“在保证核心玩法核心玩家的体验上，尽可能让更多人能玩上手”。主程明显持有前一种设计原则，而主策持有后一种。在原则、理念这个层面，大多数时候我们并不能分出孰是孰非，只是大家的基本思想不一致，这是一个客观事实。这个问题，在日常中的表现就是各种小问题的意见矛盾。</p><p data-pid=\"OvJ0TgDF\">上面说的是“设计理念”不同引向的问题，还有另一个维度的评价标准不一致——做事风格。用专业术语描述就是“设计方法论”不一致。</p><p data-pid=\"GP0Q5DvD\">举个例子：在项目开发的第二年，基本的沙盒生存建造的内容都已经落地了，接下来应该做哪一部分？制作人认为应该做任务系统、引导系统，把前面已经做的内容串起来，做成一个可以体验的游戏流程，后面的开发工作就是在不断地去增加内容延长这个流程。主策认为游戏中最核心的部分“领地争夺”系统还没有落实，它属于框架中最重要的一环，应该先做它以闭环整个玩法循环。</p><p data-pid=\"pUz2jcOU\">这两个人的设计方法论，一个是“一步一个脚印”型，一个是“先打框架再填内容”型。这个基本做事方法不一致，会导致配合过程中内部产生应力。由于制作人是具有最终决策权的角色，所以第二年还是以做前期流程作为了主要团队工作。后面基本上每个月都会迭代一个版本，来跑一趟前期流程。新手引导是不是顺畅，数值是不是合理，表现够不够生动，任务有没有节奏。“一步一个脚印”的方法最大的问题就是，当你意识到有几步走错的时候，那基本上前面精心踩出来的脚印都得重搞一遍。比如第二年年底，我们流程好不容易搞得有滋有味了，然后制作人出于想轻松生产的意愿，决定要实现自动仓库。然后前面所有的生产环节、天赋加点、机器设施、任务指引都得跟着改，要知道这些玩意儿可是花了几个月精心打磨过的，每一个细节都是经过推敲经过团队共同认可的。</p><p data-pid=\"tW0scAqR\">为什么制作人会做这样的决策？从他的角度来说，肯定是因为觉得先做流程体验比完善框架要好呀，流程做了就能让人玩起来了，框架做半天啥也玩不到。改方案也是因为改了之后体验会更好呀，至少他作为玩家来说他的个人体验会更称心意。因为秉持的基本方法论就不一致，所以就算让主策来做最终决策，那结果又会怎么样呢？也是有事实证明的。后期制作人觉得自己把握不了这个项目，让主策来全权主持大局，制作人完全不干预制作。然后主策带着团队花了6个月时间，把游戏所有的框架都搭建完成了。最后呢，6个月阶段验收的时候，制作人一玩，发现这儿也毛糙，那儿也有瑕疵，说是框架搭完了，但游戏体验晦涩不堪根本走不下去，玩不到领地争夺那儿就想退游了。在主策看来，这只一个阶段性验收呀，以前一直没闭环的玩法，总算完成了，接下来就只需要按部就班添加内容，打磨细节就行了。但是在制作人看来：时间给你了，你就拿出这么个表现的东西，别说什么核心玩法，连物品描述这种最基本的内容都没写全，后面还搞个啥。</p><p data-pid=\"ZGmlBx4o\">两个角色在同一时刻对同一轮测试做出完全不同的评价，基本上就是因为做出评价时采用的评价系统不一致，在我们这个案例中就是做事方法论不同。对于先做什么后做什么，在什么时间节点应该完成什么事情，持有不同的观点。设计方法论的问题不同于设计理念的问题，方法论确实是能分出个孰优孰劣的，因为这比较的是谁能把事情做的更好更快更低成本高容错。问题就在于，谁都觉得自己的方法是更好的，对方的不行不行。</p><hr/><h2>对细节的盲目追求</h2><p data-pid=\"khSlRUQY\">这一节紧接着上一节的“一步一个脚印”式做法继续讲。不知道大家有没有看过网上美术大师画画的视频，如果看过的话你们会发现，他们经常喜欢从一个局部出发画完整幅画。</p><p data-pid=\"VBPXPK8r\">然鹅当我们去学画画的时候，你如果这么画的话，多半会被老师摁在调色盘里，告诉你先构图，先起形，别抓着个眼睛细节在那儿可劲儿磨。画过画的人都知道，扣细节爽，一直扣，一直爽，扣到最后发现，两个眼睛单独看是挺好看，合到一起，咋是歪的呢？啊？咋办，擦了重来，扣两小时细节白搭。</p><p data-pid=\"EU8RjPKt\">那都还好，毕竟一幅画的创作时间不太长，不像我们做游戏动不动几年搭进去了，做到第二年发现前面做的不对，得重来，那谁遭得住？</p><p data-pid=\"wRgPEmqJ\">会遇到这种问题的开发者，多半都是有细节癖，当然也可以说自己是完美主义者，自己是自我要求很高的游戏人，作品里容不得瑕疵。<br/>其实这些问题的根源有两种：一种是对项目的把控缺少全局性，心中的不安只能用丰富的细节去弥补；另一种是有了全局观，但是对计划和成本没有把控，放任时间和资源成本的膨胀。前一种是新手上路畏畏缩缩，后一种是大佬飙车放飞自我。但不管是哪一种最后多半都不会有啥好下场。（Rockstar的大佬除外）</p><p data-pid=\"1CFdm69u\">不管什么级别什么资历的开发者，我都建议采用框架式设计。就像盖楼一样，要先打地基，然后建楼体框架，然后里外装修，通水通电。一步一个脚印是啥意思，就是先打地基，然后盖第一层，盖的时候直接做到样板间的程度，做好了能住人了，住着舒服了，再开始盖第二层。每一层都要装修完能住人才允许继续往上盖。有开发商这么盖楼的么？</p><p data-pid=\"Jd1ChyQx\">插个题外话，我们立项之初，有个建筑师朋友正好开始施工建一个小楼，我们项目关闭的时候，他们楼已经建好了。</p><p data-pid=\"WJG653zv\">在我们的项目中，第二年制作人一直压着要做前期流程，要把每一个细节打磨到位。并不是说做游戏不该打磨细节，而是要看什么阶段该去打磨细节。楼体没有建好呢，去做装修有什么用？因为制作人长期投入精力在引擎和工具开发上，对游戏全局设计几乎托管给主策，所以他内心肯定是有所不安不确定的，而他能确定的就是那些他能看到能听到能交互的那些游戏细节。另外制作人还把这个项目当作是他的收官之作，所以在成本投入上，几乎是不设指标的，项目不设开发时间表，要问什么时候要做到什么样，不知道；什么时候能做完，不知道。这个浇水的时候，水滴洒下去回弹的感觉必须得加一下。水滴在地上和叶子上的不同层次的声音也也得体现出来（举个栗子）。包括后期主策全权负责项目的时候，在阶段性验收中，也去用细节打磨的问题来做出负面评价。在主策看来：压根没做的事情，也可以被评价做的不好么。就像造一辆车，造到一半，人家说你这车轮子咋就只有个轮毂呀？</p><p data-pid=\"kM8-9cdA\">不管是做作为个人开发者，还是项目管理者，在聚焦细节的时候都应该先看一眼项目时间表，看一看现在是个什么阶段，做什么工作才能使项目离成功更近一步，而不是盲目地任性地进入细节打磨状态。我们应该不停地审视项目阶段，在开发过程中项目状态是动态的，这个月可能战斗系统是最大的短板，下个月可能战斗系统还没做完善，但是横向比较坐骑系统已经变成最迫切需要落实的模块了。工作计划需要跟随项目状态实时更新，以确保项目是在全局性地推动。</p><hr/><h2>决策者与设计者的合作方式问题</h2><p data-pid=\"XiNELZmC\">游戏制作人负责制作什么？</p><p data-pid=\"wkQ-d18O\">可能会有各种答案，但肯定不会是开发工具。</p><p data-pid=\"cpbI60OX\">在我认知中，一种游戏制作人就是主策，负责设计游戏的主体内容框架，决策重要内容。另一种游戏制作人更多扮演项目经理的角色，管理项目进度，协调资源。这都是可行的职权方案。</p><p data-pid=\"J9KVIFo1\">但是很多时候分设了制作人和主策的岗位，却没有明晰两个岗位的工作职责。最典型的问题就是，最大的决策权在制作人那里，但是要主策去全局设计游戏。既然要主策去把控全局，那制作人的决策权，他决策个啥？用什么依据什么视野去做全局决策？要做全局决策，就要思考全局的事情。不然做出正确决策的概率跟抓阄没啥区别。</p><p data-pid=\"zL0n1dJe\">在我们的项目中，制作人由于是程序出身，本身的兴趣点也在于技术实现上，所以开发期间大部分时间都在思考一些技术难点如何实现，一些开发流程能不能优化加速。主策问及宏观问题的方向时，制作人时不时就避重就轻，把话题引向具体细节展开讨论，最后对原初问题做一个草率决定，并加以说辞“先试试看吧”。慢慢地主策意识到，有些问题是不用问的，自己心里很清楚该怎么做才是对的，问的话反而会得到其他不可知的答案。但是这样，对于重要决策，免不了遭到制作人“中途”问责存在先斩后奏的行为。</p><p data-pid=\"g41hiNN2\">然后主策的沟通策略变成，带着问题和答案开启交流，就是报告发现了什么问题，同时也想好了解决方案该怎么做，说一声大家知晓一下。但是这种报告总是会引出“更好”的解决方案。聪明的人都会认为我能比别人想出更好的方案，权力的上游尤其会有这种错觉。然后主策经过数天深思熟虑，平衡利弊得出的方案可能就被五分钟讨论出来的方案替包了，甚至连他自己都觉得新的方案似乎更好。回去冷静下来一思考，刚才我们确定了个啥玩意儿？</p><p data-pid=\"wQ7gbdsx\">再后来主策的沟通策略变成了：引导制作人思考，让制作人想出一个他觉得是他自己想出的，同时符合主策预想的解决方案。这沟通一下就变成一个艺术活的。就像你想让你家孩子认为喝开塞露是错误的，但是你不能直接告诉他那不能喝，他会觉得那玩意儿那么好喝为什么不让喝，我偏要喝。你得想点办法让他“自己”觉得那玩意儿不能喝，让他这个想法产生于他自己的思考，而不是你的灌输。</p><p data-pid=\"M55bqcZz\">有些时候，事情本身并不难做，难的是让人做事情。</p><p data-pid=\"TBKiR3L4\">而上面那些奇奇怪怪的沟通技巧其实可以不用的，因为越是有技巧性的沟通肯定越是消耗心力的，有这些心力留着去思考游戏本身的设计问题它不好吗。一个团队要把职权分清楚，把最终决策权交给做全局思考的职位手里，拿着最终决策权的人也要做好全局思考的工作，不要用任何方式回避宏观问题，也不要妄想交给他人托管。</p><hr/><h2>试图量化设计方案</h2><p data-pid=\"a4c6o5Qn\">在评论中看到 <a class=\"member_mention\" href=\"https://www.zhihu.com/people/ac4ff950d524bf65dae902e463bd7223\" data-hash=\"ac4ff950d524bf65dae902e463bd7223\" data-hovercard=\"p$b$ac4ff950d524bf65dae902e463bd7223\">@猴与花果山</a> 猴叔的深刻分析，感觉非常有启发。但是猴叔表示文中没有反应主程的问题，批评得不够均匀，所以回来特意补充这一小节。</p><p data-pid=\"j2XvKcUa\">其实主程是一个无可指摘的老好人，一直兢兢业业地开发业务逻辑。唯一能说道一下的就是在沟通中，主程会习惯性去量化设计方案。让方案的提出者回答——这个方案有什么好处，会带来什么其他问题，好处与坏处相比哪个更多？是能让游戏更好玩，还是创造更多收入？<br/>当一个方案建立时，它确实应该经历上述问题的审视。这样会逼迫方案提出者考虑更全面，平衡利弊更清晰。<br/>而问题在于，如果这种提问，变成了一种沟通中争夺我方正当性，提升对方回答成本的，话术。那么这个话术的威力可就太大了。可以驳回几乎任何感性的设计方案。因为感性的东西很难用量化指标去评估的，即使方案提出者信誓旦旦回答“好处大大滴”，那大家心里也门儿清不能信。</p><p data-pid=\"sGBJwpzy\">这种话术经常发生在，主程正在专心看早间新闻，或者正在焦头烂额地处理棘手BUG，然后主策屁颠屁颠去提出他想了好几天上的方案，让对方评估一下准备实现。</p><p data-pid=\"U1edVEG_\">对这个问题进行分析，其实深层次的原因并不在与程序员的思维方式问题，而是开启对话时参与者的状态问题。明明人家此刻都不处于Ready to talk的状态，但是非要开启一个方案的讨论，那受害的多半都是无辜的方案。</p><p data-pid=\"6jh4QE2Q\">另外就是忠告，真正抱有量化思维习惯的开发者，游戏的设计不是纯工业性的，是带有一定艺术性的。应该要允许主观表达的存在。如果对每一个设计点都严格地进行量化评估，那么得到的结果要么就是策划人员变成越来越不可理喻，要么就是游戏变成冷冰冰的程序。</p><hr/><h2>对于不确定因素的虚假自信</h2><p data-pid=\"_FNtuCMH\">正如评论中 <a class=\"member_mention\" href=\"https://www.zhihu.com/people/f3012fd71512a1a30d8a4be7711e7a92\" data-hash=\"f3012fd71512a1a30d8a4be7711e7a92\" data-hovercard=\"p$b$f3012fd71512a1a30d8a4be7711e7a92\">@东东</a> 所说，用盖楼比喻做游戏是不那么恰当的，因为楼房需要从工程图到施工计划每一步都精确设计，完全完工直至交付。而做游戏，特别是有探索性质的游戏，是很难做到早期的“完全设计”的，再牛逼的策划，也不可能在策划案里把每一个细节都考虑到，也不可能对每一个设定方案抱有百分百的确信——在上线后这些预想的方案能发挥期望的作用。</p><p data-pid=\"66dRp3Gk\">上面尖锐地指出制作人的问题在于专注细节缺少全局考量。第三年，经过多次交流，制作人也大度地承认了指挥问题客观存在。同时，制作人也把决策权全权交给了主策，给了主策一定时间去挽救项目。</p><p data-pid=\"Cb0mweOZ\">主策自认为对于所做游戏的认知非常深刻，主体框架已经思考很成熟，只要设计完全落实即可保证项目完成。但是在项目的后期，大家逐渐发现，主策的这种自信，是一种带着盲目和掩饰的自信。</p><p data-pid=\"OSrfIabC\">在第三年十月的时候，项目1.0决定关闭，大家都心有不甘，觉得付出多年的心血不应该落得如此下场。那时主策为了挽救项目，表示自己对项目有十足的信心，知道如何挽救才能走出困境，并且努力地向团队和制作人传递这种信心和决心。那时大家都非常低落，主策的这种态度作为一道强力的肾上腺素注入团队。大家决定跟随主策再做最后一次努力。但是为了保证项目的续存，主策传递的信心和信息存在过多的水分。其中主要的问题就有：为团队建立了不切实际的预期。<br/>在主策争取项目继续的时候，制作人心里想的是再给两三个月让他改改看。而主策心里明白，项目1.0已经从内容框架和程序框架上都改废掉了，没有挽救方法，只能推到重构。而如此庞大的项目重构至少需要六个月才能搭建完整体框架。但是六个月显然不符合制作人的挽救心态。在那个时刻主策向制作人给出的计划安排是：两个月搭建完核心框架、四个月搭建完主体内容——然后回去就做了六个月开发计划——试图先斩后奏绑架时间周期。<br/>这个行为导致的后果就是在第二个月和第四个月的进行阶段验收的时候，游戏表现远远不如制作人预期。但是由于车轮已经滚起来，大家都被主策裹挟上车，只好硬着头皮继续做下去。</p><p data-pid=\"UVQF7wt_\">另一个维度的虚假自信是主策对团队成员的不确定信息掩饰。在这个项目中有许多设定是没有先例参考的，在上线和玩家见面之前谁也不能确保方案的有效性。有些问题是主策也不确定的。比如说：我们设计了领地争夺，但是由于动态平衡的需求考虑，我们没有加入对领地争夺的直接利益奖励，期望通过让玩家的团队荣誉感驱动领地争夺行为发生。这种核心玩法的驱动力是否足够？主策并不确定。但是当被团队质问起时主策给出的回答是：这样的驱动力就足够了。类似的对不确定性问题给出虚假确定回答的案例还有很多。事后复盘时他自己也坦白到，是希望传递出确定的态度，因为不确定的开发内容容易引起工作抵触。<br/>但是当不确定的东西最终被识破时，引起不仅仅是工作抵触，那会变成信任危机。在项目2.0的期间，主策就因为多次没有坦诚地说明不确定设计，总是试图塑造一种全知强硬人设，而逐渐失去了团队的信任。</p><p data-pid=\"WWGy0FjO\">在项目2.0的第六个月阶段性验收时，主策对制作人那边才真正地坦白项目开发的后续计划和成本。出于对阶段性细节表现的失望，对后续开发成本的忧虑，对团队成员信心的丢失，最终我们只能再次做出了艰难而沉痛的决定。</p><hr/><p data-pid=\"0rJq998w\">回顾这段游戏开发历程，我确信这是一段极其特殊的经历。立项之初，我们核心成员租了一栋别墅，在里面吃住生活工作。别墅带一个院子，本想着大家没事儿在院子里边乘凉边讨论下方案，嗐，结果忙起来院子里野草都长到人那么高了，也没用过几次。制作人没有给大家施加什么工作压力，希望保持团队有充沛的精力和良好的生活状态，以做好这份创意型工作。不设时间节点，也不走繁琐的商业流程，大家尽可能地去发挥自己的才能，做出心目中的理想游戏。这样的开发心态，在浮躁的游戏行业里算得上是一股清流了。公司曾经有许多项目，但是目前仅靠最早的几款吃老本撑着现金流。每次我们表示担心公司的经营状况的时候，老板就会安抚大家不用考虑资金压力。以做出一个能打动市场的作品为最高目标。<br/>这是真正的游戏人的心态。加入这样的团队我感觉非常幸运和幸福。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"5HStcHJv\">三年的游戏开发经验，只是项目没有做成，很可惜。不过能积累下这些经验也算是非常宝贵的。总结一下：</p><ul><li data-pid=\"Aq0l9UP1\">‌立项之初，以及开发过程中，核心成员一定要有统一的游戏想象，并且对最终想象做好全面的推演，想清楚游戏做出来是什么样，玩起来是什么感觉。后面就是坚守这个立项根本，不再动摇。如果一开始就想不清楚，就不要妄想以后会突然开悟。</li><li data-pid=\"-vkVWwqu\">核心成员的设计理念和设计方法论最好要一致，这种基本思想的不同会导致合作的全方面立体性矛盾。如果理念谈不到一起，就不要硬凑CP了，何必互相折腾呢。</li><li data-pid=\"GYEH-XB6\">在不同的阶段做不同的工作，在该打磨细节的时候才打磨细节，不要放任全局不管，一头扎进细节的大坑里。跳坑容易出坑难，出坑发现当初没有解决的大问题，仍旧伫立在那里。</li><li data-pid=\"_p-T0HK9\">不谋万世者，不足谋一时；不谋全局者，不足谋一域。把全局的决策权，交给谋全局者。谋全局者，别天天写代码，代码写多了真的不想去思考宏观的感性的问题。</li><li data-pid=\"OW-ZJZTj\">在大家状态合适的时候开启方案的讨论，如果方案不如自己意愿，可以直接表达，可以持保留意见，但不要习惯性用量化提问抬高对方的回答成本。设计者在抛出方案前，应该自己主动评估利弊，做到心里有数，有问有答，不要临时信口开河。</li><li data-pid=\"DADb7Bud\">决策者应该对团队成员开诚布公，允许不确定因素的存在，但不能允许不确定因素被掩盖。应该提供正确的信息，为团队建立正确的期望。不要等到不切实际的预期被迫破灭时，团队的信任瓦解，再无回天之力。</li></ul><hr/><p data-pid=\"trg5nQIB\">谢谢大家的客观分析和评论。我想在文末补充一些信息，我们团队中每一位成员都是有能力制作独立游戏的从业者。尤其制作人是从2000年就进入游戏行业的业界资深前辈，亲自带队开发过许多大型项目，其中不乏商业成功的项目。文中对制作人角色进行了许多尖锐刻薄的指责，仅仅限于笔者的主观视角，肯定存在片面和偏激的论断。大家还请客观看待。对于制作人大有冒犯，还请海涵。提笔之意不在于甩锅，也不在于否定具体的人，而是对工作中经历的事情做出反思。我相信不管是谁来当制作人或主策，都或多或少会存在一些问题。因为人本身，不可能是完美的，不可能不犯错误。我们团队的一个良好氛围就在于，大家总能够直言不讳地指出问题，每个人也都能够坦诚大方地领锅。所以项目的成功是大家共同的成功，失败是大家共同的失败。每个人站在不同的视角，能够总结出不同的经验教训，希望这些经验，能对同行和我们今后的项目，有所借鉴之处。</p>",
            "is_labeled": false,
            "visited_count": 297987,
            "thumbnails": [
                "https://pica.zhimg.com/v2-d3954b6b5427d73fefc27cfb11261267_720w.jpg?source=7e7ef6e2",
                "https://picx.zhimg.com/50/v2-d3954b6b5427d73fefc27cfb11261267_720w.jpg?source=b6762063"
            ],
            "favorite_count": 5764
        },
        "brief": "{\"source\": \"TS\", \"type\": \"article\", \"id\": 372336924}",
        "attached_info": "CvcFCK+Wq7K0m6GwsgEQBxoJMTcwODcxMjc0IPf5+IQGKOohMKYEQBdKNAofVFNfU09VUkNFX05FV0JJRV9URVhUX1RXT19UT1dFUhIBMBgAIAA6CnsicmF3IjoiIn1aBTI2Njc2YiA5ODA3YTA1NGE4MTY4OGJmYzQ5OTM1YjQ5YmI1OWNmNXIJMzcyMzM2OTI0ggFTaHR0cHM6Ly9waWNhLnpoaW1nLmNvbS92Mi1kMzk1NGI2YjU0MjdkNzNmZWZjMjdjZmIxMTI2MTI2N183MjB3LmpwZz9zb3VyY2U9N2U3ZWY2ZTKKAQlzdHVkeWdhbWWqAQlyZWNvbW1lbmTCASAwODNkYzM3YjIzMjY1ZGE2ZjZlMzE2Yjc5MjUyYWE3NPIBCggMEgZOb3JtYWzyASgIChIkZWYzNDA4NjQtMjg1MS00ZjcwLTljODYtZTM1YjJiMDE1YTQz8gEFCAsSATSCAgCIAt/D4qDpMZICIDA4M2RjMzdiMjMyNjVkYTZmNmUzMTZiNzkyNTJhYTc0mgIAygIbT2xkQ29udGVudFJlZHVjZTVXZWlnaHRSdWxl2gIfVFNfU09VUkNFX05FV0JJRV9URVhUX1RXT19UT1dFUugCBPoCC05PUk1BTF9GTE9XigMgYmQwN2VjMjRiMjUxNDQyZmI0NDE0ZmM1ZmI5ZGZlYjmaAw0KAnYwEAAaBW90aGVyqAODmBLYAwDqAx5uZXdiaWVfdGV4dF90b3dfdG93ZXJfbm9fbGltaXT6Ax8SDFVOS05PV05fTU9ERSAAKg1OT19JTUFHRV9NT0RFgAQAiAQAkgQGTm9ybWFsmgQBNKAEAKgEALAEALoEBm1hbnVhbMIEAzE3MMgEANIED+aOqOiNkOW3suabtOaWsNgEAPAEAPkEAAAAILImrj+BBQAAAAAAAAAAiQVMDL8/v3+pP5IFCeS4iuWfjuWMupoFA2RmdKIFA2RmdLIFATG5BQAAAAAAAAAA0AUA4AUA6AUA8AUEkgIkCgkxNzA4NzEyNzQSCTM3MjMzNjkyNBgHIgpJTUFHRV9URVhU",
        "action_card": false
    }
]
export default mockList;